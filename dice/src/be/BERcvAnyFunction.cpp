/**
 *	\file	dice/src/be/BERcvAnyFunction.cpp
 *	\brief	contains the implementation of the class CBERcvAnyFunction
 *
 *	\date	01/21/2002
 *	\author	Ronald Aigner <ra3@os.inf.tu-dresden.de>
 *
 * Copyright (C) 2001-2003
 * Dresden University of Technology, Operating Systems Research Group
 *
 * This file contains free software, you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License, Version 2 as 
 * published by the Free Software Foundation (see the file COPYING). 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * For different licensing schemes please contact 
 * <contact@os.inf.tu-dresden.de>.
 */

#include "be/BERcvAnyFunction.h"
#include "be/BEContext.h"
#include "be/BEFile.h"
#include "be/BEType.h"
#include "be/BETypedDeclarator.h"
#include "be/BEOpcodeType.h"
#include "be/BEDeclarator.h"
#include "be/BEImplementationFile.h"
#include "be/BEHeaderFile.h"
#include "be/BEMsgBufferType.h"
#include "be/BEUserDefinedType.h"

#include "TypeSpec-Type.h"
#include "fe/FEInterface.h"

IMPLEMENT_DYNAMIC(CBERcvAnyFunction);

CBERcvAnyFunction::CBERcvAnyFunction()
{
    IMPLEMENT_DYNAMIC_BASE(CBERcvAnyFunction, CBEInterfaceFunction);
}

CBERcvAnyFunction::CBERcvAnyFunction(CBERcvAnyFunction & src):CBEInterfaceFunction(src)
{
    IMPLEMENT_DYNAMIC_BASE(CBERcvAnyFunction, CBEInterfaceFunction);
}

/**	\brief destructor of target class */
CBERcvAnyFunction::~CBERcvAnyFunction()
{

}

/**	\brief creates the receive-any function for the given front-end interface
 *	\param pFEInterface the respective front-end interface
 *	\param pContext the context of the code generation
 *	\return true if code generation was successful
 *
 * - The return type of a receive-any function is the type of the opcode.
 * - The name of the function is generated by the name factory
 * - The parameters of the receive any function are a reference to the expected sender and a
 *   reference to the message buffer, which will receive the message
 * - The function has no attributes
 * - The functions throws no exceptions
 *
 * \todo make opcode type globally available via class factory (own class?)
 */
bool CBERcvAnyFunction::CreateBackEnd(CFEInterface * pFEInterface, CBEContext * pContext)
{
    pContext->SetFunctionType(FUNCTION_RECV_ANY);
	// set target file name
	SetTargetFileName(pFEInterface, pContext);
    // function name
    m_sName = pContext->GetNameFactory()->GetFunctionName(pFEInterface, pContext);

    if (!CBEInterfaceFunction::CreateBackEnd(pFEInterface, pContext))
        return false;

    // return type -> set to opcode
    String sOpcodeVar = pContext->GetNameFactory()->GetOpcodeVariable(pContext);
    if (!SetReturnVar(pContext->GetClassFactory()->GetNewOpcodeType(), sOpcodeVar, pContext))
    {
        VERBOSE("CBERcvAnyFunction::CreateBE failed because return var could not be set\n");
        return false;
    }
    // add parameters (sender, message buffer)
    if (!AddMessageBuffer(pFEInterface, pContext))
        return false;

    return true;
}

/** \brief adds the specific message buffer parameter for this function
 *  \param pFEInterface the respective front-end interface to use as reference
 *  \param pContext the context of the create process
 *  \return true if the create process was successful
 *
 * Instead of creating a whole new message buffer type, we use the existing type
 * of the class as a user defined type.
 */
bool CBERcvAnyFunction::AddMessageBuffer(CFEInterface * pFEInterface, CBEContext * pContext)
{
    // get class's message buffer
    CBEClass *pClass = GetClass();
    assert(pClass);
    // get message buffer type
    CBEMsgBufferType *pMsgBuffer = pClass->GetMessageBuffer();
    assert(pMsgBuffer);
    // msg buffer not yet initialized
    pMsgBuffer->InitCounts(pClass, pContext);
    // create own message buffer
    m_pMsgBuffer = pContext->GetClassFactory()->GetNewMessageBufferType();
    m_pMsgBuffer->SetParent(this);
    if (!m_pMsgBuffer->CreateBackEnd(pMsgBuffer, pContext))
    {
        delete m_pMsgBuffer;
        m_pMsgBuffer = 0;
        VERBOSE("%s failed because message buffer could not be created\n", __PRETTY_FUNCTION__);
        return false;
    }
    return true;
}

/**	\brief writes the variable declarations of this function
 *	\param pFile the file to write to
 *	\param pContext the context of the write operation
 *
 * The variable declarations of the call function include the message buffer for send and receive.
 *
 * We do not define the message buffer for this function, because it gets its message buffer as
 * a parameter.
 */
void CBERcvAnyFunction::WriteVariableDeclaration(CBEFile * pFile, CBEContext * pContext)
{
    // declare return variable
    m_pReturnVar->WriteZeroInitDeclaration(pFile, pContext);
}

/**	\brief writes the variable initializations of this function
 *	\param pFile the file to write to
 *	\param pContext the context of the write operation
 *
 * This implementation should initialize the message buffer and the pointers of the out variables.
 *
 * Because we get this message buffer from the outside as a reference we do not initialize it,
 * we assume this has been done by others already (is this correct?).
 */
void CBERcvAnyFunction::WriteVariableInitialization(CBEFile * pFile, CBEContext * pContext)
{
}

/**	\brief writes the invocation of the message transfer
 *	\param pFile the file to write to
 *	\param pContext the context of the write operation
 *
 * This implementation calls the underlying message trasnfer mechanisms
 */
void CBERcvAnyFunction::WriteInvocation(CBEFile * pFile, CBEContext * pContext)
{
    pFile->PrintIndent("/* invoke */\n");
}

/**	\brief clean up the mess
 *	\param pFile the file to write to
 *	\param pContext the context of the write operation
 *
 * This implementation cleans up allocated memory inside this function
 */
void CBERcvAnyFunction::WriteCleanup(CBEFile * pFile, CBEContext * pContext)
{
}

/** \brief check if this parameter is marshalled or not
 *  \param pParameter the parameter to check
 *  \param pContext the context of this whole marshalling
 *  \return true if it is marshalled
 *
 * Always return false, because this function does not marshal any parameters.
 */
bool CBERcvAnyFunction::DoMarshalParameter(CBETypedDeclarator * pParameter, CBEContext *pContext)
{
    return false;
}

/** \brief writes the unmarshalling code of this function
 *  \param pFile the file to write to
 *  \param nStartOffset the offset into the message buffer to start at
 *  \param bUseConstOffset true if nStartOffset should be used
 *  \param pContext the context of the write operation
 */
void CBERcvAnyFunction::WriteUnmarshalling(CBEFile * pFile, int nStartOffset, bool & bUseConstOffset, CBEContext * pContext)
{
    WriteUnmarshalReturn(pFile, nStartOffset, bUseConstOffset, pContext);
}

/** \brief test if this function should be written
 *  \param pFile the file to write to
 *  \param pContext the context of the write operation
 *  \return true if successful
 *
 * A receive-any function is only written if the PROGRAM_GENERATE_MESSAGE option is set.
 * Then it is created for the client's as well as the component's side.
 */
bool CBERcvAnyFunction::DoWriteFunction(CBEFile * pFile, CBEContext * pContext)
{
	if (pFile->IsKindOf(RUNTIME_CLASS(CBEHeaderFile)))
		if (!IsTargetFile((CBEHeaderFile*)pFile))
			return false;
	if (pFile->IsKindOf(RUNTIME_CLASS(CBEImplementationFile)))
		if (!IsTargetFile((CBEImplementationFile*)pFile))
			return false;
	return pContext->IsOptionSet(PROGRAM_GENERATE_MESSAGE);
}

/** \brief writes the message buffer parameter
 *  \param pFile the fiel to write to
 *  \param pContext the context of the write operation
 *  \param bComma true if a comma has to be written before the parameter
 */
void CBERcvAnyFunction::WriteAfterParameters(CBEFile * pFile, CBEContext * pContext, bool bComma)
{
    assert(m_pMsgBuffer);
    if (bComma)
    {
        pFile->Print(",\n");
        pFile->PrintIndent("");
    }
    WriteParameter(pFile, m_pMsgBuffer, pContext);
    CBEInterfaceFunction::WriteAfterParameters(pFile, pContext, true);
}

/** \brief write the message buffer call parameter
 *  \param pFile the file to write to
 *  \param pContext the context of the write operation
 *  \param bComma true if a comma has to be written before the parameters
 */
void CBERcvAnyFunction::WriteCallAfterParameters(CBEFile * pFile, CBEContext * pContext, bool bComma)
{
    assert(m_pMsgBuffer);
    if (bComma)
    {
        pFile->Print(",\n");
        pFile->PrintIndent("");
    }
    WriteCallParameter(pFile, m_pMsgBuffer, pContext);
    CBEInterfaceFunction::WriteCallAfterParameters(pFile, pContext, true);
}

/** \brief tries to find a parameter by its type
 *  \param sTypeName the name of the type
 *  \return a reference to the parameter if found
 *
 * This implementation tests the message buffer, since it is a parameter too.
 */
CBETypedDeclarator * CBERcvAnyFunction::FindParameterType(String sTypeName)
{
    if (m_pMsgBuffer)
    {
        CBEType *pType = m_pMsgBuffer->GetType();
        if (pType->IsKindOf(RUNTIME_CLASS(CBEUserDefinedType)))
        {
            if (((CBEUserDefinedType*)pType)->GetName() == sTypeName)
                return m_pMsgBuffer;
        }
        if (pType->HasTag(sTypeName))
            return m_pMsgBuffer;
    }
    return CBEInterfaceFunction::FindParameterType(sTypeName);
}

/** \brief gets the direction this function sends data
 *  \return DIRECTION_IN if sending to server, DIRECTION_OUT if sending to client
 *
 * The direction depends on the communication side this function is on.
 */
int CBERcvAnyFunction::GetSendDirection()
{
    return IsComponentSide() ? DIRECTION_OUT : DIRECTION_IN;
}

/** \brief gets the direction this function receives data
 *  \return DIRECTION_IN if receiving from client, DIRECTION_OUT if receiving from server
 */
int CBERcvAnyFunction::GetReceiveDirection()
{
    return IsComponentSide() ? DIRECTION_IN : DIRECTION_OUT;
}
