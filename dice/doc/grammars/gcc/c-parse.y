/*WARNING: This file is automatically generated!*/
/* YACC parser for C syntax and for Objective C.  -*-c-*-
   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* This file defines the grammar of C and that of Objective C.
   ifobjc ... end ifobjc  conditionals contain code for Objective C only.
   ifc ... end ifc  conditionals contain code for C only.
   Sed commands in Makefile.in are used to convert this file into
   c-parse.y and into objc-parse.y.  */

/* To whomever it may concern: I have heard that such a thing was once
   written by AT&T, but I have never seen it.  */

%expect 51

/* These are the 23 conflicts you should get in parse.output;
   the state numbers may vary if minor changes in the grammar are made.

State 42 contains 1 shift/reduce conflict.  (Two ways to parse ATTRIBUTE.)
State 44 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 103 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 110 contains 1 shift/reduce conflict.  (Two ways to parse ATTRIBUTE.)
State 111 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 115 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 132 contains 1 shift/reduce conflict.  (See comment at component_decl.)
State 180 contains 1 shift/reduce conflict.  (Two ways to parse ATTRIBUTE.)
State 194 contains 2 shift/reduce conflict.  (Four ways to parse this.)
State 202 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 214 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 220 contains 1 shift/reduce conflict.  (Two ways to recover from error.)
State 304 contains 2 shift/reduce conflicts.  (Four ways to parse this.)
State 335 contains 2 shift/reduce conflicts.  (Four ways to parse this.)
State 347 contains 1 shift/reduce conflict.  (Two ways to parse ATTRIBUTES.)
State 352 contains 1 shift/reduce conflict.  (Two ways to parse ATTRIBUTES.)
State 383 contains 2 shift/reduce conflicts.  (Four ways to parse this.)
State 434 contains 2 shift/reduce conflicts.  (Four ways to parse this.)  */


%{
#include "config.h"
#include "system.h"
#include <setjmp.h>

#include "tree.h"
#include "input.h"
#include "c-lex.h"
#include "c-tree.h"
#include "flags.h"
#include "output.h"
#include "toplev.h"

#ifdef MULTIBYTE_CHARS
#include <locale.h>
#endif


/* Since parsers are distinct for each language, put the language string
   definition here.  */
char *language_string = "GNU C";

/* Like YYERROR but do call yyerror.  */
#define YYERROR1 { yyerror ("syntax error"); YYERROR; }

/* Cause the `yydebug' variable to be defined.  */
#define YYDEBUG 1
%}

%start program

%union {long itype; tree ttype; enum tree_code code;
	char *filename; int lineno; int ends_in_label; }

/* All identifiers that are not reserved words
   and are not declared typedefs in the current block */
%token IDENTIFIER

/* All identifiers that are declared typedefs in the current block.
   In some contexts, they are treated just like IDENTIFIER,
   but they can also serve as typespecs in declarations.  */
%token TYPENAME

/* Reserved words that specify storage class.
   yylval contains an IDENTIFIER_NODE which indicates which one.  */
%token SCSPEC

/* Reserved words that specify type.
   yylval contains an IDENTIFIER_NODE which indicates which one.  */
%token TYPESPEC

/* Reserved words that qualify type: "const", "volatile", or "restrict".
   yylval contains an IDENTIFIER_NODE which indicates which one.  */
%token TYPE_QUAL

/* Character or numeric constants.
   yylval is the node for the constant.  */
%token CONSTANT

/* String constants in raw form.
   yylval is a STRING_CST node.  */
%token STRING

/* "...", used for functions with variable arglists.  */
%token ELLIPSIS

/* the reserved words */
/* SCO include files test "ASM", so use something else. */
%token SIZEOF ENUM STRUCT UNION IF ELSE WHILE DO FOR SWITCH CASE DEFAULT
%token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF
%token ATTRIBUTE EXTENSION LABEL
%token REALPART IMAGPART

/* Add precedence rules to solve dangling else s/r conflict */
%nonassoc IF
%nonassoc ELSE

/* Define the operator tokens and their precedences.
   The value is an integer because, if used, it is the tree code
   to use in the expression made from the operator.  */

%right <code> ASSIGN '='
%right <code> '?' ':'
%left <code> OROR
%left <code> ANDAND
%left <code> '|'
%left <code> '^'
%left <code> '&'
%left <code> EQCOMPARE
%left <code> ARITHCOMPARE
%left <code> LSHIFT RSHIFT
%left <code> '+' '-'
%left <code> '*' '/' '%'
%right <code> UNARY PLUSPLUS MINUSMINUS
%left HYPERUNARY
%left <code> POINTSAT '.' '(' '['

/* The Objective-C keywords.  These are included in C and in
   Objective C, so that the token codes are the same in both.  */
%token INTERFACE IMPLEMENTATION END SELECTOR DEFS ENCODE
%token CLASSNAME PUBLIC PRIVATE PROTECTED PROTOCOL OBJECTNAME CLASS ALIAS

/* Objective-C string constants in raw form.
   yylval is an OBJC_STRING_CST node.  */
%token OBJC_STRING


%type <code> unop

%type <ttype> identifier IDENTIFIER TYPENAME CONSTANT expr nonnull_exprlist exprlist
%type <ttype> expr_no_commas cast_expr unary_expr primary string STRING
%type <ttype> typed_declspecs reserved_declspecs
%type <ttype> typed_typespecs reserved_typespecquals
%type <ttype> declmods typespec typespecqual_reserved
%type <ttype> typed_declspecs_no_prefix_attr reserved_declspecs_no_prefix_attr
%type <ttype> declmods_no_prefix_attr
%type <ttype> SCSPEC TYPESPEC TYPE_QUAL nonempty_type_quals maybe_type_qual
%type <ttype> initdecls notype_initdecls initdcl notype_initdcl
%type <ttype> init maybeasm
%type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers
%type <ttype> maybe_attribute attributes attribute attribute_list attrib
%type <ttype> any_word

%type <ttype> compstmt

%type <ttype> declarator
%type <ttype> notype_declarator after_type_declarator
%type <ttype> parm_declarator

%type <ttype> structsp component_decl_list component_decl_list2
%type <ttype> component_decl components component_declarator
%type <ttype> enumlist enumerator
%type <ttype> struct_head union_head enum_head
%type <ttype> typename absdcl absdcl1 type_quals
%type <ttype> xexpr parms parm identifiers

%type <ttype> parmlist parmlist_1 parmlist_2
%type <ttype> parmlist_or_identifiers parmlist_or_identifiers_1
%type <ttype> identifiers_or_typenames

%type <itype> setspecs

%type <ends_in_label> lineno_stmt_or_label lineno_stmt_or_labels stmt_or_label

%type <filename> save_filename
%type <lineno> save_lineno


%{
/* Number of statements (loosely speaking) and compound statements 
   seen so far.  */
static int stmt_count;
static int compstmt_count;
  
/* Input file and line number of the end of the body of last simple_if;
   used by the stmt-rule immediately after simple_if returns.  */
static char *if_stmt_file;
static int if_stmt_line;

/* List of types and structure classes of the current declaration.  */
static tree current_declspecs = NULL_TREE;
static tree prefix_attributes = NULL_TREE;

/* Stack of saved values of current_declspecs and prefix_attributes.  */
static tree declspec_stack;

/* 1 if we explained undeclared var errors.  */
static int undeclared_variable_notice;


/* Tell yyparse how to print a token's value, if yydebug is set.  */

#define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)
extern void yyprint			PROTO ((FILE *, int, YYSTYPE));
%}

%%
program: /* empty */
	| extdefs
	;

/* the reason for the strange actions in this rule
 is so that notype_initdecls when reached via datadef
 can find a valid list of type and sc specs in $0. */

extdefs:
	extdef
	| extdefs extdef
	;

extdef:
	fndef
	| datadef
	| ASM_KEYWORD '(' expr ')' ';'
	| extension extdef
	;

datadef:
	  setspecs notype_initdecls ';'
	| declmods setspecs notype_initdecls ';'
	| typed_declspecs setspecs initdecls ';'
    | declmods ';'
	| typed_declspecs ';'
	| error ';'
	| error '}'
	| ';'
	;

fndef:
	  typed_declspecs setspecs declarator old_style_parm_decls compstmt_or_error
	| typed_declspecs setspecs declarator error		
	| declmods setspecs notype_declarator old_style_parm_decls compstmt_or_error
	| declmods setspecs notype_declarator error
	| setspecs notype_declarator old_style_parm_decls compstmt_or_error
	| setspecs notype_declarator error
	;

identifier:
	IDENTIFIER
	| TYPENAME
	;

unop: '&'
	| '-'
	| '+'
	| PLUSPLUS
	| MINUSMINUS
	| '~'
	| '!'
	;

expr:	nonnull_exprlist
	;

exprlist:
	  /* empty */
	| nonnull_exprlist
	;

nonnull_exprlist:
	expr_no_commas
	| nonnull_exprlist ',' expr_no_commas
	;

unary_expr:
	primary
	| '*' cast_expr   %prec UNARY
	/* __extension__ turns off -pedantic for following primary.  */
	| extension cast_expr	  %prec UNARY
	| unop cast_expr  %prec UNARY
	/* Refer to the address of a label as a pointer.  */
	| ANDAND identifier
/* This seems to be impossible on some machines, so let's turn it off.
   You can use __builtin_next_arg to find the anonymous stack args.
	| '&' ELLIPSIS
*/
	| sizeof unary_expr  %prec UNARY
	| sizeof '(' typename ')'  %prec HYPERUNARY
	| alignof unary_expr  %prec UNARY
	| alignof '(' typename ')'  %prec HYPERUNARY
	| REALPART cast_expr %prec UNARY
	| IMAGPART cast_expr %prec UNARY
	;

sizeof:
	SIZEOF
	;

alignof:
	ALIGNOF
	;

cast_expr:
	unary_expr
	| '(' typename ')' cast_expr  %prec UNARY
	| '(' typename ')' '{' initlist_maybe_comma '}'  %prec UNARY
	;

expr_no_commas:
	  cast_expr
	| expr_no_commas '+' expr_no_commas
	| expr_no_commas '-' expr_no_commas
	| expr_no_commas '*' expr_no_commas
	| expr_no_commas '/' expr_no_commas
	| expr_no_commas '%' expr_no_commas
	| expr_no_commas LSHIFT expr_no_commas
	| expr_no_commas RSHIFT expr_no_commas
	| expr_no_commas ARITHCOMPARE expr_no_commas
	| expr_no_commas EQCOMPARE expr_no_commas
	| expr_no_commas '&' expr_no_commas
	| expr_no_commas '|' expr_no_commas
	| expr_no_commas '^' expr_no_commas
	| expr_no_commas ANDAND expr_no_commas
	| expr_no_commas OROR expr_no_commas
	| expr_no_commas '?' expr ':' expr_no_commas
	| expr_no_commas '?' ':' expr_no_commas
	| expr_no_commas '=' expr_no_commas
	| expr_no_commas ASSIGN expr_no_commas
	;

primary:
	IDENTIFIER
	| CONSTANT
	| string
	| '(' expr ')'
	| '(' error ')'
	| '(' compstmt ')'
	| primary '(' exprlist ')'   %prec '.'
	| primary '[' expr ']'   %prec '.'
	| primary '.' identifier
	| primary POINTSAT identifier
	| primary PLUSPLUS
	| primary MINUSMINUS
	;

/* Produces a STRING_CST with perhaps more STRING_CSTs chained onto it.  */
string:
	  STRING
	| string STRING
	;


old_style_parm_decls:
	/* empty */
	| datadecls
	| datadecls ELLIPSIS
	;

/* The following are analogous to lineno_decl, decls and decl
   except that they do not allow nested functions.
   They are used for old-style parm decls.  */
lineno_datadecl:
	  save_filename save_lineno datadecl
	;

datadecls:
	lineno_datadecl
	| errstmt
	| datadecls lineno_datadecl
	| lineno_datadecl errstmt
	;

/* We don't allow prefix attributes here because they cause reduce/reduce
   conflicts: we can't know whether we're parsing a function decl with
   attribute suffix, or function defn with attribute prefix on first old
   style parm.  */
datadecl:
	typed_declspecs_no_prefix_attr setspecs initdecls ';'
	| declmods_no_prefix_attr setspecs notype_initdecls ';'
	| typed_declspecs_no_prefix_attr ';'
	| declmods_no_prefix_attr ';'
	;

/* This combination which saves a lineno before a decl
   is the normal thing to use, rather than decl itself.
   This is to avoid shift/reduce conflicts in contexts
   where statement labels are allowed.  */
lineno_decl:
	  save_filename save_lineno decl
	;

decls:
	lineno_decl
	| errstmt
	| decls lineno_decl
	| lineno_decl errstmt
	;

/* records the type and storage class specs to use for processing
   the declarators that follow.
   Maintains a stack of outer-level values of current_declspecs,
   for the sake of parm declarations nested in function declarators.  */
setspecs: /* empty */
	;

/* ??? Yuck.  See after_type_declarator.  */
setattrs: /* empty */
	;

decl:
	typed_declspecs setspecs initdecls ';'
	| declmods setspecs notype_initdecls ';'
	| typed_declspecs setspecs nested_function
	| declmods setspecs notype_nested_function
	| typed_declspecs ';'
	| declmods ';'
	| extension decl
	;

/* Declspecs which contain at least one type specifier or typedef name.
   (Just `const' or `volatile' is not enough.)
   A typedef'd name following these is taken as a name to be declared.
   Declspecs have a non-NULL TREE_VALUE, attributes do not.  */

typed_declspecs:
	  typespec reserved_declspecs
	| declmods typespec reserved_declspecs
	;

reserved_declspecs:  /* empty */
	| reserved_declspecs typespecqual_reserved
	| reserved_declspecs SCSPEC
	| reserved_declspecs attributes
	;

typed_declspecs_no_prefix_attr:
	  typespec reserved_declspecs_no_prefix_attr
	| declmods_no_prefix_attr typespec reserved_declspecs_no_prefix_attr
	;

reserved_declspecs_no_prefix_attr:
	  /* empty */
	| reserved_declspecs_no_prefix_attr typespecqual_reserved
	| reserved_declspecs_no_prefix_attr SCSPEC
	;

/* List of just storage classes, type modifiers, and prefix attributes.
   A declaration can start with just this, but then it cannot be used
   to redeclare a typedef-name.
   Declspecs have a non-NULL TREE_VALUE, attributes do not.  */

declmods:
	  declmods_no_prefix_attr
	| attributes
	| declmods declmods_no_prefix_attr
	| declmods attributes
	;

declmods_no_prefix_attr:
	  TYPE_QUAL
	| SCSPEC
	| declmods_no_prefix_attr TYPE_QUAL
	| declmods_no_prefix_attr SCSPEC
	;


/* Used instead of declspecs where storage classes are not allowed
   (that is, for typenames and structure components).
   Don't accept a typedef-name if anything but a modifier precedes it.  */

typed_typespecs:
	  typespec reserved_typespecquals
	| nonempty_type_quals typespec reserved_typespecquals
	;

reserved_typespecquals:  /* empty */
	| reserved_typespecquals typespecqual_reserved
	;

/* A typespec (but not a type qualifier).
   Once we have seen one of these in a declaration,
   if a typedef name appears then it is being redeclared.  */

typespec: TYPESPEC
	| structsp
	| TYPENAME
	| TYPEOF '(' expr ')'
	| TYPEOF '(' typename ')'
	;

/* A typespec that is a reserved word, or a type qualifier.  */

typespecqual_reserved: TYPESPEC
	| TYPE_QUAL
	| structsp
	;

initdecls:
	initdcl
	| initdecls ',' initdcl
	;

notype_initdecls:
	notype_initdcl
	| notype_initdecls ',' initdcl
	;

maybeasm:
	  /* empty */
	| ASM_KEYWORD '(' string ')'
	;

initdcl:
	  declarator maybeasm maybe_attribute '=' init
	| declarator maybeasm maybe_attribute
	;

notype_initdcl:
	  notype_declarator maybeasm maybe_attribute '=' init
	| notype_declarator maybeasm maybe_attribute
	;

/* the * rules are dummies to accept the Apollo extended syntax
   so that the header files compile. */
maybe_attribute:
      /* empty */
	| attributes
	;
 
attributes:
      attribute
	| attributes attribute
	;

attribute:
      ATTRIBUTE '(' '(' attribute_list ')' ')'
	;

attribute_list:
      attrib
	| attribute_list ',' attrib
	;
 
attrib:
    /* empty */
	| any_word
	| any_word '(' IDENTIFIER ')'
	| any_word '(' IDENTIFIER ',' nonnull_exprlist ')'
	| any_word '(' exprlist ')'
	;

/* This still leaves out most reserved keywords,
   shouldn't we include them?  */

any_word:
	  identifier
	| SCSPEC
	| TYPESPEC
	| TYPE_QUAL
	;

/* Initializers.  `init' is the entry point.  */

init:
	expr_no_commas
	| '{' initlist_maybe_comma '}'
	| error
	;

/* `initlist_maybe_comma' is the guts of an initializer in braces.  */
initlist_maybe_comma:
	  /* empty */
	| initlist1 maybecomma
	;

initlist1:
	  initelt
	| initlist1 ',' initelt
	;

/* `initelt' is a single element of an initializer.
   It may use braces.  */
initelt:
	  designator_list '=' initval
	| designator initval
	| identifier ':' initval
	| initval
	;

initval:
	  '{' initlist_maybe_comma '}'
	| expr_no_commas
	| error
	;

designator_list:
	  designator
	| designator_list designator
	;

designator:
	  '.' identifier
	/* These are for labeled elements.  The syntax for an array element
	   initializer conflicts with the syntax for an Objective-C message,
	   so don't include these productions in the Objective-C grammar.  */
	| '[' expr_no_commas ELLIPSIS expr_no_commas ']'
	| '[' expr_no_commas ']'
	;

nested_function:
	  declarator old_style_parm_decls
/* This used to use compstmt_or_error.
   That caused a bug with input `f(g) int g {}',
   where the use of YYERROR1 above caused an error
   which then was handled by compstmt_or_error.
   There followed a repeated execution of that same rule,
   which called YYERROR1 again, and so on.  */
	  compstmt
	;

notype_nested_function:
	  notype_declarator
	  old_style_parm_decls
/* This used to use compstmt_or_error.
   That caused a bug with input `f(g) int g {}',
   where the use of YYERROR1 above caused an error
   which then was handled by compstmt_or_error.
   There followed a repeated execution of that same rule,
   which called YYERROR1 again, and so on.  */
	  compstmt
	;

/* Any kind of declarator (thus, all declarators allowed
   after an explicit typespec).  */

declarator:
	  after_type_declarator
	| notype_declarator
	;

/* A declarator that is allowed only after an explicit typespec.  */

after_type_declarator:
	  '(' after_type_declarator ')'
	| after_type_declarator '(' parmlist_or_identifiers  %prec '.'
/*	| after_type_declarator '(' error ')'  %prec '.'
 */
	| after_type_declarator '[' expr ']'  %prec '.'
	| after_type_declarator '[' ']'  %prec '.'
	| '*' type_quals after_type_declarator  %prec UNARY
	/* ??? Yuck.  setattrs is a quick hack.  We can't use
	   prefix_attributes because $1 only applies to this
	   declarator.  We assume setspecs has already been done.
	   setattrs also avoids 5 reduce/reduce conflicts (otherwise multiple
	   attributes could be recognized here or in `attributes').  */
	| attributes setattrs after_type_declarator
	| TYPENAME
	;

/* Kinds of declarator that can appear in a parameter list
   in addition to notype_declarator.  This is like after_type_declarator
   but does not allow a typedef name in parentheses as an identifier
   (because it would conflict with a function with that typedef as arg).  */

parm_declarator:
	  parm_declarator '(' parmlist_or_identifiers  %prec '.'
/*	| parm_declarator '(' error ')'  %prec '.'
 */
	| parm_declarator '[' '*' ']'  %prec '.'
	| parm_declarator '[' expr ']'  %prec '.'
	| parm_declarator '[' ']'  %prec '.'
	| '*' type_quals parm_declarator  %prec UNARY
	/* ??? Yuck.  setattrs is a quick hack.  We can't use
	   prefix_attributes because $1 only applies to this
	   declarator.  We assume setspecs has already been done.
	   setattrs also avoids 5 reduce/reduce conflicts (otherwise multiple
	   attributes could be recognized here or in `attributes').  */
	| attributes setattrs parm_declarator
	| TYPENAME
	;

/* A declarator allowed whether or not there has been
   an explicit typespec.  These cannot redeclare a typedef-name.  */

notype_declarator:
	  notype_declarator '(' parmlist_or_identifiers  %prec '.'
/*	| notype_declarator '(' error ')'  %prec '.'
 */
	| '(' notype_declarator ')'
	| '*' type_quals notype_declarator  %prec UNARY
	| notype_declarator '[' '*' ']'  %prec '.'
	| notype_declarator '[' expr ']'  %prec '.'
	| notype_declarator '[' ']'  %prec '.'
	/* ??? Yuck.  setattrs is a quick hack.  We can't use
	   prefix_attributes because $1 only applies to this
	   declarator.  We assume setspecs has already been done.
	   setattrs also avoids 5 reduce/reduce conflicts (otherwise multiple
	   attributes could be recognized here or in `attributes').  */
	| attributes setattrs notype_declarator
	| IDENTIFIER
	;

struct_head:
	  STRUCT
	| STRUCT attributes
	;

union_head:
	  UNION
	| UNION attributes
	;

enum_head:
	  ENUM
	| ENUM attributes
	;

structsp:
	  struct_head identifier '{'
	  component_decl_list '}' maybe_attribute 
	| struct_head '{' component_decl_list '}' maybe_attribute
	| struct_head identifier
	| union_head identifier '{' component_decl_list '}' maybe_attribute
	| union_head '{' component_decl_list '}' maybe_attribute
	| union_head identifier
	| enum_head identifier '{' enumlist maybecomma_warn '}' maybe_attribute
	| enum_head '{' enumlist maybecomma_warn '}' maybe_attribute
	| enum_head identifier
	;

maybecomma:
	  /* empty */
	| ','
	;

maybecomma_warn:
	  /* empty */
	| ','
	;

component_decl_list:
	  component_decl_list2
	| component_decl_list2 component_decl
	;

component_decl_list2:	/* empty */
	| component_decl_list2 component_decl ';'
	| component_decl_list2 ';'
	;

/* There is a shift-reduce conflict here, because `components' may
   start with a `typename'.  It happens that shifting (the default resolution)
   does the right thing, because it treats the `typename' as part of
   a `typed_typespecs'.

   It is possible that this same technique would allow the distinction
   between `notype_initdecls' and `initdecls' to be eliminated.
   But I am being cautious and not trying it.  */

component_decl:
	  typed_typespecs setspecs components
	| typed_typespecs
	| nonempty_type_quals setspecs components
	| nonempty_type_quals
	| error
	| extension component_decl
	;

components:
	  component_declarator
	| components ',' component_declarator
	;

component_declarator:
	  save_filename save_lineno declarator maybe_attribute
	| save_filename save_lineno declarator ':' expr_no_commas maybe_attribute
	| save_filename save_lineno ':' expr_no_commas maybe_attribute
	;

/* We chain the enumerators in reverse order.
   They are put in forward order where enumlist is used.
   (The order used to be significant, but no longer is so.
   However, we still maintain the order, just to be clean.)  */

enumlist:
	  enumerator
	| enumlist ',' enumerator
	| error
	;


enumerator:
	  identifier
	| identifier '=' expr_no_commas
	;

typename:
	typed_typespecs absdcl
	| nonempty_type_quals absdcl
	;

absdcl:   /* an absolute declarator */
	/* empty */
	| absdcl1
	;

nonempty_type_quals:
	  TYPE_QUAL
	| nonempty_type_quals TYPE_QUAL
	;

type_quals:
	  /* empty */
	| type_quals TYPE_QUAL
	;

absdcl1:  /* a nonempty absolute declarator */
	  '(' absdcl1 ')'
	  /* `(typedef)1' is `int'.  */
	| '*' type_quals absdcl1  %prec UNARY
	| '*' type_quals  %prec UNARY
	| absdcl1 '(' parmlist  %prec '.'
	| absdcl1 '[' expr ']'  %prec '.'
	| absdcl1 '[' ']'  %prec '.'
	| '(' parmlist  %prec '.'
	| '[' expr ']'  %prec '.'
	| '[' ']'  %prec '.'
	/* ??? It appears we have to support attributes here, however
	   using prefix_attributes is wrong.  */
	| attributes setattrs absdcl1
	;

/* at least one statement, the first of which parses without error.  */
/* stmts is used only after decls, so an invalid first statement
   is actually regarded as an invalid decl and part of the decls.  */

stmts:
	lineno_stmt_or_labels
	;

lineno_stmt_or_labels:
	  lineno_stmt_or_label
	| lineno_stmt_or_labels lineno_stmt_or_label
	| lineno_stmt_or_labels errstmt
	;

xstmts:
	/* empty */
	| stmts
	;

errstmt:  error ';'
	;

pushlevel:  /* empty */
	;

/* Read zero or more forward-declarations for labels
   that nested functions can jump to.  */
maybe_label_decls:
	  /* empty */
	| label_decls
	;

label_decls:
	  label_decl
	| label_decls label_decl
	;

label_decl:
	  LABEL identifiers_or_typenames ';'
	;

/* This is the body of a function definition.
   It causes syntax errors to ignore to the next openbrace.  */
compstmt_or_error:
	  compstmt
	| error compstmt
	;

compstmt_start: '{' 

compstmt: compstmt_start '}'
	| compstmt_start pushlevel maybe_label_decls decls xstmts '}'
	| compstmt_start pushlevel maybe_label_decls error '}'
	| compstmt_start pushlevel maybe_label_decls stmts '}'
	;

/* Value is number of statements counted as of the closeparen.  */
simple_if:
	  if_prefix lineno_labeled_stmt
/* Make sure c_expand_end_cond is run once
   for each call to c_expand_start_cond.
   Otherwise a crash is likely.  */
	| if_prefix error
	;

if_prefix:
	  IF '(' expr ')'
	;

/* This is a subroutine of stmt.
   It is used twice, once for valid DO statements
   and once for catching errors in parsing the end test.  */
do_stmt_start:
	  DO
	  lineno_labeled_stmt WHILE
	;

save_filename:
	;

save_lineno:
	;

lineno_labeled_stmt:
	  save_filename save_lineno stmt
/*	| save_filename save_lineno error
*/
	| save_filename save_lineno label lineno_labeled_stmt
	;

lineno_stmt_or_label:
	  save_filename save_lineno stmt_or_label
	;

stmt_or_label:
	  stmt
	| label
	;

/* Parse a single real statement, not including any labels.  */
stmt:
	  compstmt
    | all_iter_stmt 
	| expr ';'
	| simple_if ELSE lineno_labeled_stmt
	| simple_if %prec IF
/* Make sure c_expand_end_cond is run once
   for each call to c_expand_start_cond.
   Otherwise a crash is likely.  */
	| simple_if ELSE error
	| WHILE '(' expr ')' lineno_labeled_stmt
	| do_stmt_start '(' expr ')' ';'
/* This rule is needed to make sure we end every loop we start.  */
	| do_stmt_start error
	| FOR '(' xexpr ';' xexpr ';'
		/* Can't emit now; wait till after expand_start_loop...  */
	  xexpr ')' lineno_labeled_stmt
	| SWITCH '(' expr ')' lineno_labeled_stmt
	| BREAK ';'
	| CONTINUE ';'
	| RETURN ';'
	| RETURN expr ';'
	| ASM_KEYWORD maybe_type_qual '(' expr ')' ';'
	/* This is the case with just output operands.  */
	| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ')' ';'
	/* This is the case with input operands as well.  */
	| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':' asm_operands ')' ';'
	/* This is the case with clobbered registers as well.  */
	| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':' asm_operands ':' asm_clobbers ')' ';'
	| GOTO identifier ';'
	| GOTO '*' expr ';'
	| ';'
	;

all_iter_stmt:
	  all_iter_stmt_simple
/*	| all_iter_stmt_with_decl */
	;

all_iter_stmt_simple:
	  FOR '(' primary ')' lineno_labeled_stmt
/*  This really should allow any kind of declaration,
    for generality.  Fix it before turning it back on.
all_iter_stmt_with_decl:
	  FOR '(' ITERATOR pushlevel setspecs iterator_spec ')' lineno_labeled_stmt
*/

/* Any kind of label, including jump labels and case labels.
   ANSI C accepts labels only before statements, but we allow them
   also at the end of a compound statement.  */
label:	  CASE expr_no_commas ':'
	| CASE expr_no_commas ELLIPSIS expr_no_commas ':'
	| DEFAULT ':'
	| identifier ':' maybe_attribute
	;

/* Either a type-qualifier or nothing.  First thing in an `asm' statement.  */

maybe_type_qual:
	/* empty */
	| TYPE_QUAL
	;

xexpr:
	/* empty */
	| expr
	;

/* These are the operands other than the first string and colon
   in  asm ("addextend %2,%1": "=dm" (x), "0" (y), "g" (*x))  */
asm_operands: /* empty */
	| nonnull_asm_operands
	;

nonnull_asm_operands:
	  asm_operand
	| nonnull_asm_operands ',' asm_operand
	;

asm_operand:
	  STRING '(' expr ')'
	;

asm_clobbers:
	  string
	| asm_clobbers ',' string
	;

/* This is what appears inside the parens in a function declarator.
   Its value is a list of ..._TYPE nodes.  */
parmlist:
	  parmlist_1
	;

parmlist_1:
	  parmlist_2 ')'
	| parms ';' parmlist_1
	| error ')'
	;

/* This is what appears inside the parens in a function declarator.
   Is value is represented in the format that grokdeclarator expects.  */
parmlist_2:  /* empty */
	| ELLIPSIS
	| parms
	| parms ',' ELLIPSIS
	;

parms:
	parm
	| parms ',' parm
	;

/* A single parameter declaration or parameter type name,
   as found in a parmlist.  */
parm:
	  typed_declspecs setspecs parm_declarator maybe_attribute
	| typed_declspecs setspecs notype_declarator maybe_attribute
	| typed_declspecs setspecs absdcl maybe_attribute
	| declmods setspecs notype_declarator maybe_attribute
	| declmods setspecs absdcl maybe_attribute
	;

/* This is used in a function definition
   where either a parmlist or an identifier list is ok.
   Its value is a list of ..._TYPE nodes or a list of identifiers.  */
parmlist_or_identifiers:
	  parmlist_or_identifiers_1
	;

parmlist_or_identifiers_1:
	  parmlist_1
	| identifiers ')'
	;

/* A nonempty list of identifiers.  */
identifiers:
	IDENTIFIER
	| identifiers ',' IDENTIFIER
	;

/* A nonempty list of identifiers, including typenames.  */
identifiers_or_typenames:
	identifier
	| identifiers_or_typenames ',' identifier
	;

extension:
	EXTENSION
	;

%%
