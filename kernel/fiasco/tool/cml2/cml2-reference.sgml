<!DOCTYPE ARTICLE PUBLIC "-//OASIS//DTD DocBook V4.1//EN"[
<!ENTITY CML1 "<productname>CML1</productname>">
<!ENTITY CML2 "<productname>CML2</productname>">
]>

<!--   Version: $Id$ -->

<article class="whitepaper" status="DRAFT" lang="EN" ID="cml2"
         xreflabel="cml2" 
         revision="$Id$"
         vendor="Thyrsus Enterprises">
<articleinfo>
  <title>CML2 Language Reference</title>
  <author>
    <firstname>Eric</firstname>
    <othername>Steven</othername>
    <surname>Raymond</surname>
    <affiliation>
      <orgname><ulink url="http://www.tuxedo.org/~esr">
      Thyrsus Enterprises</ulink></orgname> 
      <address>
      <email>esr@thyrsus.com</email>
      </address>
    </affiliation>
  </author>
  <pubdate role="cvs">$Date$</pubdate>
  <releaseinfo>This is version 1.6.1</releaseinfo>
  <copyright>
    <year>2000</year>
    <holder role="mailto:esr@thyrsus.com">Eric S. Raymond</holder> 
  </copyright>
  <legalnotice>
    <title>Copyright</title>
    <para>Permission is granted to copy, distribute and/or modify
    this document under the terms of the Open Publication License,
    version 2.0.</para>
  </legalnotice>

<abstract><para>
This is a reference manual for CML2, the Configuration Menu Language
designed to support Linux kernel configuration.  For higher-level
discussion of the language and the concepts behind it, see the
paper <citetitle>The CML2 Language</citetitle>, available at the <ulink 
url="http://www.tuxedo.org/~esr/cml2/">CML2 project website</ulink>.
Configuration hackers should read that paper first to get a feel
for the language.
</para></abstract>
</articleinfo>

<sect1><title>Roadmap to This Document</title>
<para>First, there's a section on invoking the &CML2; tools. Then
there's a complete language reference.  Then there's a description of
the configuration file output formats.  Finally, a document change
history.</para>

<para>For tips on good menu design, see <citetitle>The CML2
Language</citetitle>.</para>
</sect1>

<sect1><title>Running the &CML2; tools</title>

<para>The &CML2; toolkit consists of two Python programs:
<command>cmlcompile</command> and <command>cmlconfigure</command>.
The compiler, <command>cmlcompile</command>, generates a pickled
representation of a rulebase from one or more files of &CML2; rules.
The interpreter, <command>cmlconfigure</command>, reads in a rulebase
and uses it to inform a configuration dialogue with the user.</para>

<para>The cmlconfigure program queries its environment to discover
what I/O facilities are available.  It will use X if it's on an
X display and Tkinter can be found.  Otherwise, it will look for the
curses library and support a full-screen character interface.  If it
can't find curses and a <envar>TERM</envar> in the environment, it 
will fall back to a line-oriented mode.</para>

<para>The end result is a configuration file, consisting of comments
and name-value pairs (see <xref linkend="file-format"> for complete
specification). The <filename>defconfig</filename> consists of a set
of variable definitions in shell syntax; it can be re-read by a future
instance of cmlconfigure to set defaults.  The macrofile is a list of
C-style <function>#define</function> macros intended to be included in
kernel C code.</para>

<para>The compiler, <command>cmlcompiler</command>, requires one or
more &CML2; rules files as arguments.  It has two options:</para>

<variablelist>
  <varlistentry>
  <term><option>-o</option> <varname>filename</varname></term>
  <listitem>
    <para> Set the file to which the compiled rulebase is
    written.  By default, if no -o option is given, the rulebase goes
    to <filename>rules.out</filename>.</para> </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-v</option></term>
  <listitem>
          <para> Enable debugging output to
  <filename>stdout</filename>.</para> </listitem>
  </varlistentry>
</variablelist>

<para>The interpreter, <command>cmlconfigure</command>, takes at most
one filename argument: the rulebase to be interpreted.  If no
argument is specified, it reads from <filename>rules.out</filename>.
The interpreter recognizes the following options:</para>

<variablelist>
  <varlistentry>
  <term><option>-b</option></term>
  <listitem><para>
    Batch mode.  Read in a compiled rulebase, apply any other command-line
    options, and immediately write out the rulebase.  Most useful with -D
    to change a single option or a small handful of options from the 
    command line.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-B</option></term>
  <listitem><para>
    Supply a banner string.  Front ends may use this to modify the screen
    display.  Can be used, for example, to pass in a version number of the
    system you are configuring.
  </para></listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-i</option> <varname>configfile</varname></term>
  <listitem><para>
   Read in a configuration.  The file is expected to be in the same
   defconfig format written by <command>cmlconfigure</command>.
   Values (including <constant>n</constant>) are set as though selected
   interactively by the user.</para>

   <para>If the file does not exist, complain but continue. This behavior
   allows the configurator to look for defaults files which may not exist.
   </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-I</option> <varname>configfile</varname></term>
  <listitem><para>
   Read in a configuration.  The file is expected to be in the same
   defconfig format written by cmlconfigure. Values (including
   <constant>n</constant>) are frozen and will be displayed but not
   modifiable during the configure run.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-l</option></term>
  <listitem><para>
   List.  Run in batch mode to generate a menu map (that is, a 
   tree diagram of all the menus and question symbols in the system.)</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-o</option> <varname>outfile</varname></term>
  <listitem><para>
   Set the location to which cmlconfigure should write its defconfig
   file of shell variable settings.  This file will be loadable by
   cmlconfigure.  If there is no <option>-o</option> option, output
   is written to <filename>config.out</filename>.</para> 
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-t</option></term>
  <listitem><para>
   Force tty (line-oriented) mode.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-s</option></term>
  <listitem><para>
   Force debugger mode.  This is a variant of tty (line-oriented) mode
   designed for debugging rulesets.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-c</option></term>
  <listitem><para>
   Force curses (screen-oriented) mode.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-x</option></term>
  <listitem><para>
   Force X (GUI using Tk) mode.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-q</option></term>
  <listitem><para>
   Force alternate X GUI mode based on a tree widget.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-s</option></term>
  <listitem><para>
   Select the debugger mode.  This is similar to the ordinary line-oriented
   mode, and shares many commands with it (type ? for complete list).
   Unlike <option>-t</option> mode, debugger mode never sets a symbol
   without an explicit command to do so, doesn't automatically traverse
   to the next symbol, and doesn't generate elaborate prompts.  Instead
   it provides a richer set of commands for examining the theorem-prover's
   state.  Use it to interpret scripts for reproducing bugs. </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-v</option></term>
  <listitem><para>
   Increment the debug flag. (Note: This was -d in earlier versions)</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-d</option></term>
  <listitem><para>
    Preset a symbol.  <option>-DFOO</option> sets
    <symbol>FOO</symbol>=<constant>y</constant> at startup.
    <symbol>-dFOO</symbol>=<varname>xxx</varname> may be used to
    specify a value. The trit values y, m, n are understood.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-D</option></term>
  <listitem><para>
    Preset a symbol and freeze it.
  </para></listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-S</option></term>
  <listitem><para>
   Don't hide elided symbols.  When this option is on, suppressions
   are ignored.  Only symbols that have derived a frozen value from
   -D or constraints are skipped.  This may be useful if you know
   that you want to set configuration symbols deep in the hierarchy
   and have their requirements propagate upwards, as opposed to the
   normal sequence in which you refine your way down from the top of
   the tree with symbols becoming visible only when they are unmasked
   by previous questions.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><option>-V</option></term>
  <listitem><para>
    Print the configurator version and exit.
  </para></listitem>
  </varlistentry>
</variablelist>

<para>The environment variable CML2OPTIONS may specify command-line switches
(but not arguments).  Switches taken from CML2OPTIONS are processed
before switches specified on the actual command line.</para>

<para>The environment variable BROWSER may specify a colon-separated list
of browser commands, to be used in making URLs in the help widgets
live.  Each command should have the string "%s" in it where the URL
can be substituted.  The &CML2; front end will try the commands in
succession until one succeeds.  The default sequence is mozilla, then
any netscape already running, then a new netscape instance, then
lynx, then w3m.</para>

<para>The configurator returns the following status codes to the 
invoking program:</para>

<variablelist> 
<varlistentry><term>0</term>
<listitem><para>Normal save and exit.</para></listitem>
</varlistentry>
<varlistentry><term>1</term>
<listitem><para>Quit (exit without save).</para></listitem>
</varlistentry>
<varlistentry><term>2</term>
<listitem><para>Configurator aborted by interrupt.</para></listitem>
</varlistentry>
<varlistentry><term>3</term>
<listitem><para>Configurator aborted due to unsatisfiable rulebase.</para></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1><title>&CML2; Language Elements</title>

<sect2><title>Syntax</title>

<para>Lexically, a CML program consists of tokens: barewords,
whitespace, strings and punctuation (there is one exception associated
with the <function>icon</function> declaration).  A bareword is a token
composed of alphanumeric characters and <keysym>_</keysym>
(underscore).  Whitespace is any mix of spaces, tabs, and linefeeds.  A
string is delimited by either single or double quotes and may contain
whitespace.  Everything else is punctuation.  Some pairs of
punctuation characters stick together; <token>==</token>,
<token>!=</token>, <token>&lt;=</token>, <token>&gt;=</token>.  All
other punctuation is treated as single-character tokens.</para>

<para>Here are lexical rules, regular expressions describing valid tokens:</para>

<programlisting> <![CDATA[
<symbol>      ::= [A-Za-z][A-Za-z0-9_]*
<string>      ::= '[^']*'|"[^"]*";
<decimal>     ::= [0-9]+
<hexadecimal> ::= 0x[A-Fa-f0-9]+
<tritval>     ::= [ymn]
]]> </programlisting>

<para><token>textdata</token>is any number of lines of text data,
terminated by a line containing a single period and newline.  All
lines beginning with periods must be byte-stuffed (that is, have an
extra period prepended).</para>

<para><token>base64-data</token> is any number of lines in RFC2045 base64
format, terminated by a newline or comment.</para>

<para>Also, note that there is a lexical-level inclusion facility.
The token <quote>source</quote> is interpreted as a request to treat
the immediately following token as a filename (string quotes are first
stripped if it is a string).  Upon encountering this directive, the
compiler opens the file (which may be a relative or absolute
pathname), and reads input from that file until <token>EOF</token>. On
that <token>EOF</token>, the current input source is immediately
popped back to the including file.  Relative pathnames are interpreted
relative to the directory of the including file.</para>

<para>Comments are supported, and run from a # to end-of-line.</para>

<para>Here is a BNF of the grammar.  Following it, each language element
will be described in detail.</para>

<programlisting> <![CDATA[
;; A helpful thing to define up front...
;;
<int>     ::= <decimal> | <hexadecimal> ;; Integer literal

;; A CML system consists of a sequence of declarations.
;;
<system> ::= <declaration>*

;; A declaration may be of one of the following types:
;;
<declaration> ::= <symbols-declaration>
	      |   <property-name-declaration>
	      |   <property-declaration>
	      |   <visibility-rule>
	      |   <saveability-rule>
	      |   <menu-definition>
	      |   <choices-definition>
              |   <choicegroup-declaration>
	      |   <derive-definition>
	      |   <default-definition>
	      |   <requirement-definition>

	      |   <start-definition>
	      |   <prefix-definition>
	      |   <banner-definition>

	      |   <condition-declaration>
	      |   <warndepend-declaration>
	      |   <icon-definition>
	      |   <debug-definition>

;; A symbols definition creates configuration symbols, 
;; and associates prompt strings with them.
;;
<symbols-declaration> ::= 'menus' {<symbol> <string> 
                                    {'text' <textdata>|'like' <symbol>}?}*

;; A property declaration declares that the associated symbols should
;; have the specified property (a label in the output configuation).
;;
<property-declaration> ::= 'give' <symbol>* 'property' <symbol>

;; A propertty name declaration sets up aliases for a property
<property-name-declaration> ::= <symbol>* 'alias' <symbol>

;; A visibility rule associates a visibility predicate with symbols.
;; Optionally, it may declare that the suppressed symbols are constrained
;; in value by the predicate symbols.
;;
<visibility-rule> ::=  {'unless'|'when'} <logical> 'suppress' ['dependent'] <symbol>*;

;; A saveability rule associates a saveability predicate with symbols.
;; Optionally, it may declare that the suppressed symbols are constrained
;; in value by the predicate symbols.
;;
<saveability-rule> ::=  {'unless'|'when'} <logical> 'expose' <symbol>*;

;; A menu definition links a sequence or subtree of symbols with a 
;; menu identifier.  Subtrees generate implied dependency statements.
;;
<menu-definition> ::= 'menu' <symbol-tree>+

;; A symbol-tree is an optional label prefix followed by either a 
;; {}-enclosed list of symbol-trees or a single symbol-declaration.
<symbol-tree> ::= <label-prefix> '{' <symbol-tree>+ '}'
               |  <label-prefix> <symbol-declaration>

;; A symbol-declaration consists of a symbol name, followed by an 
;; optional type suffix.
<symbol-declaration> ::= <symbol> [<suffix>] 

;; A label prefix is any number of label bindings:
<label-prefix> ::= 
                | <symbol> ':' <label-prefix>
                | '~' <symbol> ':' <label-prefix>

;; Suffixes declare types
<suffix> ::= '?'      ;; declares trit type
           | '%'      ;; declares decimal type
           | '@'      ;; declares hexadecimal type
           | '$'      ;; declares string type


<symbol-or-subtree> ::= <symbol> <suffix>
                    |   <symbol> <suffix> 




;; A choices-menu definition links a choice of symbols with a menu identifier.
;;
<choices-definition> ::= 'choices' <symbol> <symbol>* ['default' <symbol>]

;; A choicegroup declaration constrains a group of symbols so that at most
;; one can have the y or m value.
;;
<choicegroup-declaration> ""= 'choicegroup' <symbol> <symbol>*

;; A derivation binds a symbol to a formula, so the value of that
;; symbol is always the current value of the formula.
;;
<derive-definition> ::= 'derive' <symbol> 'from' <expr>

;; A default definition sets the value a symbol will have unless it is
;; explicitly set by the user's answer to a question. It may have a 
;; range or enum specification attached.
;;
<default-definition> ::= 'default' <symbol> 'from' <expr> [<default-restrict>]

<default-restrict> ::= 'range' {<int> | {<int> '-' <int>}}+
                     | 'enum' {<symbol> '=' <int>}+

;; A requirement definition constrains the value of one or more symbols 
;; by requiring that the given expression be true in any valid configuration.
;;
<requirement-definition> ::=  {'require'|'prohibit'} <logical> 
                              ['explanation <symbol>']

;; We have to declare a start menu, for the beginning of execution
;;
<start-definition> ::= 'start' <symbol>

;; A prefix definition sets a string to be prepended to all symbols
;; when they are named in a configuration file.
;;
<prefix-definition> ::= 'prefix' <string>

;; A banner definition sets a string to used in the configurator
;; greeting line.
;;
<banner-definition> ::= 'banner' <symbol>

;; A condition statement sets a CML2 control flag or ties it to a symbol.
;;
<condition-declaration> ::= 'condition' <symbol> 'on' {<symbol>|<constant>}

;; A warndepend flags symbols that make dependents dangerous
;;
<warndepend-declaration> ::= 'warndepend' <symbol>*

;; An icon definition associates data for a graphic icon with the
;; rulebase.
;;
<icon-definition> := 'icon' <base64-data>

;; A debug definition enables debugging output.
;;
<debug-definition> ::= 'debug' <decimal>

;; An expression is a formula
;;
<expr> ::= <expr> '+' <expr>
        | <expr> '-' <expr>
        | <expr> '*' <expr>
        | <ternary>

<ternary> ::= <expr> '?' <expr> ':' <expr>
	   | <logical>

<logical> ::= <logical> 'or' <logical>
           | <logical> 'and' <logical>
           | <logical> 'implies' <logical>
           | <relational>

<relational> ::= <term> '==' <term>
              | <term> '!=' <term>
              | <term> '<=' <term>
              | <term> '>=' <term>
              | <term> '>' <term>
              | <term> '<' <term>
              | <term>
              | 'not' <relational>

<term> ::= <term> '|' <term>    ;; maximum or sum or union value 
        | <term> '&' <term>     ;; minimum or multiple or intersection value
        | <term> '$' <term>     ;; similarity value
        | <atom>

<constant> ::= <tritval>
            | <string>
            | <decimal>
            | <hexadecimal>

<atom> ::= <symbol>
        | <constant>
        | '(' <expr> ')'
]]> </programlisting>

<para>Operators have the precedence implied by the above productions.  From
least to most binding, precedence classes are:</para>

<programlisting> <![CDATA[
      1: ?:
      2: + -
      3: *
      4: implies
      5: or
      6: and
      7: not
      8: ==, !=, >=, <=, >, <
      9: &, |, $
]]> </programlisting>

</sect2>
<sect2><title>Data types and classes</title>

<para>&CML2; supports the following data types:</para>

<itemizedlist>
<listitem><para>
  Booleans.  These may have the values `y' or `n'
</para></listitem>

<listitem><para>
  Tristates or trits.  These may have the values `y', 'm', or `n'
</para></listitem>

<listitem><para>
  Decimal integers.  32-bit signed integers with decimal I/O formatting.
</para></listitem>

<listitem><para>
  Hexadecimal integers. 32-bit signed integers with hexadecimal I/O formatting.
</para></listitem>

<listitem><para>
  Strings.  Strings are literal data in the ASCII character set encoding.
</para></listitem>
</itemizedlist>

<para>Support for trits may be disabled at runtime.  See <xref
linkend="condition-on"> for discussion of the condition/on
declaration.</para>

<para>There are four classes of symbols; constant symbols, query symbols,
derivation symbols, and frozen symbols.</para>

<para>A constant is one of the boolean/tristate literals
<constant>y</constant> or <constant>m</constant> or
<constant>n</constant>, or an integer literal, or a string
literal.</para>

<para>A query symbol is an ordinary, mutable symbol with a prompt string.
Each query must occur exactly once in the menu tree.  Query symbols
may be set by the user.</para>

<para>A derivation is a symbol bound to an expression.  Derivation
symbols cannot be set by the user, but may vary in value as the
symbols in their formula change value (it may help to think of them as
symbolic macros).  Derived symbols have no associated prompt string
and may not appear in the menu tree.</para>

<para>A frozen symbol is a query symbol which has been immutably bound
to a particular value.  Once frozen, the value of a symbol may not be
changed (neither by user action nor by side effect).</para>

</sect2>
<sect2><title>Meaning of the language elements</title>
      <para></para>

<sect3><title>Source statements</title>

<para>A <symbol>source</symbol> statement declares a file to be
inserted in place of the source statement in the file, and treated as
if the entire contents of that file were present in the current file
at the point of their source statement.</para>

<para>Any implementation of &CML2; must allow
<symbol>source</symbol> statements to be nested to a depth of at
least 15 levels.  The reference implementation has no hard
limit.</para>

</sect3>
<sect3><title>Symbol declarations</title>

<para>The body of a <symbol>symbols</symbol> section consists of pairs
of tokens; a symbol (which may be an ordinary configuration symbol, a
menu name, a message string, or an explanation string) and a
prompt string.  Each pair may optionally be followed by a text section
declaring associated help text, or by the keyword
<symbol>like</symbol> and a symbol specifying an existing symbol with
help text.</para>

<para>Rationale: Having these name-to-prompt associations be separate from
the dependency rules will help make the text parts of the system
easier to localize for different languages.  Declaring all query symbols
up front means we can do better and faster sanity checks.  Some
symbols (derivations) are not pre-declared.</para>

</sect3>
<sect3><title>Property declarations</title>

<para> A property name declaration declares aliases for a given property.
Usually these aliases are short (often one letter) and are intended to be
embedded in menus.</para>

<para>Associating a property with a symbol means that property will be included
in a comment following the symbol value dump on its line.</para>

<para>Rationale: Annotation label may be used as instructions to
configuration-file postprocessors. The sets of symbols defined by
properties may be used by configurators that have knowledge specific
to a particular rulebase.</para>

</sect3>
<sect3><title>Visibility rules</title>

<para>A visibility declaration associates a visibility predicate with a set of
configuration symbols.  The fact that several symbols may occur on the
right side of such a rule is just a notational convenience; the rule</para>

<programlisting>
      unless GUARD suppress SYMBOL1 SYMBOL2 SYMBOL3
</programlisting>

<para>is exactly equivalent to</para>

<programlisting>
      unless GUARD suppress SYMBOL1
      unless GUARD suppress SYMBOL2
      unless GUARD suppress SYMBOL3
</programlisting>

<para>Putting a menu on the right side of a visibility rule suppresses that
menu and all its children.  In general, suppressing a symbol also implicitly 
suppresses all its dependents.</para>

<para>If multiple visibility declarations touch a symbol on the
right-hand side, the resulting test is the logical conjunction of
all of them.</para>

<para>As a convenience,</para>

<programlisting>
      when GUARD suppress SYMBOL1 SYMBOL2 SYMBOL3
</programlisting>

<para>is syntactic sugar for</para>

<programlisting>
      unless GUARD==n suppress SYMBOL1 SYMBOL2 SYMBOL3
</programlisting>

<para>When a derived symbol is suppressed, this prevents its value from
being written out to the configuration file.</para>

<sect4 id="dependence"><title>Dependence</title>

<para>Optionally, a rule may declare that the suppressed symbols are
constrained in value by the predicate symbols.  That is, if there is a
rule</para>

<programlisting>
      unless GUARD suppress dependent SYMBOL
</programlisting>

<para>then the value of <varname>SYMBOL</varname> is constrained by
the value of <varname>GUARD</varname> in the following way:</para>

<table><title>Effect of suppress depend</title>
<tgroup cols=3 align=left colsep=1 rowsep=1>
<thead>
<row>
	<entry>guard</entry>
	<entry>trit</entry>
	<entry>bool</entry>
</row>
</thead>
<tbody>
<row>
	<entry>y</entry>
	<entry>y,m,n</entry>
	<entry>y,n</entry>
</row>
<row>
	<entry>m</entry>
	<entry>m,n</entry>
	<entry>y,n</entry>
</row>
<row>
	<entry>n</entry>
	<entry>n</entry>
	<entry>n</entry>
</row>
</tbody>
</tgroup>
</table>

<para>The reason for this odd, type-dependent logic table is that we
want to be able to have boolean option symbols that configure options
for trit-valued ancestors.  This is why the guard symbol value
<constant>m</constant> permits a dependent boolean symbol (but not a
dependent trit-valued symbol) to be <constant>y</constant>.</para>

<para>If the guard part is an expression, <varname>SYMBOL</varname> is
made dependent on each symbol that occurs in a pure conjunction in the
guard.  Thus, if <varname>FOO</varname> and <varname>BAR</varname> and
<varname>BAZ</varname> are trit symbols,</para>

<programlisting>
    unless FOO!=n and BAR==m suppress dependent BAZ
</programlisting>

<para>is equivalent to the following rules:</para>

<programlisting>
     unless FOO!=n and BAR==m suppress BAZ
     require BAZ <= FOO and BAZ <= BAR 
</programlisting>

<para>This rule, on the other hand,</para>

<programlisting>
    unless FOO!=n and (BAR==m or BAZ==y) suppress dependent QUUX
</programlisting>

<para>is equivalent to:</para>

<programlisting>
     unless FOO!=n and (BAR==m or BAZ==y) suppress QUUX
     require QUUX <= FOO
</programlisting>

<para>The compiler does not make symbols connected by disjunctions (or symbols
connected by any logical-expression operator other than conjunction) into
ancestors of symbols on the right-hand side.</para>

<para>Putting a menu on the right side of a visibility rule with `dependent'
puts the constraint on all the configuration symbols in that menu.
Any submenus will inherit the constraint and pass it downward to
their submenus.</para>

<para>Dependency works both ways.  If a dependent symbol is set
<constant>y</constant> or <constant>m</constant>, the value of the
ancestor symbol may be forced; see
<xref linkend="side-effects"> for discussion.</para>

<para>Rationale: The syntax is <symbol>unless...suppress</symbol>
rather than <symbol>if...query</symbol> because the normal state of a
symbol or menu is visible.  The <symbol>dependent</symbol>
construction replaces the <symbol>dep_tristate</symbol> and
<symbol>dep_bool</symbol> constructs in &CML1;.</para>

</sect4>
</sect3>
<sect3><title>Saveability rules</title>

<para>Normally, CML2 configurators save a symbol to the output 
configurator if it is either been set during the configuration 
session or is visible at save time.</para>

<para>Occasionally it is necessary to force the default of a symbol
to be saved even when it is not visible at save time.  For this
purpose the language supports giving symbols an explicit saceability 
predicate:</para>

<programlisting>
      when GUARD1 save SYMBOL1 SYMBOL2 SYMBOL3
      unless GUARD2 save SYMBOL4 SYMBOL5 SYMBOL6
</programlisting>

<para>The guard expressions may be any legal expression.</para>

</sect3>
<sect3><title>Menu definitions</title>

<para>A menu definition associates a sequence of configuration symbols and
(sub)menu identifiers with a menu identifier (and its banner string).
It is an error for any symbol or menu name to be referenced in more
than one menu.</para>

<para>If there are multiple menu definitions referring to the same
menu name, the compiler builds a single menu from all of them listing
their contents in the order they are compiled.  This is explicitly
permitted in order to allow menu add-ons in CML2 source files generated 
by concatenation.</para>

<para>Any implementation of &CML2; must allow menus to be nested to a depth of
at least 15 levels.  The reference implementation has no hard limit.</para>


<para>Symbol references in menus may have suffixes which change the default
boolean type of the symbol.  The suffixes are as follows:</para>

<programlisting>
    ?      trit type
    %      decimal type
    @      hexadecimal type
    $      string type
</programlisting>

<para>A choices definition associates a choice of boolean
configuration symbols with a menu identifier (and its banner
string). It may optionally declare a default symbol to be set to
<constant>y</constant> at the time the menu is instantiated; if there
is no specified default, the first symbol in the menu becomes the
default.</para>

<para>If the default symbol of a choices menu is invisible at menu
instantiation time, the configurator is expected to search forward 
into the symbols following the default until a visible alternative is found.
If a visible alternative is found, it is used.  If no visible alternative is
found, the behavior is undefined (but the recommended behavior is to throw
an except and exit).</para>

<para>In a complete &CML2; system, these definitions link all menus together
into a single big tree, which is normally traversed depth-first
(except that visibility predicates may suppress parts of it).</para>

<para>If the list of symbols has subtrees in it (indicated by curly braces)
then the symbol immediately before the opening curly brace is declared
a visibility and dependency guard for all symbols within the braces. 
That is, the menu declaration</para>

<programlisting>
    menu foo 
         SYM1 SYM2 {SYM3 SYM4} SYM5
</programlisting>

<para>not only associates SYM[12345] with foo, it also registers rules 
equivalent to</para>

<programlisting>
       unless SYM2 suppress dependent SYM3 SYM4
</programlisting>

<para>Such submenu declarations may be nested to any depth.</para>

<para>Normally, a symbol used as a sub-menu guard will be a bool or trit.
They are also permitted to be numeric, in which case value zero is considered
equivalent to boolean <constant>n</constant> and all other values are 
considered equivalent to boolean <constant>y</constant>.</para>

<para>It is perfectly legal for a menu-ID to have no child nodes.  In &CML2;,
this is how you embed text in menus, by making it the banner of
a menu symbol with no children.</para>

</sect3>
<sect3><title>Choice groups</title>

<para>Declaring a group of logical symbols to be a choice group creates the 
constraint that at most one of those symbols can have the value
<constant>y</constant> or <constant>m</constant>.  Setting a symbol in 
a choicegroup to one of these values clears all other symbols in
the group.  It is a compile-time error for a choice group to contain
symbols that are not of logical type.</para>

<para>Choices menus are a special case of choicegroups that are constrained
always to have one choice selected.</para>

</sect3>
<sect3><title>Derivations</title>

<para>A derivation binds a symbol to a formula, so the value of that
symbol is always the current value of the formula.  Symbols
may be evaluated either when a menu containing them is instantiated 
or at the time the final configuration file is written.</para>

<para>The compiler performs type inference to deduce the type of a
derived symbol.  In particular, derived symbols for which the
top-level expression is an arithmetic operator are deduced to be
decimal.  Derived symbols for which the top level of the expression is
a boolean operator are deduced to be <type>bool</type>.  Derived
symbols for which the top level of the expression is a
<type>trit</type> operator are deduced to be <type>trit</type>.</para>

<para>Derived symbols are never set directly by the user and have no
associated prompt string.</para>

</sect3>
<sect3><title>Defaults</title>

<para>A default definition sets the value a symbol will have until it is
explicitly set by the user's answer to a question.  The right-hand
side of a default is not limited to being a constant value; it
may be any valid expression.</para>

<para>Default expressions are treated as symbolic macros to be
evaluated either when a menu containing the defaulted symbol is
instantiated, or at the time the final configuration file is written,
or during the evaluation of any formula (such as a derivation or
visibility predicate) referring to the defaulted symbol.</para>

<para>Thus, the evaluated default of a symbol may differ depending on
the timing of evaluation relative to other symbol settings (in
particular, of the default expression's component symbols).  This is
intentional.  The compiler detects circularities resulting from cycles
of default expressions or derivations that would cause infinite
recursion.</para>

<para>If a decimal or hexadecimal symbol is defaulted from a symbol or
expression that has bool or trit values, the values
<constant>y</constant> and <constant>m</constant> are cast to 1 and
the value <constant>n</constant> is cast to 0.  If a boolean or trit
symbol is defaulted from a decimal- or hexadecimal-valued expression,
a value of zero is cast to <constant>n</constant> and all other values
are cast to <constant>y</constant>.  The results of mixing other types
are undefined, should be considered accidents of the implementation,
and should not be relied on.</para>

<para>If a non-string symbol is not explicitly defaulted, it gets the
zero value of its type; <constant>n</constant> for bools and trits,
<constant>0</constant> for decimal and hexadecimal symbols.  String
symbols always require a default.</para>

<para>The optional range or enumeration part may be used to constrain
legal values for decimal or hexadecimal-valued symbol. A default
declaration may have either a range or an enumeration part, but not
both.</para>

<para> A range specification consists of any number of either single
values or paired upper and lower bounds separated by a dash,
interpreted as inclusive ranges.  The symbol has a legal value if it
either matches a specified single value or is contained in one of the
intervals.</para>

<para>An enumeration consists of a series of pairs separated by '='.
Each pair associates a symbol (which must have been previously
declared in an explanation statement) with an integer value.  The
symbol must match one of the values.  The front end may use the prompt
value of the symbol in each pair to stand in for the value (e.g. when
generating a pull-down menu of alternatives.)</para>

</sect3>
<sect3><title>Requirements</title>

<sect4><title>Requirements as sanity checks</title>

<para>A requirement definition constrains the value of one or more
symbols by requiring that the given expression be true in any valid
configuration.  All constraints involving a given configuration symbol
are checked each time that symbol is modified.  Every constraint is
checked just before the configuration file is written.</para>

<para>If the optional explanation clause is present, the string
associated with the specified symbol is taken to be an explanation that
the front end can use if when the constraint is violated.  Otherwise,
the explanation will be a display of the constraint expression.</para>

<para>It is up to individual &CML2; front ends to decide how to handle
constraint violations.  Here are some possible policies:</para>

<itemizedlist>
<listitem><para>
   Complain and die.  Not recommended, but perhaps appropriate for
   a batch-mode front end.
</para></listitem>

<listitem><para> Conservative recovery: Disallow the modification that
   would violate the constraint. (Thus, earlier answers have priority
   over later ones.) Note that front ends using this policy should
   back out side-effects of symbol changes as well as the change to
   the primary symbol.
</para></listitem>

<listitem><para>
   Flag-and-continue: visibly flag all symbols involved in a
   constraint violation (and unflag them whenever a constraint violation
   is fixed).  Require the user to resolve all constraint violations
   before the configuration file is saved.
</para></listitem>

<listitem><para>
   Backtracking: Present all the menus involved in the
   constraint.  Accept modifications of any of them, but do not 
   allow the modifications to be committed until all constraints are
   satisfied.
</para></listitem>
</itemizedlist>

<para>The reference implementation uses conservative recovery,
with side-effects being backed out as well.</para>
 
<para>A <symbol>prohibit</symbol> definition requires that the
attached predicate <emphasis>not</emphasis> be true.  This is
syntactic sugar, added to accommodate the fact that human beings have
trouble reasoning about the distribution of negation in complex
predicates.</para>

</sect4>
<sect4 id="forcevar"><title>Using requirements to force variables</title>

<para>Requirements have a second role.  Certain kinds of requirements
can be used to deduce values for variables the user has not yet set;
the &CML2; interpreter does this automatically.</para>

<para>Every time a symbol is changed, the change is tried on each
declared constraint.  The constraint is algebraically simplified by
substituting in constant, derived and frozen symbols.  If the
simplified constraint forces an expression of the form <symbol>A ==
B</symbol> to be true, and either <symbol>A</symbol> is a query symbol
and <symbol>B</symbol> is a constant or the reverse, then the
assignment needed to make <symbol>A == B</symbol> true is
forced.</para>

<para>Thus, given the rules</para>

<programlisting>
derive SPARC from SPARC32 or SPARC64
require SPARC implies ISA==n and PCMCIA==n and VT==y and VT_CONSOLE==y
    and BUSMOUSE==y and SUN_MOUSE==y and SERIAL==y and SERIAL_CONSOLE==y
    and SUN_KEYBOARD==y
</programlisting>

<para>when either <symbol>SPARC32</symbol> or <symbol>SPARC64</symbol>
changes to <constant>y</constant>, the nine assignments implied by the
right side of the second rule will be performed automatically.  If
this kind of requirement is triggered by a guard consisting entirely
of frozen symbols, all the assigned symbols become frozen.</para>

<para>If <symbol>A</symbol> is a <type>boolean</type> or
<type>trit</type> symbol and <symbol>B</symbol> simplifies to a
<type>boolean</type> or <type>trit</type> constant (or vice-versa),
assignments may be similarly forced by other relationals (notably
<symbol>A != B</symbol>, <symbol>A &lt; B</symbol>, <symbol>A &gt;
B</symbol>, <symbol>A &lt;= B</symbol>, and <symbol>A &gt;=
B</symbol>).  If forcing the relational to be true implies only one
possible value for the symbol involved, then that assignment is
forced.</para>

<para>Note that whether a relational forces a unique value may depend on
whether trits are enabled or not.</para>

</sect4>
</sect3>
<sect3><title>Start declaration</title>

<para>The <symbol>start</symbol> definition specifies the name of the
root menu of the hierarchy.  One such declaration is required per
&CML2; ruleset.</para>

</sect3>
<sect3 id="prefix"><title>Prefix declaration</title>

<para>A <symbol>prefix</symbol> declaration sets a string to be
prepended to each symbol name whenever it is written out to a result
configuration file.  This prefix is also ignored when present as a
prefix of symbol names, whether in a rule file or when read in from a
defconfig file.</para>

<para>Rationale: This was added so the &CML2; rule system for the
Linux kernel would not have to include the common
<constant>CONFIG_</constant> prefix, which adds bulk and makes reading
the rules file visually confusing. The alternative of wiring that
prefix into the code would compromise &CML2;'s potential usefulness
for other applications. Prefix-stripping in rule files was added as
a backward-compatibility hack to permit names such as CONFIG_3C515
that have leading numerics and would be treated as numbers if
given without prefix.</para>

</sect3>
<sect3><title>Banner declaration</title>

<para>A <symbol>banner</symbol> definition sets the menu id banner
string to used in the configurator greeting line.  The string attached
to the specified menu id should identify the system being
configured.</para>

<para>Rationale: As for the prefix string.</para>

</sect3>
<sect3 id="condition-on"><title>Condition statement</title>

<para>The <symbol>condition</symbol> statement ties a &CML2; feature
flag to a query symbol; that is, the value of the feature flag is the
value of the symbol.  The initial value of the flag when a rulebase is
read in is simply the associated symbol's default.  If there is no
symbol associated with the the flag, the flag's value is
<constant>n</constant>.</para>

<para>The condition value may also be a constant, in which case the
value of the feature flag is set to that constant.</para>

<sect4><title>The trit flag</title>

<para>A <quote>trits</quote> flag is supported.  When this flag is
<constant>n</constant>, trit-valued symbols are treated as booleans
and may only assume the values <constant>y</constant> and
<constant>n</constant>.</para>

<para>When this flag is <constant>y</constant>, modules are enabled
and questions involving them will be issued normally.</para>

<para>If the flag is not tied to a symbol or constant, its value is 
<constant>y</constant>.</para>

<para>This flag may affect the front end's presentation of
alternatives for trit-valued symbols.  It also affects forcing of ancestor
symbols.  When the trits flag is <constant>m</constant> or
<constant>y</constant>, setting a boolean symbol only forces its trit
ancestors to the value <constant>m</constant>; when trits is off, they
are forced to <constant>y</constant>.  See <xref
linkend="side-effects"> for discussion.</para>

</sect4>
<sect4><title>The nohelp flag</title>

<para>A <quote>nohelp</quote> flag is supported.  When this flag is
<constant>n</constant>, symbols without associated help are invisible.
When it is <constant>y</constant>, symbols without help are visible.
If the flag is not tied to a symbol, its value is <constant>y</constant>.
</para>

<para>Rationale: This flag is intended to be tied to a user-visible 
policy symbol that sets some kind of expert level.</para>

</sect4>
<sect4><title>The expert flag</title>

<para>A <quote>expert</quote> flag is supported.  When this flag is
<constant>n</constant>, the user is presumed to be a novice.
When it is <constant>y</constant>, the user is presumed to be an expert.
If the flag is not tied to a symbol, its value is <constant>n</constant>.
</para>

<para>Rationale: This flag is intended to be used by configurator front ends
to set UI policy.  In the normal case, it will be tied to some policy
symbol in the rulebase.</para>

</sect4>
</sect3>
<sect3><title>Warndepend declaration</title>

<para>The <symbol>warndepend</symbol> declaration takes a list of
symbol names.  All dependents of each symbol have their prompts
suffixed with the name of the symbol in parentheses to indicate that
they are dependent on it.</para>

<para>Rationale: Added to support the <symbol>EXPERIMENTAL</symbol>
symbol in the Linux kernel configuration.  This declaration is better
than tracking experimental status by hand because it guarantees that
subsidiary symbols dependent on an experimental feature will always be
flagged for the user.</para>

</sect3>
<sect3><title>Icon declaration</title>

<para>An <symbol>icon</symbol> declaration associates graphic data
(encoded in RFC2045 base64) with the rulebase.  Front ends may use
this data as an identification icon.</para>

<para>The reference front-end implementation uses the image to iconify
the configurator when it is minimized while running in X mode.</para>

<para>The reference front-end accepts the image in GIF format.  In the
future (when underlying library support permits) PNG support will be
added and GIF removed.</para>

</sect3>
<sect3><title>Debug</title>

<para>This declaration enables debugging output from the compiler (it
has no effect on front-end behavior).  It takes an integer value and
uses it to set the current debug level.  It may change or be removed
in future releases.</para>

</sect3>
<sect3><title>Expressions</title>

<para>All arithmetic is integer. The compiler permits some kinds of
type promotion, described below.</para>

<para>For purposes of the relational operators, trit values are
strictly ordered with <constant>y</constant> &gt;
<constant>m</constant> &gt; <constant>n</constant>.</para>

<para>Arithmetic operations + - * / have the expected semantics on
decimal and hexadecimal value.</para>

<para>Boolean logical expressions may be used as parts of integer-valued
formulas (e,g in derivations and constraints).  The value of true is 1,
and of false is 0.</para>

<para>It is a compile-time error to apply the logical operators
or/and/implies to <type>trit</type> or numeric values.  Also,
expressions occurring in guards (in <symbol>unless/suppress</symbol>,
or <symbol>require/prohibit</symbol> declarations) must yield a value
of boolean type. The compiler does type propagation in expressions to
check these constraints.</para>

<para>The purpose of these restriction is to enable compile-time
detection of situations where confusion of <type>trit</type> or
numeric with boolean values might induce subtle errors.  For the same
reason, if the symbol <symbol>FOO</symbol> is trit-valued it is a
compile-time error to say just <quote>FOO</quote> in an expression, as
opposed to <quote>FOO!=n</quote> or some other more explicit
relational.</para>

<para>Thus, because the symbol <symbol>SCSI</symbol> is trit-valued:</para>

<programlisting>
    unless SCSI suppress A2091_SCSI
</programlisting>
<para>is illegal and will raise an error.  Write an unambiguous test
instead:</para>

<programlisting>
    unless SCSI>=m suppress A2091_SCSI
</programlisting>

<para>The obvious booleans operations (and, or) are supported; they are
commutative and associative. An 'implies' operation is also supported: </para>

<programlisting>
    FOO implies BAR  <=>  not (FOO and (not BAR))
</programlisting>

<para>The implies operation is neither commutative nor associative.</para>

<para>The usual relational tests (<symbol>==</symbol>,
<symbol>!=</symbol>, <symbol>&gt;=</symbol>, <symbol>&lt;=</symbol>,
<symbol>&gt;</symbol>, <symbol>&lt;</symbol>) are supported.
Relationals bind more tightly than boolean operators, so
<symbol>FOO!=n and BAR==m</symbol> behaves as expected.  Additionally,
<symbol>and</symbol> binds more tightly than <symbol>or</symbol>, so
that <symbol>FOO or BAR and BAZ</symbol> is <symbol>FOO or (BAR and
BAZ)</symbol>.</para>

<para>Ternary-select is available as in C.  The value of <symbol>a ? b :
c</symbol> is <symbol>b</symbol> if <symbol>a</symbol> is true,
<symbol>c</symbol> otherwise.</para>

<para>The following additional ternary-logic operations are available.
It is an error to apply these to operands with types other than
<type>bool</type> or <type>trit</type>.</para>

<para>Max or union; notation <keysym>|</keysym>.  Here is a truth table:</para>

<table><title>Union</title>
<tgroup cols=4 align=left colsep=1 rowsep=1>
<tbody>
<row>
	<entry>|</entry>
	<entry><emphasis role=bold>y</emphasis></entry>
	<entry><emphasis role=bold>m</emphasis></entry>
	<entry><emphasis role=bold>n</emphasis></entry>
</row>
<row>
	<entry><emphasis role=bold>y</emphasis></entry>
	<entry>y</entry>
	<entry>y</entry>
	<entry>y</entry>
</row>
<row>
	<entry><emphasis role=bold>m</emphasis></entry>
	<entry>y</entry>
	<entry>m</entry>
	<entry>m</entry>
</row>
<row>
	<entry><emphasis role=bold>n</emphasis></entry>
	<entry>y</entry>
	<entry>m</entry>
	<entry>n</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Min or intersection; notation <keysym>&amp;</keysym>.  Here is a
truth table:</para>

<table><title>Intersection</title>
<tgroup cols=4 align=left colsep=1 rowsep=1>
<tbody>
<row>
	<entry>&</entry>
	<entry><emphasis role=bold>y</emphasis></entry>
	<entry><emphasis role=bold>m</emphasis></entry>
	<entry><emphasis role=bold>n</emphasis></entry>
</row>
<row>
	<entry><emphasis role=bold>y</emphasis></entry>
	<entry>y</entry>
	<entry>m</entry>
	<entry>n</entry>
</row>
<row>
	<entry><emphasis role=bold>m</emphasis></entry>
	<entry>m</entry>
	<entry>m</entry>
	<entry>n</entry>
</row>
<row>
	<entry><emphasis role=bold>n</emphasis></entry>
	<entry>n</entry>
	<entry>n</entry>
	<entry>n</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Similarity; notation <keysym>$</keysym>.  Here is a truth table:</para> 

<table><title>Similarity</title>
<tgroup cols=4 align=left colsep=1 rowsep=1>
<tbody>
<row>
	<entry>$</entry>
	<entry><emphasis role=bold>y</emphasis></entry>
	<entry><emphasis role=bold>m</emphasis></entry>
	<entry><emphasis role=bold>n</emphasis></entry>
</row>
<row>
	<entry><emphasis role=bold>y</emphasis></entry>
	<entry>y</entry>
	<entry>n</entry>
	<entry>n</entry>
</row>
<row>
	<entry><emphasis role=bold>m</emphasis></entry>
	<entry>n</entry>
	<entry>m</entry>
	<entry>n</entry>
</row>
<row>
	<entry><emphasis role=bold>n</emphasis></entry>
	<entry>n</entry>
	<entry>n</entry>
	<entry>n</entry>
</row>
</tbody>
</tgroup>
</table>

<para>The operator precedence implied by the BNF above is implemented
in the parser.</para>

</sect3>

<sect3 id="side-effects"><title>Symbol Assignment and Side
Effects</title>

<para>Setting a symbol's value may have side-effects on other symbols
in two ways.</para>

<para>First, it may trigger a change in other variables through
explicit requirements.  See <xref linkend="forcevar"> for
discussion.</para>

<para>Second, each symbol has two implicit lists associated with it:
of symbols it depends on (ancestors) and symbols that depend on it
(dependents).  Whenever a symbol is changed, any side-effects are
propagated through those lists.  Changing the value of the symbol
upward (<symbol>n</symbol> to <symbol>m</symbol>, or
<symbol>m</symbol> to <symbol>y</symbol>) may change the value of
ancestors; changing it downward (<symbol>y</symbol> to
<symbol>m</symbol> or <symbol>m</symbol> to <symbol>n</symbol>) may
affect the value of dependents.</para>

<para>See also <xref linkend="dependence"> for discussion of the two
syntactically different ways dependencies can be created.</para>

<para>&CML2; interpreters are required to implement all-or-nothing side
effects; that is, after an assignment, either the assignment and
all its side-effects have been performed, or (in the event the
new values would violate a requirement) none of them are. </para>

<para>The reference implementation achieves this by implementing two-phase
commit; the assignment and its side-effects can be made tentatively,
constraints checked, and then either committed or rolled back.</para>

<para>Side-effect bindings remain linked to the symbol whose value change
triggered them, and are backed out whenever that symbol is changed
again.  Backing out a side-effect may expose previous side-effects
on a symbol from other, earlier bindings.</para>

<para>To see how this works, consider the following sequence of
actions given the constraints <symbol>A: (FOO==y implies BAR==y)</symbol> and
<symbol>B: (BAZ==y implies BAR==n)</symbol>:</para>

<procedure>
<step>
<para>User sets FOO=y.</para>  
	<substeps>
	<step><para>As a side-effect, this sets BAR=y through constraint 
	A</para></step>
	</substeps>
</step>
<step>
<para>User sets BAZ=y.</para>
	<substeps>
	<step><para>As a side-effect, this sets BAR=n constraint B</para></step>
	<step><para>BAR==n implies FOO=n through constraint A</para></step>
	</substeps>
</step>
<step>
<para>User sets an unrelated symbol QUUX=y.</para>
</step>
<step>
<para>User sets BAZ=n.</para>

<para>This does not have a direct side-effect on BAR.
However, since the value BAZ has changed, the side-effects FOO=n 
and BAR=n of the last BAZ binding is backed out.  The visible value of 
BAR is again y.</para>
</step>
</procedure>

<para>The easiest way to understand this is by visualizing the
variable-binding transactions as a stack.  After the first step, the
stack looks like this:</para>

<programlisting>
1: FOO=y:         FOO=y BAR=y
</programlisting>

<para>After the second step:</para>

<programlisting>
2: BAZ=y:         FOO=n BAR=n BAZ=y
1: FOO=y:         FOO=y BAR=y
</programlisting>

<para>The third step adds another unrelated binding:</para>

<programlisting>
3: QUUX=y:                          QUUX=y
2: BAZ=y:         FOO=n BAR=n BAZ=y
1: FOO=y:         FOO=y BAR=y
</programlisting>

<para>The fourth step both adds a binding and backs out the old one:</para>

<programlisting>
4: BAZ=n:                     BAZ=n               
3: QUUX=y:                          QUUX=y
1: FOO=y:         FOO=y BAR=y
</programlisting>

<para>The reference implementation journals all side-effects and
always looks for the most recent binding of a symbol (highest in the
stack) when evaluating it.</para>

</sect3>

<sect3><title id="orderdeps">Order Dependencies</title>

<para>In general, the relative order of CML2 declarations does not
change their effect.  The prefix declaration, however, is used in
interpreting symbol names, so it must precede symbol
declarations.</para>

<para>There is a subtler kind of order dependency possible 
between constraints. Consider the following set of constraints:</para>

<programlisting>
1: require FOO==y implies DEP1==y
2: require DEP1 implies BAR==n
3: require FOO==y and BAR==y implies DEP2==n
</programlisting>

<para>Now suppose we set FOO to y.  Then the values that variables get
forced to will be different depending on the order in which the
theorem-prover finds the constraints:</para>

<programlisting>
1, 2, 3: DEP1==y, BAR==n, DEP2 unchanged.
1, 3, 2: DEP1==y, BAR==n, DEP2==n
</programlisting>

<para>In practice this should seldom be a difficulty, but it is well to
bear such possibilities in mind when writing complex constraints.</para>
</sect3>
</sect2>
</sect1>

<sect1 id="file-format"><title>&CML2; configuration file format</title>

<para></para>
<sect2 id="defconfig"><title>Output format</title>

<para>The output file consists of a series of lines in the format of
either Unix shell variable assignments or directives.</para>

<para>Each ordinary (non-directive) line is led with a symbol name
(prefixed if there is a <symbol>prefix</symbol> declaration in the
rulebase), continues with a <keysym>=</keysym>, and finishes with a
value.  The value may be <constant>y</constant>,
<constant>n</constant>, or <constant>m</constant> for
<type>boolean</type> or <type>tristate</type> symbols.  It may be a
quoted string for <type>string</type> literals, or an (unquoted)
numeric literal for <type>decimal</type> or <type>hexadecimal</type>
symbols.</para>

<para>The value of a symbol will be written if it has either been 
set by user action or is visible at configuration-save time.</para>

<para>In the reference implementation, symbols are written in depth-first
traversal order.  Derived symbols are written after the query symbols;
each derived symbol is written out if any of the symbols in its
formula has been set.</para>

<para>Directives begin with $$.  There are currently two directives
defined: <symbol>__freeze</symbol> and <symbol>__commit</symbol>.
These cause a commit-with-freeze and a commit-without-freeze,
respectively, of all bindings read since the last directive (or the
start of file if there were no previous directives).</para>

<para>Lines beginning with # are comments.  Postprocessing tools 
should not attempt to interpret them.</para>

</sect2>
</sect1>

<sect1 id="history"><title>Change history</title>
  <para>
  <simplelist>
    <member><productnumber>0.1</productnumber> -- 24 May 2000
      Original &CML2; specification.</member>

    <member><productnumber>0.2.0</productnumber> -- 31 May 2000
      Removed whenever/sets from the language.  Everything is now done
      with deduction.</member>

    <member><productnumber>0.2.1</productnumber> -- 4 June 2000
      Added <symbol>warndepend</symbol>.</member>

    <member><productnumber>0.3.0</productnumber> -- 9 June 2000
      Deduction algorithm rewritten and documented in section
      V.</member>

    <member><productnumber>0.4.0</productnumber> -- 20 June 2000:
      Value stacking is implemented.</member>

    <member><productnumber>0.5.0</productnumber> -- 26 June 2000:
      Fuller support for ranges.  Spec format converted to
      DocBook.</member>

    <member><productnumber>0.6.0</productnumber> -- 30 June 2000:
      Eliminated a lexical class.</member>

    <member><productnumber>0.7.0</productnumber> -- 6 July 2000:
      The "options" directive was removed.</member>

    <member><productnumber>0.7.0</productnumber> -- 12 Aug 2000:
      Added the `explanation' declaration.</member>

    <member><productnumber>0.9.2</productnumber> -- 15 Jan 2001:
      Reference manual split out of the paper.</member>

    <member><productnumber>0.9.8</productnumber> -- 29 Mar 2001:
      Module-suppression feature added.</member>

    <member><productnumber>1.0.0</productnumber> -- 9 April 2001:
      Ready for production release.</member>

    <member><productnumber>1.2.3</productnumber> -- 23 April 2001:
      Added -B option.</member>

    <member><productnumber>1.2.5</productnumber> -- 25 April 2001:
      Revisions following comments by Greg Banks.</member>

    <member><productnumber>1.3.3</productnumber> -- 28 April 2001:
      Help text sections introduced in menus and symbols declarations.
      The `helpfile' declaration is gone.</member>

    <member><productnumber>1.6.1</productnumber> -- 16 June 2001:
      New section on declaration order.</member>

    <member><productnumber>1.6.3</productnumber> -- 21 June 2001:
      Menus may be concatenated from multiple declarations.</member>

    <member><productnumber>1.8.5</productnumber> -- 14 Nov 2001:
      It's possible to condition a flag on a constant.</member>

    <member><productnumber>1.9.1</productnumber> -- 25 Nov 2001:
      Derived symbols can be suppressed.</member>

    <member><productnumber>1.9.4</productnumber> -- 1 Dec 2001:
      Default of a choices menu becomes the specified default if it 
      is visible, the first visible symbol after it otherwise.</member>

    <member><productnumber>1.9.10</productnumber> -- 16 Dec 2001:
      Compiler now handles suppress-depend guards that are not pure
      conjunctions.</member>

    <member><productnumber>1.9.11</productnumber> -- 19 Dec 2001:
      Added 'like' keyword conjunctions.</member>

    <member><productnumber>2.0.0</productnumber> -- 2 Jan 2002:
      Replaced `private' with `label/with'.  Added 
      $$freeze and $$commit directives.  Added 'choicegroup'.
      Removed most ordering constraints.</member>

    <member><productnumber>2.2.0</productnumber> -- 14 Jan 2002:
      Added `save' declaration.  Removed vitality flag.</member>

    <member><productnumber>2.3.0</productnumber> -- 3 Feb 2002:
      The `menus' and `explanations' declarations are subsumed in
      the `symbols' declaration.
    </simplelist>


  </para>
</sect1>
</article>
<!-- 
Local Variables:
mode:sgml
mode:auto-fill
sgml-doctype:("cml2-reference.sgml" "article")
sgml-insert-missing-element-comment: nil
sgml-indent-step: 2
End:
-->
