#
# FIASCO Kernel configuration
#
source "rules.isg"

prefix CONFIG_

condition trits on n
start main

############################################################################
# Specify help texts for menu items (in order of their appearance in menu) #
############################################################################
symbols

EXPERIMENTAL		'Prompt for experimental features'               text
In this menu you can configure experimental features. Enabling these
features might be less than fully secure and may disrupt the stability of
your kernel.
Use with caution!
.

PF_PC			'(PC)         IA-32 PC Platform'
PF_UX		        '(UX)         Linux Usermode Platform'
PF_SA1100		'(SA1100)     Intel StrongARM Platform'
PF_XSCALE               '(XSCALE)     Intel XScale Platform'
PF_ISG			'(ISG)        ISG Platform'
PF_INTEGRATOR		'(INTEGRATOR) ARM Integrator Platform'
PF_REALVIEW		'(REALVIEW)   ARM RealView Emulation Baseboard'

IA32			'(IA-32) Intel IA-32 processor family'
ARM			'(ARM)   ARM processor family'
AMD64			'(AMD64) AMD64 processor family'

ABI_V2			'(L4V2)  L4 Stable Version V.2 ABI'		text
This is the original L4 API as implemented in Jochen Liedtke's assembly
kernels. The API supports 64 bit thread IDs. Having large thread IDs enables
a relatively large number of threads/tasks to be created. Due to the fixed
amount of bits allocated to thread numbers and task numbers, there can only
be a fixed amount of tasks and threads within a task. The fixed association
of threads to tasks also makes it impossible to migrate threads to other
address spaces. Fiasco uses the "Clans & Chiefs" concept only for task
creation and deletion rights.
.

ARM_PXA                 '(pxa)    Intel XScale'                         text
Choose this if you have an Intel XScale (PXA) CPU.
.

ARM_SA                  '(sa1100) Intel StrongARM'                      text
Choose this if you have an Intel StrongARM CPU.
.

ARM_926			'(arm926)  ARM 926 Processor'
ARM_1176		'(arm1176) ARM 1176 CPU'
ARM_MPCORE		'(mpcore)  ARM MPCore CPU'

IA32_486		'(i486)  Intel 80486'				text
Choose this if you have an Intel 80486 or equivalent CPU (i486).
.

IA32_586		'(i586)  Intel Pentium / AMD K5'		text
Choose this if you have an Intel Pentium or compatible i586 CPU.
.

IA32_686		'(i686)  Intel Pentium Pro'			text
Choose this if you have an Intel Pentium Pro or compatible i686 CPU.
.

IA32_P2			'(PII)   Intel Pentium II / Celeron II'		text
Choose this if you have an Intel Pentium II or Pentium II based Celeron.
.

IA32_P3			'(PIII)  Intel Pentium III / Celeron III'	text
Choose this if you have an Intel Pentium III or Pentium III based Celeron.
.

IA32_P4			'(P4)    Intel Pentium 4 / Celeron 4'		text
Choose this if you have an Intel Pentium 4 or Pentium 4 based Celeron.
.

IA32_PM			'(PM)    Intel Pentium M'			text
Choose this if you have an Intel Pentium M.
.

IA32_K6			'(K6)    AMD K6 / K6-II / K6-III'		text
Choose this if you have an AMD K6 CPU.
.

IA32_K7			'(K7)    AMD Athlon / Duron'			text
Choose this if you have an AMD Athlon or Duron CPU.
.

IA32_K8			'(K8)    AMD Opteron / Athlon64'		text
Choose this if you have an AMD Opteron or Athlon64 CPU.
.

AMD64_K8		'(K8)    AMD Opteron / Athlon64'		text
Choose this if you have an AMD Opteron or Athlon64 CPU.
.

SCHED_PIT		'(PIT)   Use PIT for scheduling'		text
Normally, Fiasco uses the RTC at IRQ8 for scheduling. This can be
disadvantageous in certain circumstances, e.g. VMWare doesn't seem to
emulate the RTC good enough so that not enough timer interrupts are
produced. The PIT mode (using IRQ0) seems to work better in this case.
It is generally safe to use this option, so if you are unsure, say 'Y'.

Consider that the interrupt priorities change: Using RTC, IRQ8 has the
highest priority. Using PIT, IRQ0 has the highest priority. The only case
where PIT scheduling does not work is with profiling. If profiling is
enabled the PIT is used for generating the profiling interrupts.
.

SCHED_RTC		'(RTC)   Use RTC for scheduling'		text
'Yes' is the standard for this option. If this option is set Fiasco
uses the RTC on IRQ 8 for scheduling.  This can be disadvantageous in
certain circumstances, e.g. VMWare doesn't seem to emulate the RTC
good enough so that not enough timer interrupts are produced.  The PIT
(8254) mode (say 'no' here), seems to work better in this case. It is
generally safe to use the PIT, so if you are unsure, say 'no'.
Consider that the interrupt priorities change: Using RTC, IRQ8 has the
highest priority. Using PIT, IRQ0 has the highest priority.  The only
case where PIT scheduling does not work is with profiling. If profiling
is enabled the PIT is used for generating the profiling interrupts and
the RTC must be used for scheduling.
In the case where profiling shall be used within VMWare the SLOW_RTC
option must be set, so that the timer resolution of Fiasco is reduced
to 100Hz.
.

SCHED_APIC		'(APIC)  Use APIC timer for scheduling'		text
Use the Local APIC for scheduling
.

arch			'Target CPU Family'				text
Choose your target platform to compile for.
.

abi_version		'Kernel ABI Version'
kernel_options		'Kernel Options'

ia32_processor		'Target processor'
arm_processor           'Target processor'
amd64_processor		'Target processor'

timer			'Scheduling Timer'

SLOW_RTC		'Use RTC with 100 ticks per second'		text
This option should be enabled if you use VMWare and no PIT
scheduling. The timer resolution is lowered to 100 ticks per second.
.

ONE_SHOT		'Use scheduling timer in one-shot mode'		text
More costly than periodic but more fine-granular scheduling possible.
EXPERIMENTAL!
.

ASSEMBLER_IPC_SHORTCUT	'Assembler IPC shortcut'			text
Use the assembler IPC shortcut to get even better short IPC performance
in the common case.
.

CONTEXT_4K		'TCB size of 4k'				text
Enable this option to increase the size reserved for the thread control
block and the stack of each (kernel) thread from 2KB to 4KB.
.

REGPARM3		'Compile with regparm=3'			text
Compile Fiasco with -mregparm=3. This uses a different ABI and passes the
first three arguments of a function call in registers.
.

IO_PROT			'Enable I/O port protection'			text
Enabling this option adds I/O port protection to the kernel. That means
that every thread starts running at IOPL 0 which means that only the
kernel has full access to all I/O ports. This includes the right to set
and clear the interrupt flags (that is using cli and sti). Access rights
to I/O ports can be mapped like memory. If a task has access to the whole
I/O port space, its IOPL is raised to 3 allowing the task to use cli and
sti.
.

IO_PROT_IOPL_3		'Enable CLI/STI (IOPL 3)'			text
Enable IOPL 3 for tasks with access to all I/O prots, this is the old
behavior.
.

TASK_CAPS			'Enable task capabilities'		text
Enabling this option adds task-send capabilities to the kernel.  IPC
is allowed only if the sender task owns a capability for the receiver task.
.

DECEIT_BIT_DISABLES_SWITCH	'Deceit bit disables switch'		text
The L4 reference manual defines a mechanism called 'Clans and Chiefs'.
Using bit 0 a chief can claim the IPC as 'deceiving' which means
that the receiver sees a virtual sender id instead of the chief's
thread id. Since this mechanism is not implemented in Fiasco, this
bit is unused. After activating this option Fiasco handles the deceit
bit in a different way: While sending an IPC, Fiasco automatically
switches to the receiver regardless the thread priority of both threads.
Setting the deceit bit, the switch is not done if the destination thread's
priority is lower than the current priority. In this case, the destination
thread is only enqueued into the ready queue.
.

POWERSAVE_GETCHAR	'Save power in getchar()'			text
This option uses a processor HALT in getchar() to save power and prevent
some P4 processors from being overheated. This option requires a working
timer IRQ to wakeup getchar periodically.
.

SYNC_TSC		'Synchronize KIP time with time-stamp counter'	text
Synchronize the internal kernel clock with the CPU time stamp counter.
.

SMALL_SPACES		'Provide small address spaces'	 	        text
Say 'Yes' to get support for transparently multiplexing several
task in a single address space.

In order to achive this the kernel donates part of its own space,
splits it in the desired number of parts, and runs tasks in these
segment using the ia32 hardware segmentation. If a task needs more
space than what is provided by the segment it is returned a full
address space.
.

UX_CON			'Graphical console (requires SDL library!)'	text
Fiasco-UX can supply a graphical console for the L4 program it is running.
Enabling this option will build the additional program but needs the SDL
library including development header files installed.
.

UX_NET			'Network support'				text
Enabling this option makes Fiasco-UX provide network support for L4
programs.
.

warnlevels		'Runtime warning level'

WARN_NONE		'(NONE)  Do not show show any kernel warning'

WARN_ANY		'(ANY)   Show any kernel warning'

INLINE			'Generate inline code'				text
Inlining specifies that it is desirable for the compiler to integrate
functions declared 'inline' into the calling routine. This usually leads
to faster code, so unless you want to debug the kernel you should say 'Y'
here.
.

NDEBUG			'Do not compile assertions'			text
Don't insert assertions into the code. Should be enabled for kernels which
are used for measurements.
.

PROFILE			'Compile with profiling support'		text
This option enables support for kernel profiling. This implies that a
special CPU lock is used, because profiling IRQ must be enabled even in
cases where a CPU lock is locked. So the cpu_lock-pic module is used as
implementation for the lock. Further this option does not work with
PIT scheduling (CONFIG_SCHED_PIT) because the PIT is used for
generating profiling IRQs.
.

NO_FRAME_PTR		'Compile without frame pointer'			text
Enabling this option optimizes for speed but makes debugging more difficult.
.

STACK_DEPTH		'Measure stack depth of threads'		text
When this option is enabled, each thread control block is marked with magic
numbers while creation. The function ``show thread lists'' scans the TCB
for these magic numbers and shows the currently used depth of each thread.
.

LIST_ALLOC_SANITY	'Sanity checks in low level allocator'		text
When this option is enabled the low level memory allocator does extra sanity
checks on its data structures before and after every operation. This can halp
detect  flaws like double frees or memory corruption by other means. 

These tests are very expensive so only enable them if a problem with memory
allocation is expected.
.

BEFORE_IRET_SANITY	'Sanity checks at syscall entry/exit'		text
Perform the following additional sanity checks before returning to usermode:
  - Does the thread hold any locks?
  - Is the thread locked by any other thread?
  - Does the thread have the right state:
    * Thread_ready must be set.
    * Thread_cancel and Thread_fpu_owner might be set.
    * Any other state bit must not be set.
Don't use Fiasco compiled with this option for performance analysis!
.

FINE_GRAINED_CPUTIME	'Fine-grained CPU time'				text
Measure CPU time consumed by a thread from switching to the thread until
switching to another thread. Induces an overhead during each thread switch,
so only activate it for debugging.
.

GSTABS			'Compile with gstabs+ debugging information'	text
Enabling this option includes the debugging information using the older
gstabs+ format into the kernel image. This is necessary to access line
number information of the kernel from JDB.
.

WATCHDOG		'Enable Watchdog support'			text
Enable support for watchdog using the builtin Local APIC and a performance
counter. The watchdog can be enabled using the -watchdog command line option.
.

SERIAL			'Support for debugging over serial line'	text
This option enables support for input/output over serial interface.
.

KDB			'KDB Compile in the GNU debugger (GDB) stub'	text
With this option enabled it is possible to connect a remote GDB
session to the Fiasco kernel.
.

JDB			'JDB kernel debugger'				text
The powerful Fiasco kernel debugger.
.

JDB_LOGGING		'JDB extended logging'				text
There are two classes of logging events: Basic events don't consume any time
if they are disabled (ipc, ipc result, pagefaults, unmap). Extended logging
events add an additional overhead of most probably less than 10 cycles if they
are disabled. These events can be activated/deactivated by the 'O' command in
jdb.

Should be disabled for kernels which are used for measurements.
.

JDB_ACCOUNTING		'JDB accounting'				text
Enable accounting information about IPCs, context switches, page faults, and
other events. The counters are accessible from userland through the tbuf
status page.

Should be disabled for kernels which are used for measurements.
.

JDB_MISC		'Miscellaneous JDB modules'

VMEM_ALLOC_TEST		'Run test for Vmem_alloc allocator'


HANDLE_SEGMENTS		'Handle and preserve segments'			text
This function preserves the values of segment registers across thread
and task switches and allows to configure segments for user programs.
.

PL0_HACK		'PL0 Hack'					text
Allows a user task to gain system privileges.
DO NOT ENABLE THIS UNLESS YOU KNOW WHAT YOU ARE DOING!
.

CC			'C compiler'					text
Use this option to override the default C compiler (gcc).
.

CXX			'C++ compiler'					text
Use this option to override the default C++ compiler (g++).
.

HOST_CC			'C host compiler'				text
Use this option to override the default C host compiler (gcc).
.

HOST_CXX		'C++ host compiler'				text
Use this option to override the default C++ host compiler (g++).
.

VERBOSE			'Verbose build process'				text
When enabled, this config option allows you to see more details of the
build process.
.

MAINTAINER_MODE		'Do additional checks at build time'		text
This enables the circular dependency and initcall checks.
Say 'Yes' here if you do kernel hacking.
.

LABEL			'Configuration label'				text
Text string with a name for this configuration. To be displayed in the
kernel boot-up.
.

DEBUG_KERNEL_PAGE_FAULTS 'Debugging of kernel page-faults'              text
This option enables logging of kernel page-faults (aka page faults from 
kernel mode). The page faults are logged to the normal console in the format
*KP[pfa, error_code, ip].
.

WORKAROUND_AMD_FPU_LEAK 'Enables workaroud for AMD FPU security leak'   text
If you use Fiasco for high assurance, high security and use AMD CPUs
you should enable this option. In any other case it is no harm to disable it.
.

USER_LOCKS		'Enable support for user-level locks'		text
Enable this option if you want to use l4_ulock or l4_usem calls for
kernel-provided user-level locks (FAST).
.

DEVEL			'Development stuff, leave disabled!' text
Usually does NEITHER compile NOR work for you!
Do NEVER enable this.
.

MP			'Enable multi processor support'		text
Enable support for machines with multiple processors.
.

abi_extensions		'ABI Extensions'
target_system		'Target System Options'
platform		'Target Platform'
debugging		'Kernel Debugging'

compiling		'Compiling and Building'			text
In this menu you can configure the compile and build process of the kernel.
.

main			'Main menu'


########################################
# Explanations for selection conflicts #
########################################
req_profile_nopit	'PIT scheduling is incompatible with profiling'
req_profile_fp		'Profiling needs frame pointers'

req_rtc_slow_rtc	'Slow RTC option needs RTC as scheduling timer'
req_one_shot_apic	'One-shot mode needs APIC as scheduling timer'
req_one_shot_sync_tsc	'One-shot mode requires synchronous kernel clock'

warndepend EXPERIMENTAL
warndepend DEVEL

###########################################################################
# Specify which items/menus to hide (in order of appearance in main menu) #
###########################################################################
unless  EXPERIMENTAL suppress dependent PF_ISG
  PL0_HACK USER_LOCKS DEVEL MP

unless DEVEL suppress dependent MP
require EXPERIMENTAL == n implies DEVEL == n
require DEVEL == n implies MP == n

when MP suppress ASSEMBLER_IPC_SHORTCUT
require MP implies ASSEMBLER_IPC_SHORTCUT == n

unless  TASK_CAPS suppress dependent USER_LOCKS
require TASK_CAPS == n implies USER_LOCKS == n

unless  PF_PC or PF_UX suppress dependent IA32
unless  PF_PC suppress dependent AMD64
unless  PF_PC suppress timer WATCHDOG
unless  PF_PC suppress WORKAROUND_AMD_FPU_LEAK
require PF_PC implies (IA32 or AMD64)

when    PF_UX suppress IO_PROT IO_PROT_IOPL_3 POWERSAVE_GETCHAR SYNC_TSC SMALL_SPACES PROFILE
                       SERIAL VMEM_ALLOC_TEST
require PF_UX implies IA32 and SCHED_PIT and IO_PROT == n and IO_PROT_IOPL_3 == n
                      and POWERSAVE_GETCHAR == n and SYNC_TSC == n 
		      and SMALL_SPACES == n and PROFILE == n
		      and WATCHDOG == n and SERIAL == n and JDB
		      and VMEM_ALLOC_TEST == n
unless  PF_UX suppress UX_CON
require PF_UX == n implies UX_CON == n
unless  PF_UX suppress UX_NET
require PF_UX == n implies UX_NET == n
unless  PF_PC suppress PL0_HACK
require PF_PC == n implies PL0_HACK == n
#require PF_PC and IA32 implies (CONTEXT_4K == n)
		      
unless  PF_SA1100 or PF_XSCALE or PF_ISG or PF_INTEGRATOR or PF_REALVIEW suppress dependent ARM
unless  PF_SA1100 suppress dependent ARM_SA
require PF_SA1100 implies (ARM and ARM_SA)
unless  PF_XSCALE suppress dependent ARM_PXA
require PF_XSCALE implies (ARM and ARM_PXA)
unless  PF_ISG or PF_INTEGRATOR or PF_REALVIEW suppress dependent ARM_926
unless  PF_INTEGRATOR or PF_REALVIEW suppress dependent ARM_1176
unless  PF_INTEGRATOR or PF_REALVIEW suppress dependent ARM_MPCORE
require PF_ISG        implies (ARM and ARM_926)
require PF_INTEGRATOR implies ARM
require PF_REALVIEW   implies (ARM and (ARM_926 or ARM_MPCORE or ARM_1176))
unless  PF_ISG suppress arm_isg_options

#unless PF_UX or PF_PC suppress CONTEXT_4K
unless IA32 and PF_PC suppress dependent REGPARM3
unless IA32 suppress dependent PROFILE SYNC_TSC SMALL_SPACES 
                       FINE_GRAINED_CPUTIME  
unless IA32 or AMD64 suppress dependent IO_PROT IO_PROT_IOPL_3
unless PF_PC or PF_UX suppress ASSEMBLER_IPC_SHORTCUT
unless IA32 suppress dependent JDB_ACCOUNTING ia32_processor
unless AMD64 suppress dependent amd64_processor
require AMD64 implies WATCHDOG==n and GSTABS==n and
                      KDB==n and HANDLE_SEGMENTS==n and CONTEXT_4K
when AMD64 suppress WATCHDOG GSTABS KDB HANDLE_SEGMENTS

unless ARM  suppress dependent DEBUG_KERNEL_PAGE_FAULTS VMEM_ALLOC_TEST 
                               arm_processor
			       
when   ARM  suppress BEFORE_IRET_SANITY HANDLE_SEGMENTS
                     ASSEMBLER_IPC_SHORTCUT 
		     FINE_GRAINED_CPUTIME JDB_ACCOUNTING JDB_MISC
		     IA32_TARGET GSTABS
		     
require ARM implies  BEFORE_IRET_SANITY==n and  HANDLE_SEGMENTS==n 
                     and ABI_V2 
		     and ASSEMBLER_IPC_SHORTCUT==n and FINE_GRAINED_CPUTIME==n 
                     and JDB_ACCOUNTING==n and JDB_MISC==n 
		     and SERIAL and GSTABS==n

unless SERIAL 	 suppress dependent KDB
unless JDB	 suppress dependent JDB_LOGGING JDB_ACCOUNTING JDB_MISC
unless SCHED_RTC suppress dependent SLOW_RTC
when (IA32 or AMD64) and SCHED_APIC == n suppress ONE_SHOT

when ASSEMBLER_IPC_SHORTCUT suppress PROFILE
require ASSEMBLER_IPC_SHORTCUT implies (PROFILE == n)

when HANDLE_SEGMENTS suppress SMALL_SPACES
require HANDLE_SEGMENTS	implies (SMALL_SPACES == n) 
				

#########################################################################
# Specify default settings for things that can be suppressed (in order) #
#########################################################################
default IA32				from y
default CC				from 'gcc'
default CXX				from 'g++'
default HOST_CC				from 'gcc'
default HOST_CXX			from 'g++'
default VERBOSE				from n
default ABI_V2				from y
default SCHED_PIT			from y
default WARN_ANY			from y
default INLINE				from y
default NDEBUG				from n
default ASSEMBLER_IPC_SHORTCUT		from n
default CONTEXT_4K			from n
default REGPARM3			from y
default SLOW_RTC			from n
default DECEIT_BIT_DISABLES_SWITCH	from y
default POWERSAVE_GETCHAR		from y
default UX_CON				from n
default UX_NET				from n
default GSTABS				from y
default WATCHDOG			from y
default SERIAL				from y
default KDB				from n
default JDB				from y
default LIST_ALLOC_SANITY		from n
default BEFORE_IRET_SANITY		from n
default DEBUG_KERNEL_PAGE_FAULTS	from n
default PL0_HACK			from n
default WORKAROUND_AMD_FPU_LEAK		from n
default MAINTAINER_MODE			from y
default LABEL				from ''
default DEVEL				from n

###############################################
# Specify consistency rules with explanations #
###############################################
require SLOW_RTC      implies (SCHED_RTC) explanation req_rtc_slow_rtc
require (IA32 or AMD64) and ONE_SHOT 
                      implies (SCHED_APIC) explanation req_one_shot_apic
require (IA32 or AMD64) and ONE_SHOT  
                      implies (SYNC_TSC) explanation req_one_shot_sync_tsc
require PROFILE	      implies (SCHED_RTC == y) explanation req_profile_nopit
require PROFILE	      implies (NO_FRAME_PTR == n) explanation req_profile_fp

###########################
# Specify derived symbols #
###########################
derive XARCH		from ( ARM ? 'arm' : ( PF_UX ? 'ux' : ( AMD64 ? 'amd64' : ( PF_PC ? 'ia32' : '' ))))
derive ABI		from ABI_V2 ? 'v2' : (IA32 ? '': 'generic')
derive IA32_TARGET	from IA32_486 ? 'Intel 80486' : (IA32_586 ? 'Intel Pentium' : (IA32_686 ? 'Intel Pentium Pro' : (IA32_P2 ? 'Intel Pentium II' : (IA32_P3 ? 'Intel Pentium III' : (IA32_P4 ? 'Intel Pentium 4' : (IA32_PM ? 'Pentium M' : (IA32_K6 ? 'AMD K6' : (IA32_K7 ? 'AMD Athlon' : (IA32_K8 ? 'AMD Opteron' : 'unknown')))))))))
derive PERF_CNT		from (JDB and (IA32 or AMD64))
derive BIT32		from (IA32 or ARM)
derive BIT64		from AMD64

derive WARN_LEVEL	from WARN_NONE ? 0 : 2

choices platform		# Platform selection
	PF_PC
	PF_UX
	PF_SA1100
	PF_XSCALE
	PF_ISG
	PF_INTEGRATOR
	PF_REALVIEW
	default PF_PC

choices arch	
	IA32
	ARM
	AMD64
	default IA32

choices abi_version		# ABI selection
	ABI_V2
	default ABI_V2

choices arm_processor
        ARM_SA
	ARM_PXA
	ARM_926
	ARM_1176
	ARM_MPCORE
	default ARM_SA
	
choices ia32_processor		# Target processor selection
	IA32_486
	IA32_586
	IA32_686
	IA32_P2
	IA32_P3
	IA32_P4
	IA32_PM
	IA32_K6
	IA32_K7
	IA32_K8
	default IA32_586	

choices amd64_processor
	AMD64_K8
	default AMD64_K8

choices timer			# Timer source selection
	SCHED_PIT
	SCHED_RTC
	SCHED_APIC
	default SCHED_PIT

choices warnlevels		# Debug Warning levels
	WARN_NONE
	WARN_ANY
	default WARN_ANY

menu target_system
	platform
	arch
	ia32_processor
	arm_processor
	amd64_processor
	arm_isg_options
	REGPARM3
	WORKAROUND_AMD_FPU_LEAK

menu abi_extensions
	DECEIT_BIT_DISABLES_SWITCH
	HANDLE_SEGMENTS
	PL0_HACK
	TASK_CAPS
	USER_LOCKS

menu kernel_options
	abi_version
	abi_extensions
  		
	MP
	ASSEMBLER_IPC_SHORTCUT
	SMALL_SPACES
	CONTEXT_4K
	
        timer
	SLOW_RTC
	ONE_SHOT
	SYNC_TSC
	FINE_GRAINED_CPUTIME
	IO_PROT
	IO_PROT_IOPL_3
	UX_CON
	UX_NET

menu debugging			# Debug options
	INLINE
	NDEBUG
	PROFILE
	NO_FRAME_PTR
	STACK_DEPTH
	LIST_ALLOC_SANITY
	BEFORE_IRET_SANITY
	GSTABS
	POWERSAVE_GETCHAR
	SERIAL
	KDB
	JDB {
	  JDB_LOGGING
	  JDB_ACCOUNTING
          JDB_MISC
	  WATCHDOG
	}
	VMEM_ALLOC_TEST
	warnlevels
	DEBUG_KERNEL_PAGE_FAULTS

menu compiling			# Compiling and Building
	CC$
	CXX$
	HOST_CC$
	HOST_CXX$
	VERBOSE
	MAINTAINER_MODE
	LABEL$

menu main			# Main menu
	EXPERIMENTAL
	DEVEL
	target_system
	kernel_options
	debugging
	compiling
