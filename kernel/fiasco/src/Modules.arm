# -*- makefile -*-

###############################################################################


SUBSYSTEMS := 	ABI LIBAMM KERNEL LIBK DRIVERS MINILIBC \
		CXXLIB VERSION JABI TCBOFFSET


PREPROCESS_PARTS 	+= arch $(CONFIG_ABI) 32bit $(CONFIG_XARCH) serial   \
                           h3800 jdb_thread_names noncont_mem \
			   abs_syscalls

PREPROCESS_PARTS-$(CONFIG_MP)                 += mp
PREPROCESS_PARTS-$(CONFIG_LIST_ALLOC_SANITY)  += list_alloc_debug
PREPROCESS_PARTS-$(CONFIG_JDB)                += debug jdb log
PREPROCESS_PARTS-$(CONFIG_KDB)                += debug gdb
PREPROCESS_PARTS-$(CONFIG_TASK_CAPS)          += caps

PREPROCESS_PARTS-$(CONFIG_ARM_926)       += armv5 926 vcache
PREPROCESS_PARTS-$(CONFIG_ARM_1176)      += armv6 arm1176 arm11xx
PREPROCESS_PARTS-$(CONFIG_ARM_MPCORE)    += armv6 mpcore
PREPROCESS_PARTS-$(CONFIG_ARM_CORTEX_A8) += armv7 armca8

PREPROCESS_PARTS	+= $(PREPROCESS_PARTS-y)

#
# TYPES subsystem
#

PRIVATE_INCDIR += types/$(CONFIG_XARCH) types

VPATH_LIBUART  := $(srcdir)/lib/uart $(srcdir)/lib/uart/arm
PRIVATE_INCDIR += lib/uart

#
# DRIVERS Subsystem
#
DRIVERS 		:= libdrivers.a libgluedriverslibc.a
VPATH			+= drivers/$(CONFIG_XARCH) drivers
PRIVATE_INCDIR		+= drivers/$(CONFIG_XARCH) drivers
INTERFACES_DRIVERS 	:= sa1100 mux_console console uart filter_console \
			   gdb_server h3xxx io mmu reset processor delayloop
io_IMPL			:= io io-arm
mmu_IMPL		:= mmu mmu-arm
uart_IMPL		:= uart
reset_IMPL		:=
processor_IMPL		:= processor processor-arm
CXXSRC_DRIVERS		:= glue_libc.cc 
NOOPT			+= $(patsubst %.o, %, $(OBJ_DRIVERS))

#
# MINILIBC Subsystem
#
MINILIBC	:= libc.a
VPATH		+= lib/minilibc/$(CONFIG_XARCH) lib/minilibc
PRIVATE_INCDIR	+= lib/minilibc/$(CONFIG_XARCH)/include lib/minilibc/include
CSRC_MINILIBC	:= atexit.c memccpy.c memcmp.c memmove.c memset.c memcpy.c \
		   memchr.c panic.c strchr.c strcmp.c strcpy.c strlen.c \
		   strncmp.c strncpy.c strstr.c __assert_fail.c printf.c \
		   __v_printf.c vprintf.c strtol.c strtoul.c __lltostr.c \
		   __ltostr.c putchar.c puts.c getchar.c gets.c \
		   construction.c sprintf.c snprintf.c vsnprintf.c vsprintf.c \
		   longjmp.c isalnum.c isalpha.c isascii.c isblank.c \
		   iscntrl.c isdigit.c isgraph.c islower.c isprint.c \
		   ispunct.c isspace.c isupper.c isxdigit.c strspn.c \
		   strcspn.c tolower.c
ASSRC_MINILIBC	:= setjmp.S
NOOPT		+= $(patsubst %.o, %, $(OBJ_MINILIBC))


#
# LIBAMM subsystem
#
LIBAMM		:= libamm.a
VPATH		+= lib/amm
PRIVATE_INCDIR	+= lib/amm
CSRC_LIBAMM	:= amm_alloc_entry.c amm_allocate.c amm_deallocate.c amm_destroy.c \
		   amm_dump.c amm_find_addr.c amm_find_gen.c amm_free_entry.c \
		   amm_init.c amm_init_gen.c amm_iterate.c amm_iterate_gen.c \
		   amm_join.c amm_modify.c amm_protect.c amm_reserve.c \
		   amm_select.c amm_split.c


#
# JABI Subsystem
#
JABI			:= libjabi.a
VPATH			+= jabi/$(CONFIG_XARCH) jabi
INTERFACES_JABI		:= jdb_ktrace


#
# ABI Subsystem
#

ABI 		:= libabi.a
VPATH 		+= abi/$(CONFIG_XARCH) abi 

INTERFACES_ABI 	:= kip l4_types utcb 

l4_types_IMPL 	:= l4_types l4_types-32bit l4_types-iofp l4_types-caps \
		   l4_types-debug l4_types-objs

utcb_IMPL	:= utcb utcb-arm

# x0!=32Bit UIDs
kip_IMPL	:= kip kip-debug kip-arm


#
# KERNEL subsystem
#
KERNEL 		:= fiasco
KERNEL_EXTRA 	:= Symbols
VPATH 		+= kern/$(CONFIG_XARCH) kern kern/shared
PRIVATE_INCDIR 	+= kern/$(CONFIG_XARCH) kern kern/shared

INTERFACES_KERNEL := 	allocators kmem boot_info __main globals config main \
			kernel_uart pagetable kern_types mem_layout \
			mapped_alloc kmem_alloc kip_init kmem_space \
			mem_unit boot_uart_init kernel_console cpu \
			thread syscalls paging vmem_alloc kdb_ke terminate \
			cpu_lock irq sender startup per_cpu_data \
			per_cpu_data_alloc \
			entry_frame irq_alloc helping_lock switch_lock \
			kmem_slab_simple region kmem_slab slab_cache_anon \
			thread_state context sched_context fpu fpu_state \
			mapping mappable mapping_tree simple_mapdb \
			mapdb map_util mem_space space space_index \
			space_index_util task thread_lock receiver timer \
			timeout ipc_timeout deadline_timeout \
			timeslice_timeout \
			dirq fpu_alloc long_msg kernel_thread pic cmdline \
			preemption buddy_alloc trap_state warn \
			bootstrap virq uart_console vkey kern_lib_page \
			watchdog perf_cnt jdb_extensions kernel_task \
			cap_space cap_space_alloc ram_quota ram_quota_alloc \
			obj_space obj_space_alloc \
			utcb_init utcb_support prio_list sys_call_page \
			platform

ifeq ("$(CONFIG_USER_LOCKS)","y")
  PREPROCESS_PARTS	+= ulock
  INTERFACES_KERNEL	+= obj_ref_ptr obj_helping_lock u_lock u_semaphore
endif


boot_info_IMPL	  	:= boot_info boot_info-arch
bootstrap_IMPL		:= bootstrap
config_IMPL	  	:= config config-arm
context_IMPL	  	:= context context-arm
cpu_IMPL	  	:= cpu-arm
cpu_lock_IMPL  	  	:= cpu_lock cpu_lock-generic
entry_frame_IMPL  	:= entry_frame entry_frame-arm                       \
			   entry_frame-abs-timeout-hack
globals_IMPL	  	:= globals globals-arch
irq_IMPL		:= irq irq-ipc
kernel_task_IMPL	:= kernel_task kernel_task-arm
kernel_thread_IMPL	:= kernel_thread kernel_thread-std kernel_thread-arm
kernel_uart_IMPL  	:= kernel_uart
map_util_IMPL		:= map_util map_util-mem map_util-caps
mapping_IMPL		:= mapping-arm mapping
mem_layout_IMPL		:= mem_layout mem_layout-arm mem_layout-noncont
mem_space_IMPL		:= mem_space-arm mem_space-user
kmem_alloc_IMPL		:= kmem_alloc kmem_alloc-arm
pagetable_IMPL	  	:= pagetable pagetable-arch
paging_IMPL	  	:= paging paging-arch
pic_IMPL		:= pic pic-arm
space_IMPL		:= space space-caps
startup_IMPL		:= startup startup-arm
sys_call_page_IMPL	:= sys_call_page sys_call_page-arm
thread_IMPL	  	:= thread thread-list thread-arm \
			   thread-jdb thread-ipc thread-msg thread-msg-arm \
			   thread-pagefault  thread-log thread-lookup \
			   thread-ulock
timer_IMPL		:= timer timer-arm
vmem_alloc_IMPL	  	:= vmem_alloc vmem_alloc-arch
tb_entry_IMPL		:= tb_entry tb_entry-arm

JDB_INTERFACES		:= jdb_handler_queue jdb_module jdb_pic            \
			   jdb jdb_core jdb_prompt_ext                     \
                           jdb_prompt_module jdb_exit_module jdb_kern_info \
			   jdb_tcb jdb_screen jdb_thread_list jdb_input    \
			   jdb_symbol push_console                         \
			   jdb_timeout jdb_dump jdb_ptab                   \
			   jdb_attach_irq jdb_table                        \
			   jdb_kern_info_kmem_alloc jdb_kern_info_region   \
			   jdb_kern_info_kip jdb_mapdb                     \
			   jdb_trace jdb_trace_set jdb_entry_frame         \
			   jdb_thread_names jdb_util jdb_space jdb_utcb    \
			   kern_cnt


JDB_TBUF_IFS		:= jdb_tbuf jdb_tbuf_init jdb_tbuf_output          \
			   jdb_tbuf_show jdb_tbuf_events                   \
			   tb_entry tb_entry_output

GDB_INTERFACES          := gdb


ifeq ("$(CONFIG_JDB)","y")
INTERFACES_KERNEL 	+= $(JDB_INTERFACES) $(JDB_TBUF_IFS) $(DBG_INTERFACES)
jdb_IMPL		:= jdb jdb-arm jdb-ansi jdb-thread
jdb_kern_info_IMPL	:= jdb_kern_info jdb_kern_info-arm
jdb_dump_entry_frame_IMPL:= jdb_dump_entry_frame-arm
jdb_tcb_IMPL		:= jdb_tcb jdb_tcb-arm
jdb_ptab_IMPL		:= jdb_ptab jdb_ptab-ia32-ux-arm jdb_ptab-arm
jdb_screen_IMPL		:= jdb_screen jdb_screen-ia32-ux-arm
jdb_entry_frame_IMPL	:= jdb_entry_frame-arm
jdb_trace_set_IMPL	:= jdb_trace_set jdb_trace_set-arm
thread_IMPL		+= thread-debug 
endif

ifeq ("$(CONFIG_KDB)","y")
INTERFACES_KERNEL 	+= $(GDB_INTERFACES) $(DBG_INTERFACES)
gdb_IMPL		:= gdb gdb-arm
endif

CXXSRC_KERNEL		:= kernel_panic.cc
ASSRC_KERNEL	  	:= ivt.S

NOOPT			+= $(filter jdb%,\
			     $(foreach in,$(INTERFACES_KERNEL), \
			       $(if $($(in)_IMPL),$($(in)_IMPL),$(in))))
NOOPT			+= tb_entry tb_entry_output


#INTERFACES_KERNEL = boot_info __main mapdb region \
#  space_context space space_index space_index_util \
#  stack kmem kmem_alloc slab_cache_anon kmem_slab_simple kmem_slab \
#  switch_lock thread_lock helping_lock kernel_lock timer \
#  thread_state sched context threadid thread_regs sender receiver \
#  thread kernel_thread thread_util \
#  map_util irq dirq virq console paranoia globals \
#  checksum main config

#
# CRT0 subsystem
#
CRT0 		:= crt0.o
CSRC_CRT0	:= atest.c
#ASSRC_CRT0 	:= crt0.S


#
# CXXLIB Subsystem
# 
CXXLIB 			:= libcxx.a
VPATH			+= lib/cxxlib
INTERFACES_CXXLIB 	:= paranoia s_cruft

#
# LIBK subsystem
#
LIBK 		:= libk.a
VPATH          	+= lib/libk/$(CONFIG_XARCH) lib/libk
PRIVATE_INCDIR 	+= lib/libk/$(CONFIG_XARCH) lib/libk

#INTERFACES_LIBK:= atomic lock_guard profile uuencode gmon unistd panic auto_ptr
INTERFACES_LIBK := std_macros atomic lock_guard auto_ptr observer
atomic_IMPL     := atomic atomic-arm-up

#
# VERSION subsystem
#
VERSION		:= version.h

TCBOFFSET	:= tcboffset.h
CXXSRC_TCBOFFSET	:= tcboffset.cc dump_tcboffsets.cc

BSP_NAME         := $(patsubst "%",%,$(CONFIG_BSP_NAME))
MODULES_FILE_BSP := $(srcdir)/kern/arm/bsp/$(BSP_NAME)/Modules
ifeq ($(wildcard $(MODULES_FILE_BSP)),)
  $(error No BSP name defined or no BSP Modules file available)
endif

include $(MODULES_FILE_BSP)
VPATH += kern/arm/bsp/$(BSP_NAME) kern/arm/bsp

ifeq ("$(filter LIBUART, $(SUBSYSTEMS))","LIBUART")
  LIBUART			:= uart/libuart.a
endif

MODULES_FILES = $(MODULES_FILE) $(MODULES_FILE_BSP)
