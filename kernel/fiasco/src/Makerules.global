# -*- makefile  -*-

#
# Makerules for the sources of Fiasco
#

#
# Source-code locations
#

# If building in a separate srcdir, prepend it to module-provided include paths
ifneq ($(srcdir),.)
VPATH 		:= $(addprefix $(srcdir)/, $(VPATH))
PRIVATE_INCDIR	:= $(addprefix $(srcdir)/, $(PRIVATE_INCDIR))
endif

# Finally add the current directory and the preprocessor directory
VPATH 		+= . auto
PRIVATE_INCDIR	+= . auto

#
# End of configuration settings -- rules follow
#

%.o:    %.S
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(ASFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.S.d)

#
# special: build certain sources without profiling flags
#
NOPROFILE_C =  $(filter $(addsuffix .c,  $(NOPROFILE)), $(SRC_C))
NOPROFILE_CC = $(filter $(addsuffix .cc, $(NOPROFILE)), $(SRC_CC))
NOOPT_C =      $(filter $(addsuffix .c,  $(NOOPT)),     $(SRC_C))
NOOPT_CC =     $(filter $(addsuffix .cc, $(NOOPT)),     $(SRC_CC))
NONDEBUG_C =   $(filter $(addsuffix .c,  $(NONDEBUG)),  $(SRC_C))
NONDEBUG_CC =  $(filter $(addsuffix .cc, $(NONDEBUG)),  $(SRC_CC))

$(NOPROFILE_CC:.cc=.o) : %.o: %.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CXX) -c -MD $(CPPFLAGS) $(CXXFLAGS) $(OPT_CXXFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.cc.d)

$(NOPROFILE_C:.c=.o) : %.o: %.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(CFLAGS) $(OPT_CFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.c.d)

$(NOOPT_CC:.cc=.o) : %.o: %.cc
	$(COMP_MESSAGE_NOOPT)
	$(VERBOSE)$(CXX) -c -MD $(CPPFLAGS) $(CXXFLAGS) $(NOOPT_CXXFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.cc.d)

$(NOOPT_C:.c=.o) : %.o: %.c
	$(COMP_MESSAGE_NOOPT)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(CFLAGS) $(NOOPT_CFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.c.d)

$(NONDEBUG_CC:.cc=.o) : %.o: %.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CXX) -c -MD $(filter-out -DNDEBUG,$(CPPFLAGS) $(CXXFLAGS) $(PROF_FLAGS) $(OPT_CXXFLAGS)) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).cc.d)

$(NONDEBUG_C:.c=.o) : %.o: %.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(filter-out -DNDEBUG,$(CPPFLAGS) $(CFLAGS) $(PROF_FLAGS) $(OPT_CFLAGS)) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).c.d)

###

#
# Implicit rules
#

.PHONY: FORCE

%.o:	%.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CXX) -c -MD $(CPPFLAGS) $(CXXFLAGS) $(PROF_FLAGS) $(OPT_CXXFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).cc.d)

%.o:	%.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(CFLAGS) $(PROF_FLAGS) $(OPT_CFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).c.d)

%.o:	%.S
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD -DASSEMBLER $(CPPFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).S.d)

%.i:	%.S
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -E -dD -DASSEMBLER $(CPPFLAGS) $(CFLAGS) $< -o $@

%.i:	%.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -E -dD $(CPPFLAGS) $(CFLAGS) $< -o $@

%.i:	%.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -E -dD $(CPPFLAGS) $(CXXFLAGS) $< -o $@

%.S:	%.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -S $(CFLAGS) $(CPPFLAGS) $< -o $@

%.S:	%.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -S $(CPPFLAGS) $(CXXFLAGS) $< -o $@

# Suck in user-specific optional Makerules files
-include Makerules.local
