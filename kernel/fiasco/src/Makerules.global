# -*- makefile  -*-

#
# Makerules for the sources of Fiasco
#

#
# Source-code locations
#

MODULES_FILE = Modules

$(MODULES_FILE): $(srcdir)/$(MODULES_FILE).$(CONFIG_XARCH) 
	@ updating=false; \
	  if [ -f $@ -a -f $< -a $< -nt $@ ]; \
	  then \
	    if [ -f $@.md5 ] && $(MD5SUM) $@ | cmp -s - $@.md5; \
	    then \
	      echo "\"$@\" is unchanged -- updating from \"$<\""; \
	      rm -f $@ $@.md5; \
	      updating=true; \
	    else \
	      echo "\"$<\" is newer, but \"$@\" is changed -- please update or remove \"$@\""; \
	      exit 1; \
	    fi; \
	  fi; \
	  if [ ! -f $@ ]; \
	  then \
	    $$updating || \
	      echo "No user-specific modules file found -- trying \"$<\""; \
	    cp $< $@; \
	    $(MD5SUM) $@ > $@.md5.new && cp $@.md5.new $@.md5; \
	  fi
# Modules.md5 must not be an extra make target.  We must create the
# checksum file at the instant we copy Modules from Modules.<arch>,
# and this invariant cannot be ensured with an extra make target.

$(srcdir)/$(MODULES_FILE).$(CONFIG_XARCH):

include $(MODULES_FILE)
ifdef SUBSYSTEMS
 _modules_read_ = true
endif

ifdef _modules_read_
GENERATED_MODULES = $(foreach subsys, $(SUBSYSTEMS), \
		      $(INTERFACES_$(subsys)))

$(foreach m, $(GENERATED_MODULES), auto/stamp-$(m).ready): $(MODULES_FILE)

.PRECIOUS: .Modules.deps
.Modules.deps: $(MODULES_FILE) globalconfig.out
	@mkdir -p auto
	@echo "Creating $@"
	@($(foreach mod, $(GENERATED_MODULES), \
	    echo 'auto/stamp-$(mod).ready: \
		  $(addsuffix .cpp, $(if $($(mod)_IMPL), $($(mod)_IMPL), \
							 $(mod)))'; \
	    echo '$(patsubst %, auto/%.cc, \
		    $(if $($(mod)_IMPL), $($(mod)_IMPL), $(mod))): \
		  auto/stamp-$(mod).ready ; \
	          @[ -e $$@ ] || { rm -f $$<; $$(MAKE) $$<; }'; \
	    $(foreach impl, $(if $($(mod)_IMPL), $($(mod)_IMPL), $(mod)), \
	      echo '$(patsubst %, .%.cc.d, $(impl)): \
	            $(patsubst %, auto/%.cc, $(impl))';) \
	  )) > $@.new
	@($(foreach subsys, $(SUBSYSTEMS), \
	    echo 'IFDEPS += $(addprefix ., $(addsuffix .cc.d, \
					$(foreach in,$(INTERFACES_$(subsys)), \
					  $(if $($(in)_IMPL), $($(in)_IMPL), \
							      $(in)))))' ; \
	    echo 'CXXSRC_$(subsys) += $(addsuffix .cc, \
					$(foreach in,$(INTERFACES_$(subsys)), \
					  $(if $($(in)_IMPL), $($(in)_IMPL), \
							      $(in))))' ; \
	    echo 'OBJ_$(subsys) += $$(CXXSRC_$(subsys):.cc=.o) \
		                   $$(CSRC_$(subsys):.c=.o) \
		                   $$(ASSRC_$(subsys):.S=.o)' ; ) ) >> $@.new
	@echo "_modules_deps_read_ = true" >> $@.new
	@mv $@.new $@
# Avoid attempts to update other Makefile fragments -- restart cleanly
	$(MAKE) $(MAKECMDGOALS)

include .Modules.deps
endif # _modules_read_

ifdef _modules_deps_read_

# If building in a separate srcdir, prepend it to module-provided include paths
ifneq ($(srcdir),.)
VPATH 		:= $(addprefix $(srcdir)/, $(VPATH))
PRIVATE_INCDIR	:= $(addprefix $(srcdir)/, $(PRIVATE_INCDIR))
endif

# Finally add the current directory and the preprocessor directory
VPATH 		+= . auto
PRIVATE_INCDIR	+= . auto

# Compute sets of sources.  From these variables, Makeconf computes 
# $(DEPS), $(SRC_ALL), and $(OBJS).
SRC_S = $(foreach subsys, $(SUBSYSTEMS), $(ASSRC_$(subsys)))
SRC_C = $(foreach subsys, $(SUBSYSTEMS), $(CSRC_$(subsys)))
SRC_CC = $(foreach subsys, $(SUBSYSTEMS), $(CXXSRC_$(subsys)))

#
# End of configuration settings -- rules follow
#

%.o:    %.S
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(ASFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.S.d)

#
# special: build certain sources without profiling flags
#
NOPROFILE_C =  $(filter $(addsuffix .c,  $(NOPROFILE)), $(SRC_C))
NOPROFILE_CC = $(filter $(addsuffix .cc, $(NOPROFILE)), $(SRC_CC))
NOOPT_C =      $(filter $(addsuffix .c,  $(NOOPT)),     $(SRC_C))
NOOPT_CC =     $(filter $(addsuffix .cc, $(NOOPT)),     $(SRC_CC))

$(NOPROFILE_CC:.cc=.o) : %.o: %.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CXX) -c -MD $(CPPFLAGS) $(CXXFLAGS) $(OPT_CXXFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.cc.d)

$(NOPROFILE_C:.c=.o) : %.o: %.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(CFLAGS) $(OPT_CFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.c.d)

$(NOOPT_CC:.cc=.o) : %.o: %.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CXX) -c -MD $(CPPFLAGS) $(CXXFLAGS) -Os $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.cc.d)

$(NOOPT_C:.c=.o) : %.o: %.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(CFLAGS) -Os $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $*.d, .$*.c.d)

#
# Subsystem-specific rules and targets
#
ALL = $(foreach subsys, $(SUBSYSTEMS), $($(subsys)) $($(subsys)_EXTRA))


ifeq ("$(CONFIG_MAINTAINER_MODE)","y")
do-all: Checkinitcalls Circular-ok $(ALL)
else
do-all: $(ALL)
endif

Checkinitcalls: kernel.image $(OBJ_KERNEL)
	$(VERBOSE)$(srcdir)/../tool/checkinitcalls -k kernel.image \
	  -Werror $(filter-out kernel.image, $^) && \
	echo "Initcalls OK"

doc: docs/stamp-doc.ready

docs/stamp-doc.ready: $(foreach m, $(GENERATED_MODULES), auto/stamp-$(m).ready )
	@mkdir -p docs
	@touch $@
	@doxygen $(srcdir)/doxygen.conf

include $(foreach subsys, $(SUBSYSTEMS), $(srcdir)/Makerules.$(subsys))

#
# Auto-created source files
#

.PRECIOUS: auto/stamp-%.ready

# Basename of implementation files = Basename of first .cpp file
impl_name = $(basename $(firstword $(subst -, ,\
              $(firstword $(filter %.cpp, $(notdir $(1)))))))

$(foreach m, $(GENERATED_MODULES), auto/stamp-$(m).ready ): \
auto/stamp-%.ready:
ifneq ($(VERBOSE),)
	@echo "  ... Preprocessing $^"
endif
	@test -e auto || mkdir auto
	$(VERBOSE)$(PREPROCESS) $(PREPROCESS_FLAGS) -p auto/new_ \
	  -h $* -c $(call impl_name,$^) $(filter %.cpp, $^)
	@for i in $*.h $(call impl_name,$^)_i.h \
	    $(patsubst %.cpp, %.cc, $(filter %.cpp, $(notdir $^))); \
	  do \
	    $(MOVE_IF_CHANGE) auto/new_$$i auto/$$i || exit 1; \
	  done
	$(VERBOSE)touch $@

.PRECIOUS: %.cc %.h %_i.h


###

# Make function "makedeps":  Creates (on stdout) a list of Make-like
# dependencies in a format suitable for $(SHOWDEPS).  Expects a list
# of source (BASE-suffix.{cpp,cc,c}, BASE[_i].h) files as input and extracts
# include directives from them.  Dependecies contain only basenames of
# files (up to the first "-").  Suffixes and extensions are stripped.
makedeps= implname () { echo $$1 | sed 's|.*/||; s|_i\.h|.h|; s|[.-].*||;'; };\
	  for i in $(1); \
	  do \
	    echo $$(implname $$i): $$(perl -n -e \
              '/^\s*\#include\s+["<](.*).h[">]/ && print "$$1 "; next;' \
              $$i); \
	  done 

DEPS:	$(SRC_ALL) $(foreach idir, $(PRIVATE_INCDIR), $(wildcard $(idir)/*.h))
	$(call makedeps, $^) | $(SHOWDEPS) > $@.new
	mv $@.new $@

# Graphical version of DEPS dependency graph.

# XXX DEPS.{dot,ps} only contain dependency graphs for the KERNEL and
# LIBK subsystem.  Also, we remove a number of top-level and low-level
# modules from the resulting graph to reduce the overwhelming number
# of edges; however, `gendotdeps' ensures that modules participating
# in circular dependencies are never removed.

GENDOT_FLAGS ?= -t1u1

KERNEL_MODULES_CPP = $(foreach mod, $(INTERFACES_KERNEL) $(INTERFACES_LIBK), \
	$(if $($(mod)_IMPL), \
	  $(addsuffix .cpp, $($(mod)_IMPL)), $(mod).cpp )) \
	$(foreach idir, $(srcdir)/kern $(srcdir)/kern/shared \
	                $(srcdir)/kern/$(CONFIG_XARCH), \
	  $(wildcard $(idir)/*.h))

DEPS.dot: $(KERNEL_MODULES_CPP)
	@echo -n > source_files.mkdeps
	@for f in $^ ; do \
	  echo $$f >> source_files.mkdeps ; \
	done
	$(srcdir)/../tool/gendotdeps $(addprefix -I,$(PRIVATE_INCDIR)) $(GENDOT_FLAGS) \
	  -v -b $(srcdir)/DEPS.blacklist source_files.mkdeps -o $@ || rm -f $@
	@rm -f source_files.mkdeps

%.ps:	%.dot
	dot -Tps -Gmclimit=200.0 -Gnslimit=500.0 \
	  -Gsize=11,10 -Grotate=90 -o $@ $<

%.a4.ps: %.dot
	dot -Tps -Gmclimit=200.0 -Gnslimit=500.0 \
	  -Gsize="11,8" -Granksep=0.7 -Grotate=90 -o $@ $<

%.tred.ps: %.dot
	tred $< | dot -Tps -Gmclimit=200.0 -Gnslimit=500.0 \
	  -Gsize="11,8" -Granksep=0.7 -Grotate=90 -o $@ 


###

# Circular should really be dependent on $(DEPS). However, we cannot
# enforce that all $(DEPS) are made before this target, because the
# Makefile contains "-include $(DEPS)" (which can result in Circular
# being created/updated before all $(DEPS) are).  Therefore, depend on
# object files.  Once these are made, we know all $(DEPS) have been
# updated.
Circular:	$(foreach subsys, $(SUBSYSTEMS), $(OBJ_$(subsys)))
	@echo "Creating $@"
	@( \
	  echo 'Do "make DEPS" for full fine-grained dependency information.';\
	  for i in $(DEPS); \
	  do \
	    $(PREPROCESSDEPS) $$i; \
	  done | $(SHOWDEPS) | $(CIRCULAR) \
	) > $@.new
	mv $@.new $@

# Create a Circular.max file for the first time.  Usually this target
# is not needed -- there should be a Circular.max file in the CVS.
$(srcdir)/Circular.max.$(CONFIG_XARCH): 
# Circular is not in the dependencies because we do not want a new
# copy of Circular.max every time Circular changes.  We nevertheless
# need it to so the copy -- so create it explicitly
	$(MAKE) Circular
	cp Circular $@

# Check that the number of circular dependency has not increased in
# this build.
.PHONY: Circular-ok
Circular-ok: $(srcdir)/Circular.max.$(CONFIG_XARCH) Circular
# Circular.max.* must be the first dependency:  We are going to
# reference it as $<.
	@ max=$$(tail -1 $<); \
	  current=$$(tail -1 Circular); \
	  if [ $$current -gt $$max ]; \
	  then \
	    echo "Number of circular dependencies increased!"; \
	    diff -up $< Circular; \
	    exit 1; \
	  fi; \
	  echo "Circular-dependency check OK ($$current <= $$max)"

ifeq ($(filter clean cleanall mrproper auto,$(MAKECMDGOALS)),)

-include $(IFDEPS)
-include $(filter-out $(IFDEPS), $(DEPS))

do-all: $(IFDEPS)

endif # make clean

else  # ! _modules_deps_read_

do-all: 

endif # ! _modules_deps_read_

###

.PHONY: TAGS clean cleanall \
	$(foreach subsys, $(SUBSYSTEMS), clean-$(subsys)) \
	$(foreach subsys, $(SUBSYSTEMS), cleanall-$(subsys))
TAGS:
# Find directories for source and header files.  There may be
# duplicates, so weed out the list using a tiny Perl script.
	find $(shell perl -e '					   \
		%seen = ();					   \
		foreach $$i (@ARGV) {				   \
		    next if defined $$seen{$$i};		   \
		    $$seen{$$i} = 1;				   \
		    print "$$i ";				   \
		}' $(filter-out auto, $(VPATH) $(PRIVATE_INCDIR))) \
	  -maxdepth 1 -type f -name '*.cpp' -o -name '*.h' 	   \
	  -o -name '*.cc' -o -name '*.c' 			   \
	  | etags --members --language=c++ -


###

#
# Implicit rules
#

.PHONY: FORCE

%.o:	%.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CXX) -c -MD $(CPPFLAGS) $(CXXFLAGS) $(PROF_FLAGS) $(OPT_CXXFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).cc.d)

%.o:	%.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $(CFLAGS) $(PROF_FLAGS) $(OPT_CFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).c.d)

%.o:	%.S
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -c -MD $(CPPFLAGS) $< -o $@
	$(DEPEND_VERBOSE)$(call DEPEND_EXTEND_FUNC, $(*F).d, $(dir $*).$(*F).S.d)

%:	%.o 
	$(LINK_MESSAGE)
	$(VERBOSE)$(LD) $(LDFLAGS) -o $@ crt0.o $<

%.E:	%.S
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -E $(CPPFLAGS) $(CFLAGS) $< -o $@

%.E:	%.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -E $(CPPFLAGS) $(CFLAGS) $< -o $@

%.E:	%.cc
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -E $(CPPFLAGS) $(CXXFLAGS) $< -o $@

%.S:	%.c
	$(COMP_MESSAGE)
	$(VERBOSE)$(CC) -S $(CFLAGS) $(CPPFLAGS) $< -o $@

