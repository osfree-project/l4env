# -*- Makefile -*-
#
# DROPS (Dresden Realtime OPerating System) Component
#
# Makefile-Template to run tests with Fiasco-UX
#
# install.inc is used, see there for further documentation

ifeq ($(origin _L4DIR_MK_RUNUX_MK),undefined)
_L4DIR_MK_RUNUX_MK=y

ROLE = runux.mk
.general.d:	$(L4DIR)/mk/runux.mk

include $(L4DIR)/mk/Makeconf
# set a mode, so binary.inc is satisfied
MODE	?= l4env
include $(L4DIR)/mk/binary.inc

# if we have a system set, build
ifneq ($(SYSTEM),)

##
# !WARNING!
#
# This is a preliminary test to allow l4check to run Fiasco-UX tests for
# multiple SYSTEMS. This currently only works for x86.
ifneq ($(ARCH),x86)
$(error "$(ROLE) currently does not support $(ARCH).")
endif

# now check if the current API has a FIASCOUX variable set and if so use it
# XXX could be overloaded by $(OSYSTEM) == $(ARCH)-$(L4API) or $(SYSTEM)
ifneq ($(FIASCOUX_$(L4API)),)
FIASCOUX = $(FIASCOUX_$(L4API))
else
$(warning "Using generic(?) Fiasco UX "$(FIASCOUX)" to test $(L4API).")
endif

# the testapplication
# test if variables are set
ifeq ($(TEST_SERVER),)
$(error "No server set in TEST_SERVER.")
endif
# TEST_CLIENT might be empty. Testing server stand-alone
ifneq ($(TEST_CLIENT),)
TEST_CLIENT_PARAM = $(addprefix -c ,$(TEST_CLIENT))
endif
ifneq ($(BASE_SERVERS),)
BASESERVERS	= $(addprefix -b,$(BASE_SERVERS))
endif

# expected output and what to do on mismatch
EXPECTED_OUT	?= expected.txt
TIMEOUT		?= 10
DEBUG_PERL	?= 0
TMP_OUT		?= tmp_out.txt

# specify files to delete when doing 'make clean'
DEL_ON_CLEAN	= $(TMP_OUT) core

ifneq ($(DEBUG_PERL),0)
DEBUG_PERL	= -v
else
DEBUG_PERL	=
endif

# only turn on roottask if configured to do so
ifeq ($(ARCH),x86)
 ifeq ($(USE_ROOTTASK_X86),y)
  RT_PARAM	= --roottask
 else
  RT_PARAM	=
 endif
else
 RT_PARAM	= --roottask
endif

all:: ptest

# install.inc eventually defines rules for every target
include $(L4DIR)/mk/install.inc

ptest:: $(EXPECTED_OUT)
	$(VERBOSE)echo "Running Fiasco UX to test $(TEST_SERVER)"
	$(VERBOSE)EXPECTED_OUT=$(EXPECTED_OUT) PKGNAME=$(PKGNAME) \
		L4DIR=$(L4DIR) TMP_OUT=$(TMP_OUT) \
		$(L4DIR)/mk/ptest -s $(TEST_SERVER) $(TEST_CLIENT_PARAM) \
		-f $(FIASCOUX) -t $(TIMEOUT) $(RT_PARAM) -O OBJ-$(SYSTEM) \
		$(BASESERVERS) $(DEBUG_PERL)

genexp:: $(EXPECTED_OUT)

$(EXPECTED_OUT):
	$(VERBOSE)echo "Running Fiasco UX to generate expected output"
	$(VERBOSE)EXPECTED_OUT=$(EXPECTED_OUT) PKGNAME=$(PKGNAME) \
		L4DIR=$(L4DIR) TMP_OUT=$(TMP_OUT) \
		$(L4DIR)/mk/ptest -s $(TEST_SERVER) $(TEST_CLIENT_PARAM) \
		-f $(FIASCOUX) -t $(TIMEOUT) $(RT_PARAM) -O OBJ-$(SYSTEM) \
		$(BASESERVERS) $(DEBUG_PERL) --generate
	  $(VERBOSE)touch .expect-autogenerated

endif # system defined

.PHONY: all test genexp clean cleanall help
-include $(DEPSVAR)

help::
	@echo "Specify a target:"
	@echo "all       - run test"
	@echo "test      - run test"
	@echo "genexp    - generate file with expected output"
	@echo "clean     - delete generated intermediate files"
	@echo "cleanall  - delete all generated files (include genexp target)"
	@echo "help      - this help"
	@echo

endif	# _L4DIR_MK_RUNUX_MK undefined
