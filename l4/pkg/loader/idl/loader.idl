/* $Id$ */
/*!
 * \file	loader/idl/loader.idl
 * \brief	Loader interface
 * 
 * \date	06/10/2001
 * \author	Frank Mehnert <fm3@os.inf.tu-dresden.de> */

/* (c) 2003-2007 Technische Universitaet Dresden
 * This file is part of DROPS, which is distributed under the terms of the
 * GNU General Public License 2. Please see the COPYING file for details. */

import <l4/sys/types.h>
import <l4/dm_generic/types.h>

typedef long envpage_t[563];

/** L4 namespace. */
library l4loader
{
  const int MAX_TASK_ID = 16;

  /** IDL Interface for the loader module. */
  interface app
    {
      /**
       * Load application(s) using a config script or by path name. If
       * img_ds != L4DM_INVALID_DATASPACE then use the dataspace as
       * binary/script else get the binary/script from the file provider
       * denoted by fprov.
       * 
       * The loader interpretes the script and executes the included
       * commands. See \ref p_script for a description of the script syntax.
       * If the file can be interpreted by the exec layer it is started
       * directly. If not, it is interpreted as a config script.
       *
       * \anchor idl_open
       *
       * \param img_ds		Dataspace containing the script or binary.
       * 			If this parameter is L4DM_INVALID_DATASPACE
       * 			request file fname from file provider frov.
       * \param fname		File name. If img_ds is used this parameter
       * 			is only used for debugging.
       * \param fprov		id of default file provider.
       * \param flags		flags, set to
       * 			 #L4LOADER_STOP if the load process should
       * 			 stop just before the task is really started.
       * 			 Use cont() to complete the load process.
       * \retval task_ids	Task identifiers of started tasks. The
       *			maximum number of entries is MAX_TASK_ID. 
       *			The first unused entry of that array 
       *			contains L4_INVALID_ID.
       * \retval error_msg	Error message (helps debugging)
       * \return		0 on success */
      long open([in] l4dm_dataspace_t img_ds,
		[in, string] char* fname,
	     	[in] l4_threadid_t fprov,
     		[in] unsigned long flags,
		[out, max_is(MAX_TASK_ID)] l4_taskid_t task_ids[],
		[out, string, prealloc_client] char** error_msg);

      /** Continue task which was not completely started.
       *
       * \param taskid		ID of the task to continue. */
      long cont([in] l4_taskid_t taskid);

      /** Kill task. 
       * 
       * The task must have been loaded by the Loader. This function
       * is called by the event listener thread and must not called by
       * any other thread.
       *
       * \param task_id	id of task to terminate
       * \param flags		flags
       * \return		0 on success */
      long kill([in] l4_taskid_t task_id, [in] unsigned long flags);

      /** Dump task info
       *
       * Print out task info for the task to L4 debugging console.
       * Only useful for debugging purposes.
       *
       * \param task_id		id of task to dump
       * \param flags		flags
       * \return		0 on success */
      long dump([in] unsigned long task_id, [in] unsigned long flags);

      /** Get task info.
       * 
       * Return an L4 infopage for the specified task.
       *
       * \param task_id		id of task to get info from
       * \param flags		flags
       * \retval fname		application name
       * \retval l4env_page	l4env_infopage of process
       * \return		0 on success */
      long info([in] unsigned long task_id, [in] unsigned long flags,
	        [out, string, prealloc_client] char** fname, 
		[out] l4dm_dataspace_t *l4env_page);
    };
};

