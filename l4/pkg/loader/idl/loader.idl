/* $Id$ */
/*!
 * \file	loader/idl/loader.idl
 * \brief	Loader interface
 * 
 * \date	06/10/2001
 * \author	Frank Mehnert <fm3@os.inf.tu-dresden.de> */

/* (c) 2003 Technische Universitaet Dresden
 * This file is part of DROPS, which is distributed under the terms of the
 * GNU General Public License 2. Please see the COPYING file for details. */

import <l4/sys/types.h>
import <l4/dm_generic/types.h>

/** l4 namespace */
library l4loader
{
  /** IDL Interface for the loader module. */
  interface app
    {
      /** \anchor idl_open
       * Load application(s) using a config script or by path name.
       * 
       * The loader interpretes the script and executes the included
       * commands. See \ref p_script for a description of the script syntax.
       * If the file can be interpreted by the exec layer it is started
       * directly. If not, it is interpreted as a config script.
       *
       * \param fname		file name to load or file name of script
       * \param fprov		id of file provider to use
       * \param flags		flags (currently unused)
       * \retval error_msg	error message (helps debugging)
       * \return		0 on success */
      long open([in, string] char* fname, 
		[in] l4_threadid_t fprov,
		[in] unsigned long flags, 
		[out, string, prealloc] char** error_msg);

      /** Kill task. 
       * 
       * The task must have been loaded by the Loader. The
       * L4 task will be killed and all resources which are occupied inside
       * loader, names, l4exec, dm_phys and rmgr will be released. This
       * mechanism will change in future versions of the L4 environment.
       *
       * \param task_id	id of task to terminate
       * \param flags		flags
       * \return		0 on success */
      long kill([in] unsigned long task_id, [in] unsigned long flags);

      /** Dump task info
       *
       * Print out task info for the task to L4 debugging console.
       * Only useful for debugging purposes.
       *
       * \param task_id		id of task to dump
       * \param flags		flags
       * \return		0 on success */
      long dump([in] unsigned long task_id, [in] unsigned long flags);

      /** Get task info.
       * 
       * Return an L4 infopage for the specified task.
       *
       * \param task_id	id of task to get info from
       * \param flags		flags
       * \retval fname		application name
       * \retval l4env_page	l4env_infopage of process
       * \return		0 on success */
      long info([in] unsigned long task_id, [in] unsigned long flags,
	        [out, string, init_with_in] char** fname, 
		[out] l4dm_dataspace_t *l4env_page);
    };
};

