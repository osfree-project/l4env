/*! file doc/general1.dox
 *
 * \brief Mainpage
 */

/*!\mainpage L4 loader - internals

\section p_intro Loader-style applications

This is the reference manual for the L4 Loader. For information on how to
use the loader please see the 
<a href=../../loader/html/>L4 Loader User Manual</a>.

The L4 Loader distinguishes between Loader-style L4 tasks and "normal" static 
linked L4 applications. Applications linked against the libraries \b libld-l4.s.so
and \b libloader.s.so are denoted as Loader-style applications. The libld-l4.s.so contains 
an ELF binary interpreter, the libloader.s.so contains interfaces to several servers 
of the L4 environment and also some basic libraries:
- interfaces to \c names, \c log, \c loader,  \c rmgr, \c dm_generic, 
  \c dm_mem, \c dm_phys, \c generic_ts and \c con
- the \c thread library
- the region manager \c l4rm
- the \c slab allocator
- the \c l4env_err library

By using a separate library for these services it is possible to initialize
the region manager independent from the application. Therefore it is possible
to page the program regions by the region manager. Though the region manager
itself has to be paged by an external pager. While this functionality is
covered by the loader, the pager will be separated to an extra server in the
future.

To build that library you have to configure your L4 environment accordingly, 
whereby this feature is enabled by default.

\section p_new_style_init Initialization of Loader-style applications

Loading of applications is performed in several steps:
-# An L4 task id is allocated at the task server.
-# The Loader prepares an application specific L4Env infopage and maps some
   trampoline code into the new tasks address space, which later puts the 
   addresses of the multiboot and L4Env infopage into some registers.
-# The L4 Loader loads the libld-l4.s.so interpreter into the new address 
   space.
-# All program sections are shared with the application.
-# The L4 task is started by the task server and executes the trampoline code.
   the libld-l4.s.so interpreter arranges the address space according to the 
   ELF binary arrangement. After that the entry point provided by libloader.s.so
   \c l4loader_init() is called.
-# The region manager of the new application provided by libloader.s.so
   is initialized and relocates all not relocated program sections.
-# Then the library initializes the remaining modules of the L4 environment 
   (mainly \c thread and \c semaphore).
-# The application is finally started either by calling \c multiboot_main() or
   \c main() (the first has precedence).
   
*/


/** \page p_doc About this documentation

This documentation was created using Doxygen, a source-code documentation
system.

\par Requires:
libld-l4.s.so, roottask, names, l4util, l4sys, L4 environment
\author		Frank Mehnert, Stefan Kalkowski
*/

