/*! file doc/loader.dox
 *
 * \brief Mainpage
 */

/*!
  \mainpage L4 Loader User Manual
 
\section p_intro Overview

The L4 loader can be used to start L4 applications at runtime. 
Applications can use services of shared libraries which are loaded together 
with the executables. The Loader distinguishes between native, static-linked 
L4 tasks and Loader-style L4 tasks, which depend on the shared library 
\b libloader.s.so, containing the L4Env runtime library.

  The advantages of using the Loader mode are:
  -# The runtime library and therefore the region manager itself is
     relocatable.
  -# The program's pager has to page only the runtime library. All other 
     program sections are paged by the region manager of the runtime library.
  -# The program gets the \e L4Env \e infopage passed. This contains
     some system information, the default dataspace manager,
     default stack sizes and the default file provider. These parameters 
     and therefore the behavior of the application can be changed by the
     loader.

\section p_usage Usage

The loader application itself has to be loaded by the \e GRUB \e bootloader
and started by the \c roottask. It depends on functionalities of the DROPS servers
(see \ref p_example "example"):
- \c roottask (resource manager)
- \c names (name server)
- \c log (log server)
- \c dm_phys (dataspace manager)
- \c simple_ts (task server)

An L4 task is started either directly by specifying the filename or by
using a \ref p_script "Loader config script". The latter method allows to
pass additional constraints. All file I/O is done using a file manager
which has to specified when opening the file.

The script or filename can be sent to the Loader either by using the
L<sup>4</sup>Linux utility \ref r_run_l4 "run-l4" or by using the
L4 program \c run.

\section p_example Examples

There are two examples:
 -# A \ref p_hello_page "simple example" starting hello.
 -# An \ref p_tut_page "advanced tutorial" on how to boot L<sup>4</sup>Linux
    and start the \c launchpad application
    parallel to L<sup>4</sup>Linux.

*/

/*!
\page p_hello_page Example: Starting Hello

The easiest way to start an L4 application using the L4 loader is to
pass the name of the executable as command line argument to the loader:

\verbatim
 # menu.lst

 set ND       = "(nd)/tftpboot/drops"
 set BIN_PATH = "$(ND)/bin"

 title Hello World
 kernel $(BIN_PATH)/bootstrap
 modaddr 0x02000000
 module $(BIN_PATH)/fiasco -nokdb -serial -serial_esc
 module $(BIN_PATH)/l4v2/sigma0
 module $(BIN_PATH)/l4v2/roottask
 module $(BIN_PATH)/l4v2/names
 module $(BIN_PATH)/l4v2/log
 module $(BIN_PATH)/l4v2/dm_phys
 module $(BIN_PATH)/l4v2/simple_ts
 module $(BIN_PATH)/l4v2/tftp --server=192.168.0.2 
 module $(BIN_PATH)/l4v2/loader $(BIN_PATH)/l4v2/hello
\endverbatim

\note The default file provider the loader communicates with is tftp. This
server accepts filenames in the GRUB syntax. Therefore, you must prepend
\c "(nd)/". The binary must be accessable by the TFTP protocol (e.g. the
binaries must be readable by world).

*/

/*!
\page p_tut_page Tutorial: Loading L4Linux 2.6

To explain how to use the L4 loader, we will analyse here a more practical
scenario. We will start L<sup>4</sup>Linux as development environment. Once L<sup>4</sup>Linux is
up we can start L4 tasks using the Linux utilities \ref r_run_l4 "run-l4".

\ref p_tut_1

\ref p_tut_2

\ref p_tut_3

\ref p_tut_4
*/

/*! \page p_tut_1 Step 1: Start L4Linux 2.6

We have to take some special care when loading L<sup>4</sup>Linux because this
application has special memory requirements. There should be at least 16 MB of
memory available (more memory is recommended, also it depends on whether you 
use a ramdisk or harddisk containing the root-filesystem).

Here is the GRUB \c menu.lst entry assuming that GRUB loads the binaries via
network:

\verbatim
 # menu.lst

 set ND       = "(nd)/tftpboot/drops"
 set BIN_PATH = "$(ND)/bin"

 title Fiasco + Loader + L4Linux
 kernel $(BIN_PATH)/bootstrap
 modaddr 0x02000000
 module $(BIN_PATH)/fiasco -nokdb -serial -serial_esc
 module $(BIN_PATH)/l4v2/sigma0
 module $(BIN_PATH)/l4v2/roottask
 module $(BIN_PATH)/l4v2/names
 module $(BIN_PATH)/l4v2/log
 module $(BIN_PATH)/l4v2/dm_phys
 module $(BIN_PATH)/l4v2/simple_ts
 module $(BIN_PATH)/l4v2/l4io
 module $(BIN_PATH)/l4v2/l4dope --l4io
 module $(BIN_PATH)/l4v2/tftp --l4io --server=192.168.0.2
 module $(BIN_PATH)/l4v2/loader $(ND)/cfg/l4linux.conf
 vbeset 0x117
\endverbatim

And here is the Loader \e config script for loading L<sup>4</sup>Linux assuming,
that L<sup>4</sup>Linux starts in a ramdisk and is configured to use \c l4io (omega0 protocol)
for requesting irqs:
\verbatim
 # cfg/l4linux.conf

 verbose 0
 modpath "(nd)/tftpboot/drops/bin/l4v2"

 task "vmlinuz26" "mem=64M load_ramdisk=1 ramdisk_size=16384 root=/dev/ram l4env_rd=(nd)/tftpboot/drops/rd/drops-rd.rd"
     all_sects_writable
\endverbatim

\note The \b vbeset command switches into graphic mode after loading
all L4 boot modules.

\note L<sup>4</sup>Linux has to be compiled with the L<sup>4</sup>Linux option 
<i>"Framebuffer driver for l4con and DOpE"</i> (CONFIG_L4_FB_DRIVER=y).

\note The default file provider the loader communicates with is tftp. This
server accepts filenames in the GRUB syntax. Therefore you must prepend
\c "(nd)/". The binary must be accessable by the TFTP protocol (e.g. the
binaries must be readable by world).

<br>
\ref p_tut_2
*/

/*! \page p_tut_2 Step 2: Start the launchpad from L4Linux

Now, the L<sup>4</sup>Linux environment should be available and we can login. 
Then we can start L4 tasks using the \b run-l4 Linux program:

\verbatim
run-l4 --fprov "TFTP" "(nd)/tftpboot/drops/cfg/launch.conf"
\endverbatim

Launchpad Loader \e config script:
\verbatim
 # cfg/launch.conf

 verbose 0
 modpath "(nd)/tftpboot/drops/bin/l4v2"

 task "launchpad" "-a (nd)/tftpboot/drops/bin/l4v2/vscrtest \
                   -a (nd)/tftpboot/drops/bin/l4v2/dopecmd \
                   -a (nd)/tftpboot/drops/bin/l4v2/yuvtest \
                   -a (nd)/tftpboot/drops/bin/l4v2/vtexttest"
\endverbatim

\note Of course, we have to place the run-l4 binary within the ramdisk.

\note The "-a" option specifies an application entry the launchpad should
provide. Optionally, we could use another file-provider by specifying the "-f"
argument.

\ref p_tut_3
*/

/*! \page p_tut_3 Step 3: Dump program sections of L4 task
Lets determine which L4 tasks we have started on the target machine. To
do this, we start an L<sup>4</sup>Linux task which retrieves the
information from the loader:
\verbatim
dump-l4 0
\endverbatim


We get the following (or similar) output:
\verbatim
Task "vmlinuz26", #d
	 ds  54: 00001000-00002000 rwx
	 ds  55: 00400000-00579000 rwx
	 ds  56: 00579000-00591000 rw-
	 ds  57: 00592000-005b5000 rwx
	 ds  58: 005b6000-00618000 rw-
	 ds  61: 00010000-0002c000 rwx
	 ds  62: 0002c000-0002e000 rw-
	 ds  -1: a0000000-a8000000 ---
Task "launchpad", #17
	 ds 139: 00a80000-00a98000 r-x
	 ds 140: 00a98000-00ac6000 rw-
\endverbatim

\ref p_tut_4
*/

/*! \page p_tut_4 Step 4: Dump memory usage of L4 tasks
There is also an L<sup>4</sup>Linux task which dumps the memory map of
the \b simple_dm dataspace manager:

\verbatim
./dump-ds 0
\endverbatim

\note The \b "0" argument of dump-ds means to dump the dataspaces
of all tasks. Alternate, we could request memory information about
a specific L4 task by passing it's task number.

We get the following (or similar) output:

\verbatim
  148: size=00001000 (       4KB,    0MB) owner= 16.00 name="l4loader_info ds"
  147: size=00001000 (       4KB,    0MB) owner= 17.03 name="libc heap"
  146: size=00010000 (      64KB,    0MB) owner= 17.03 name="L4thread stack"
  145: size=00010000 (      64KB,    0MB) owner= 17.02 name="libc heap"
  
  ...

===========================================================
 total size 04983000 (   75276KB,    0MB)
\endverbatim

*/

/*! \page p_script The Loader Script

\anchor p_script

\section s_misc General Control Commands.
\par verbose <0|1>
Set verbose level of config file scanner.

\par fiasco_symbols <0|1>
<i>Fiasco extension</i><br>
Try to load the symbols of the ELF binary into the Fiasco kernel debugger.

\par fiasco_lines <0|1>
<i>Fiasco extension</i><br>
Try to load the ELF line information into the Fiasco kernel debugger.

\par memdump
Let \c roottask dump information about memory usage.

\par sleep <time_spec>
Do nothing for a while (useful for demos).


\section s_path Path Declarations
\par modpath "<path>"
Set default search path for modules belonging to a specific L4 task.
It may contain several directories separated by colons.

\par binpath "<path>"
Set default path where to search for binaries. If not set,
the loader searches binaries in the directory described by modpath.

\par libpath "<path>"
Set default path where to search for shared libraries. If this path
is not set, the loader searches shared libraries in the directory which
is described by binpath.


\section s_task_desc Task Description

\par task "\<task_name\>" ["\<task_arguments\>"] [\<task_constraints\>] [\<task_modules\>]
Start the description of an L4 task. <i>\<task_name\></i> is the logical file
name of the binary. It will passed as argv[0] to the task. The string
<i>task_arguments</i> describes the command line to pass to the task as
argv[1-n]. It may be ommitted. The arguments are stored in the task's
multiboot info structure. The file name and the command line has to
be quoted.


\section s_task_modules Passing additional modules to an L4 task.
\par module "\<module_name\>" ["\<module_arguments\>"] [\<memory_location\>]
Specify a module that is loaded and passed to the L4 task.
<i>\<module_name\></i> denotes the logical file name which should be load
using the file provider. If it doesn't contain a directory (that is it
doesn't start with '<i>(</i>' or '<i>/</i>') then it will be searched in all
directories of the <i>modpath</i> (see description of <i>modpath</i> above).
The module name is \b not passed to the module.
<br>
The string <i>\<module arguments\></i> is passed completely as command line to
the module. It may contain one ore more arguments separated by spaces. The
module name and the module arguments has to be quoted.
<br>
A task finds additional modules by looking at her multiboot info structure.
The following information can be find there (see the
\ref struct_l4util_mod_list "grub module info"):
- start address
- end address
- address of command line (corresponds to <i>module_arguments</i>)



\section task_constraints Additional Task Constraints

\par priority
  Define the priority of the first thread of the new task. Default priority
  is 0x10.

\par mcp
  Define the maximum controlled priority of the new task. Default mcp is 0xff.

\par direct_mapped
  All loadable program sections of the binary should be loaded direct
  mapped, that is the virtual and the physical addresses are identical.

\par nosuperpages
  Make sure that the binary is mapped using 4kB pages. Useful for performance
  comparisons.

\par all_sects_writable
  Map all program segments writable to application. Normally this is
  switched off and read-only program segments (e.g., text segment) are
  mapped read-only.

\par no_sigma0
  Don't handle sigma0 requests. This is necessary if a task is linked
  to an address above 1GB (0x40000000) because such an address would be
  interpreted as a request to an adapter page of addr+0x40000000 (see
  sigma0 protocol at L4 reference manual.

\par allow_vga
  Allow the application to map the VGA memory. This option only has an
  effect on the x86 and amd64 architectures. The affected memory region is
  0xA0000 to 0xC0000.

\par allow_bios
  Allow the application to map the BIOS memory. This option only has an
  effect on the x86 and amd64 architectures. The affected memory region is
  0xC0000 to 0x100000.

\par allow_cli
  Permit the task to execute cli/sti. If this flag is not given and the
  user task runs on IOPL 0 (e.g. Fiasco with enabled I/O protection) the
  I/O address space is \b not mapped.

\par ioport '[' \<low_port\> ',' \<high_port\> ']'
  Allow the task to access the specified I/O ports

\par file_provider "<name server ID>"
  Specify a different file provider for the new application.
  Default is "TFTP".

\par ds_manager "<name server ID>"
  Specify a different dataspace manager for the new application.
  Default is "DM_PHYS".

\par memory \<size\> [\<memory_location\>] [ is '[' \<mem_flags\> ']' ]
  Specifies how much memory the application should retrieve by Sigma0 protocol.
  Needed to start L<sup>4</sup>Linux.

\section mem_locatation Memory Location

\par in '[' \<low_address\> ',' \<high_address\> ']'
  The memory must be located in the area from <i>\<low_address\></i> to 
  <i>\<high_address\></i>.

\par at \<address\>
  The memory must be exactly located at <i>\<address\></i>.


\section mem_flags Flags for Memory Regions

\par dmaable
  Ensure that the memory is direct mapped and is located below 16MB.

\par contiguous
  Ensure that the memory is physically contiguous. That does not mean
  that the memory has to be direct mapped.

\par direct_mapped
  Ensure that the memory is direct mapped, that is the physical and the
  virtual addresses are equal.

\par nosuperpages
  Make sure that the memory is mapped using 4kB pages. Useful for performance
  comparisons.

\section integrity Integrity measurement

\par integrity_id \<integrity ID\>
  Specify the ID under which the newly started task should be registered in the
  integrity-measurement database (provided by the external virtual TPM service).
  The ID is specified as the base64 representation of a 20-byte string, for
  example, "MDEyMzQ1Njc4OTEyMzQ1Njc4AAA=".

\par integrity_parent_id \<integrity ID\>
  Specify the ID of the parent task that is registered in the
  integrity-measurement database (provided by the external virtual TPM service).
  The format of the ID is the same as for integrity_id

\par hash_modules
  Specifies that any modules that are passed to the newly started task should
  be measured as well.
  Attention: This requires addional memory, because a copy of the module has to
  be created, as the file provider may not be part of the trusted computing
  base.

*/

/*! \page p_utilities Utilities

\section r_run run
Start an L4 task. This is a small interactive application using a simple
syntax.

\section r_run_l4 run-l4
Start an L4 task from L<sup>4</sup>Linux using the L4 loader.
<br>
\param "<config script>"  script describing special properties of the 
application to start.

This utility is used to start L4 programs from L<sup>4</sup>Linux. The 
\ref p_script "script" is interpreted by the L4 loader.


\section r_kill_l4 kill-l4
Kill an L4 task.
<br>
\param "<l4 task number>" number of the L4 task to kill.

The task to kill must has be previously loaded by the loader.


\section r_fprov_l4 fprov-l4
File provider running on L<sup>4</sup>Linux. This program serves
file requests by reading them from the local Linux file system.
There are no parameters.

\section r_dump_l4 dump-l4
Show L4 tasks which are loaded by the L4 loader.

*/

/*! \page p_libloader Mechanism to load New-Style applications

Loader-Style L4 applications are dynamic linked against the libloader.s.so.
This library consists the basic L4 environment services which are needed 
to start an L4 application:
- the L4 region manager
- the thread library
- the semaphore library
- the name server stub
- the logserver library

When an L4 task is starting, the services (l4rm, l4thread, l4semaphore)
are get initialized and the program sections of the binary and dynamic 
libraries are attached. After all the basic initialization is done, the 
multiboot_main() function is called. If the binary does not provides such 
a function, the main() function is called instead.

*/

/*! \page p_doc About this documentation

This documentation was created using Doxygen, a source-code documentation
system.


\par Requires:
roottask, names, l4util, l4sys, DICE, L4 environment
\author		Frank Mehnert, Stefan Kalkowski
*/

