This is a quick port of parts of the dietLibC to L4/DROPS.

All paths in this document will be relative to the packet's directory
if not otherwise stated.


Current State
=============

As of now there are more backends, providing startup and shutdown
functionality for native and l4env applications.  There are two memory
backends as well.  A major attempt for an io solution is in progress
(l4vfs).  For details have a look into the lib/backends directory.


The Example (out of date)
=========================

To run the example in examples you should setup an entry in your
menu.lst like follows:

  title L4Linux-2.2, vfs_client, ram-disk
  kernel  = (nd)/tftpboot/mp26/l4v2/rmgr -sigma0 task modname "glinux-2.2-v2" module task modname "libc_libstdio_example" boot_priority 20
  modaddr 0x02000000
  module  = (nd)/tftpboot/mp26/kernel/main -nowait -serial -serial_esc -nokdb -comport 2 -esc
  module  = (nd)/tftpboot/mp26/l4v2/sigma0
  module  = (nd)/tftpboot/mp26/l4v2/names
  module  = (nd)/tftpboot/mp26/l4v2/log
  module  = (nd)/tftpboot/mp26/l4v2/dm_phys --mem=0x400000,0x4000000,0x8000000
  module  = (nd)/tftpboot/mp26/l4linux/glinux-2.2-v2 rw load_ramdisk=1 ramdisk_size=16384 no-scroll root=/dev/ram
  module  = (nd)/tftpboot/mp26/ramdisk/drops-os.rd
  module  = (nd)/tftpboot/mp26/l4v2/libc_libstdio_example

After booting up L4Linux log in and start the "l4xvfs_server".  It will
register at "names" and the already waiting example client will be
able to run on and do some file-io.

Note: * You will probable want to adapt the file name in the example
        if you intend to run it ...
      * Note the priority settings above.  They are useful to prevent
        stuff like this:

irq=00 irqs_in_progress=00000800 sender=0008.10
KDB: bh: irqs active
    --bh: irqs active---------------------------------------EIP: 0040a1a6
(8.20) jdb: g


Architecture
============

One of the goals of this port, was to by able to reuse as much as
possible of the dietLibC.  Ideally, the libc would just have to be
recompiled, providing its interface to L4-Programms and using some
kind of emulation environment I will refer to as backends.

I my current imagination I have the plan to implement some backends
for the libc, providing functionality for different demands, like: a
filesystem-like interface (open, read, ...), memory managment
interface (mmap, ...), and others, and link those to the libc.  Each
of these backends may be intended for different situations.  The libc
itself can be compiled independently of the backends.

* For example, one might write a set of simple backends providing the
  basis for the libc usage on a micro-kernel.  Filesystem
  functionality would probably not be necessary in this situation, but
  str* and mem* functions would.

* On the other hand, a set of backends satisfying high level demands,
  such as file-io, network-io, and thread-management functions could
  be based on the l4env and some newly to be developed servers.


Backends
========

The backends should be placed in lib/backends.  Please have a look in
the chapter Current state.

 * micro-kernel: After a recent discussion with Alexander Warg, it
   seems unlikely that the dietLibC port will be the base for future
   versions of the fiasco micro-kernel.  Although there is some code
   that coexists in both the kernel package and the dietLibC package,
   some facts discommend sharing:
    - The kernel should not depend on a user package,
    - The GPL (not LGPL) license of the dietLibC,
    - some parts are already rewritten or come from other sources,
    - more will be replaced with time.

 * For current state have a look at lib/backends.


Modes
=====

Currently supported modes are "l4env_base", "l4env_dietlibc_minimal",
and "sigma0_diet".  All modes can be modified by linking other backend
libraries together.


Building Infrastructure
=======================

The whole package should be located in l4/pkg/dietlibc.  The original
dietLibC lives in lib/contrib/dietlibc, the actual port in
lib/dietlibc.

The Makefile in lib/dietlibc is responsible for creating links to
files not existent in lib/dietlibc but mentioned in
lib/dietlibc/contrib_files.lst.

So, to modify a file for the port you would remove the link, but copy
and modify the file directly.  Than you should add it to the CVS.

If you would just like to add more files to the port, but think that
these need no modification, you should add their names to the file
lib/dietlibc/contrib_files.lst.


FAQ
===

 * How come, my question is not listed here?

   Well, up to now the questions listed here are no real FAQ-questions
   as noone really asked them.  They simply came to my mind.  But of
   course you may send some ...

 * Why did you choose to port the dietLibC and not something better /
   more free / nicer / faster / smaller ...?

   Well, dietLibC is simple enough to be understandable in large
   parts.  It is nicely structured.  It seems to be portable across
   different plattforms (i386, mips, ia64, arm, ...).  We needed a
   fast solution ...

   By the way, I think that the libc part could be exchanged easily
   without the need to rewrite all the backends.

 * Why does the structure in the dietLibC package not completely
   follow BID conventions ?

   There are other concerns too.  One of which is that I want to keep
   the structure of the original contrib directories, as to ease the
   maintenance of the port.

 * How may I help?

   First of all, you may want to use the dietLibC port in your
   package.  Most probably you will find errors and missing
   functionality.  Of course you are welcome to fix the found errors ;-).
   For the missing functionality, you may want to ask me (the
   maintainer), whether a solution for this specific problem is
   already planned and how it would fit in the future plans of this
   port.  If you want to implement the functionality yourself there
   might be two approaches.  The first is to implement a completely new
   backend and the second is to adapt an existing one.

 * I want to use some functionality which is in the dietLibC, but not
   in your port.  How do I proceed?

   There are two ways to add files to this port:
    - The first one is to copy a file from lib/contrib/dietlibc to its
      corresponding directory in lib/dietlibc, modify it as needed,
      and check it in.  This should only be done if _absolutely
      necessary_ as to minimize the modified files.  So upgrades to
      new versions of dietLibC are much easier.
    - The second one is easy.  You just add a new line to
      lib/dietlibc/contrib_files.lst.  At compile time a link to the
      according contrib directory is created and the original file is
      used.  This solution is feasible if no modifications to the file
      are necessary.  If adding new lines to this file, please respect
      the ordering rules (alphabetically, as produced by 'sort', hint,
      hint, ...;-) ).
   Please do never modify files in lib/contrib/dietlibc (except for
   upgrading to new versions, of course).  If you have to modify stuff
   use the first way described above or send a patch to 'Felix von
   Leitner', author of the dietLibC.

 * I'm converting my package to use dietLibC, but it does not
   implement 'panic(...)'.  What should I do? Why?

   'panic(...)' itself does normally not belong to a c library.  It is
   an OSKit-specific extensions, and is declared in 'stdlib.h'.  You
   should check, whether the 'Panic(...)' (Note the capital P)
   function from 'l4/util/macros.h' fits your needs.  If not, please
   give me feedback.  Maybe I will include 'panic(...)' into the
   dietLibC port later, if necessary.

 * Help me, something doesn't compiles / links / ...

   At first, do a 'make cleanall' followed by 'cvs up -d' in the
   PKG-Dir of the dietLibC.  If the problem persists, you might want
   to contact me (see below).

 * I would like to have a config option, which parts of the dietLibC
   to build, because I will use only small parts of the lib.  I don't
   like bloat.

   Up to now, I don't think such an option is necessary, as the linker
   should remove all the unused parts of the dietLibC.  Nearly all
   functions are implemented in distinct files, so that the removal
   will be very finegrained.

   However, this is not true for the backend libs, as some of them use
   constructor functions to initialize something.   So, if you are
   concerned about size, you should only link the necesarry backends.

   If you think your binary contains parts of the dietLibC it should
   not, give me some feedback!

 * I'm writing a simple hello world program with printf() and I don't
   see any output on the screen.  What am I doing wrong?

   At first you should check that you have a backend which supports
   write() to file descriptor 1 (stdout).  Additionally you should
   check, that this file descriptor is open.  You are not working in a
   posix environment which ensures this at program start.  As of now
   you have to open these file descriptors manually.  You might want
   to consult the examples in l4/l4vfs/term_server/examples/.

 * I'm starting my programs with the loader and they simply don't
   startup. Why?

   The problem is, that the name_server must by started via RMGR, as
   its client-lib uses RMGR functions to get the task_id.  Don't start
   the name_server with loader.


Current Stuff
=============

In the recent development I came to the point where some system-wide
config files are accessed from within the libc (e.g. /etc/passwd,
/etc/hosts, ...).  Problem is, that this seems to be the point were we
should break compatibility with Unix/Linux as we currently have no
idea what uids could be in DROPS.

On the other hand things like /etc/hosts are useful for DNS resolving
and therefore somewhat belong to flips.  So we need some kind of
config-file access without fileservers or similar complex stuff.  The
idea is to link some small config files directly to the libc-backend
and route access to them.


Maintainer
==========

Martin Pohlack
mp26@os.inf.tu-dresden.de
