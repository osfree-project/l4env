/* -*- c -*- */
/* $Id$ */
/*!
 * \file	l4con/idl/l4con.idl
 * \brief	con IDL interface
 *
 * \author	Christian Helmuth <ch12@os.inf.tu-dresden.de>,
 * 		Frank Mehnert <fm3@os.inf.tu-dresden.de>
 */

/* (c) 2003 Technische Universitaet Dresden
 * This file is part of DROPS, which is distributed under the terms of the
 * GNU General Public License 2. Please see the COPYING file for details. */

import <l4/dm_generic/types.h>
import <l4/l4con/l4con_pslim.h>

/** Console interface. */
library con
{
  /** Generic console interface (open/close console).
   * \defgroup idl_con_if Console Server Interface */
  [error_function_server(switch_vc_on_timer)]
  interface if
    {
      /** Get and assign first available vc
       * \ingroup idl_con_if
       *
       * \param sbuf1_size	size of string receive buffer
       * \param sbuf2_size, sbuf3_size	size of string receive buffer,
       * 			only sed for pslim_cscs() where the 
       * 			three components are written into
       * 			separate buffers.
       * \param priority	priority of belonging vc thread
       * 			L4THREAD_DEFAULT_PRIO for default prio
       * \param vfbmode		Is it a virtual frame buffer?
       *
       * \retval vcid		thread id of virtual console 
       *			thread
       *
       * \return 0 on success, negative error codes otherwise */
      long openqry([in] unsigned long sbuf1_size,
		   [in] unsigned long sbuf2_size,
		   [in] unsigned long sbuf3_size,
		   [in] byte priority,
		   [out] l4_threadid_t *vcid,
      		   [in] short vfbmode);

      /** Take screenshot of a virtual console.
       * \ingroup idl_con_if
       *
       * \param  vc_nr          Number of console, 0 for current
       *                        foreground console
       * \retval ds             DS which contains the fb data
       * \retval xres           Picture width
       * \retval yres           Picture height
       * \retval bpp            Bits per pixel
       *
       * \return 0 on success, negative error code otherwise */
      long screenshot([in]  short vc_nr,
                      [out] l4dm_dataspace_t *ds,
	              [out] l4_uint32_t *xres,
		      [out] l4_uint32_t *yres,
		      [out] l4_uint32_t *bpp);

      /** Close all vc's of an application.
       * \ingroup idl_con_if
       *
       * \param client		task id of client to close vcs
       *
       * \return 0 on success, negative error codes otherwise */
      long close_all([in] l4_threadid_t client);
    };

  /** virtual console (thread) interface.
   * \defgroup idl_con_vc Virtual Console Interface (with pSLIM)
   */
  [error_function_server(vc_error), 
   init_rcvstring_server(vc_init_rcvstring)]
  interface vc
    {
      /** Set vc IN/OUT mode.
       * \ingroup idl_con_vc
       *
       * \param  mode		con protocol macro describing vc mode:
       *			- \c CON_OUT, \c CON_INOUT
       * \param  ev_handler	thread id of event handler
       *
       * \return 0 on success, negative error codes otherwise */
      long smode([in] byte mode, [in] l4_threadid_t ev_handler);

      /** Get IN/OUT mode.
       * \ingroup idl_con_vc
       *
       * \retval mode		con protocol macro describing vc mode
       * \retval sbuf_1size, sbuf_2size, sbuf_3size size of receive buffers
       *
       * \return 0 on success, negative error codes otherwise */
      long gmode([out] byte *mode, 
		 [out] unsigned long *sbuf_1size,
		 [out] unsigned long *sbuf_2size,
		 [out] unsigned long *sbuf_3size);

      /** Allow client to access the console and map the physical
       *  framebuffer.
       * \ingroup idl_con_vc
       * \param  client         thread ID of client to share */
      long share([in] l4_threadid_t client);

      /** Revoke right to access the console and map the physcial
       *  framebuffer.
       * \ingroup idl_con_vc
       * \param  client         thread ID of client to revoke */
      long revoke([in] l4_threadid_t client);

      /** Close virtual console.
       * \ingroup idl_con_vc
       *
       * \return 0 for success */
      [allow_reply_only]
      long close();
		
      /** Fill rectangular area of virtual framebuffer with color.
       * Make use of hardware support if possible.
       * \ingroup idl_con_vc
       *
       * \param  rect		vfb area info
       * \param  color	fill color
       *
       * \return 0 for success */
      long pslim_fill([in] l4con_pslim_rect_t rect,
		      [in] l4con_pslim_color_t color);

      /** Copy rectangular area of virtual framebuffer. Make use of
       * hardware support if possible.
       * \ingroup idl_con_vc
       *
       * \param  rect		vfb area info
       * \param  dx		destination x coordinate (may be 
       *			negative)
       * \param  dy		dito for y coordinate
       *
       * \return 0 for success */
      long pslim_copy([in] l4con_pslim_rect_t rect,
		      [in] short dx, [in] short dy);

      /** Set rectangular area of virtual framebuffer with foreground 
       * and background color mask in (monochrome) bitmap.
       * \ingroup idl_con_vc
       *
       * \param  rect		vfb area info
       * \param  fg_color	foreground color
       * \param  bg_color	background color
       * \param  bmap		mask as bitmap
       * \param  bmap_size	of of bitmap
       * \param  bmap_type	type of bitmap: starting most or least
       *			significant bit (START_MSB/_LSB)
       *
       * \return 0 for success */
      long pslim_bmap([in] l4con_pslim_rect_t rect,
		      [in] l4con_pslim_color_t fg_color,
      		      [in] l4con_pslim_color_t bg_color,
		      [in, ref, size_is(bmap_size)] byte *bmap,
		      [in] long bmap_size,
		      [in] byte bmap_type);

      /** Set rectangular area of virtual framebuffer with color
       *  in pixelmap. Pixelmap is a colored bitmap.
       * \ingroup idl_con_vc
       *
       * \param  rect		vfb area info
       * \param  pmap		pixmap
       * \param  pmap_size	length of pixmap
       *
       * \return 0 for success */
      long pslim_set([in] l4con_pslim_rect_t rect,
		     [in, ref, size_is(pmap_size)] byte* pmap,
	             [in] long pmap_size);

      /** Convert pixmap from YUV to RGB color space, scale and 
       *  set rectangular area of virtual framebuffer.
       * \ingroup idl_con_vc
       *
       * \param  rect		vfb area info
       * \param  yuv_type	type of pixmap's YUV encoding
       * \param  scale		scale factor of pixmap (defaults to 1) 
       * 			(NOT SUPPORTED YET)
       * \param  y, u, v	YUV values as arrays
       * \param  y_l, u_l, v_l	lenght of arrays
       *
       * \return 0 for success */
      long pslim_cscs([in] l4con_pslim_rect_t rect,
	              [in, ref, size_is(y_l)] unsigned char* y, [in] int y_l,
		      [in, ref, size_is(u_l)] unsigned char* u, [in] int u_l,
		      [in, ref, size_is(v_l)] unsigned char* v, [in] int v_l,
		      [in] long yuv_type,
		      [in] char scale);

      /** Streaming version of pslim_cscs(). 
       * 
       * This function is intended to make use of hardware accelerator 
       * support of modern graphics cards. The client writes YUV data
       * to a non-visible "offscreen" region of the graphics memory. 
       * The backend scaler of the graphics card converts the data into
       * RGB values and scales the window to fit into the destination
       * rectangle. Most speed is gained by reducing the transported
       * amount of data when using YV12 mode: Instead of 16 bits per
       * pixel we use 12 bits which saves 25% memory writes to the very
       * slow video memory of the graphics card.
       * \ingroup idl_con_vc
       *
       * \param  rect_src	dimensions of the original YUV picture
       * \param  rect_dst	dimensions of the scaled RGB picture
       * \param  yuv_type	type of pixmap's YUV encoding, currently
       *                        only formats pSLIM_CSCS_PLN_YV12 and 
       *                        pSLIM_CSCS_PCK_YUY2 are supported.
       * \param buffer		offscreen buffer to copy the YUV picture
       * 			into
       * \param offs_y		Y offset into buffer
       * \param offs_u		U offset into buffer
       * \param offs_v		V offset into buffer
       *
       * \return 0 for success */
      long stream_cscs([in] l4con_pslim_rect_t rect_src,
		       [in] l4con_pslim_rect_t rect_dst,
		       [in] byte yuv_type,
		       [out] fpage *buffer,
		       [out] unsigned long *offs_y,
		       [out] unsigned long *offs_u,
		       [out] unsigned long *offs_v);

      /** Setup graphics mode of current virtual console
       * \ingroup idl_con_vc
       *
       * \param g_mode		con protocol macro describing graphics
       *			mode. Currently not implemented because
       *			the TUDOS console uses the video mode
       *			which is activated at boottime.
       *
       * \return 0 for success, negative error codes otherwise
       *
       * \todo implementation */
      long graph_smode([in] byte g_mode);

      /** Get graphics mode and mode parameters of current virtual
       * console.
       * \ingroup idl_con_vc
       *
       * \retval g_mode		con protocol macro describing graphics 
       *			mode
       * \retval xres, yres	x/y dimension of the accessible screen
       * \retval bits_per_pixel	bits per pixel in this graphics mode
       * \retval bytes_per_pixel bytes per pixel in this graphics mode
       * \retval bytes_per_line	bytes per line in this graphics mode
       * \retval flags		acceleration capabilities
       * \retval xtxt, ytxt	x/y dimension of the font
       *
       * \return 0 for success, negative error codes otherwise */
      long graph_gmode([out] byte *g_mode,
		       [out] l4_uint32_t *xres,
		       [out] l4_uint32_t *yres,
		       [out] l4_uint32_t *bits_per_pixel,
		       [out] l4_uint32_t *bytes_per_pixel,
		       [out] l4_uint32_t *bytes_per_line,
		       [out] l4_uint32_t *flags,
		       [out] l4_uint32_t *xtxt,
		       [out] l4_uint32_t *ytxt);

      /** Get RGB values of current virtual console.
       * \ingroup idl_con_vc
       *
       * \retval red_offs	start of red value in pixel
       * \retval red_len	length of red value in pixel
       * \retval green_offs	start of green value in pixel
       * \retval green_len	length of green value in pixel
       * \retval blue_offs	start of blue value in pixel
       * \retval blue_len	length of blue value in pixel
       *
       * \return 0 for success, negative error codes otherwise */
      long graph_get_rgb([out] l4_uint32_t *red_offs,
                         [out] l4_uint32_t *red_len,
                         [out] l4_uint32_t *green_offs,
                         [out] l4_uint32_t *green_len,
                         [out] l4_uint32_t *blue_offs,
                         [out] l4_uint32_t *blue_len);

      /** Map the graphics memory into the client.
       * \ingroup idl_con_vc
       *
       * \retval page		graphics memory
       * \retval offset		offset into mapped memory
       *
       * \return 0 for success, negative error codes otherwise */
      long graph_mapfb([in]  unsigned long fb_offset,
                       [out] fpage *page,
		       [out] unsigned long *page_offset);

      /** Setup input event filter.
       * \ingroup idl_con_vc
       *
       * \param  filter
       *
       * \return 0 for success, negative error codes otherwise
       *
       * \todo implementation */
      long ev_sflt([in] unsigned long filter);

      /** Get event filter of current virtual console.
       * \ingroup idl_con_vc
       *
       * \retval filter
       *
       * \return 0 for success, negative error codes otherwise
       *
       * \todo implementation */
      long ev_gflt([out] unsigned long *filter);
		
      /** Put string at x, y.
       * This is an extension of the original SLIM protocol to reduce
       * the communication overhead of large text strings. Otherwise
       * we would have to transmit graphics data between client and
       * TUDOS console to write text.
       * \ingroup idl_con_vc
       *
       * \param  s		string containing char
       * \param  len		length of string
       * \param  x		destination x coordinate
       * \param  y		dito for y coordinate
       * \param  fg_color	foreground color
       * \param  bg_color	background color
       *
       * \return 0 for success, */
      long puts([in, ref, size_is(len)] char* s,
	        [in] int len,
		[in] short x,
      		[in] short y,
		[in] l4con_pslim_color_t fg_color,
		[in] l4con_pslim_color_t bg_color);

      /** Put string at x, y.
       * \ingroup idl_con_vc
       *
       * \param  s		string containing char
       * \param  len		length of string
       * \param  x		destination x coordinate
       * \param  y		dito for y coordinate
       * \param  fg_color	foreground color
       * \param  bg_color	background color
       * \param  scale_x 	Horizontal scale factor
       * \param  scale_y 	Vertical scale factor
       *
       * \return 0 for success, */
      long puts_scale([in, ref, size_is(len)] char* s,
	              [in] int len,
		      [in] short x,
      		      [in] short y,
		      [in] l4con_pslim_color_t fg_color,
		      [in] l4con_pslim_color_t bg_color,
		      [in] short scale_x,
		      [in] short scale_y);

      /** Put colored string at x, y.
       * An extended version of puts especially designed for Linux.
       * \ingroup idl_con_vc
       *
       * \param  s		string containing char/attr.
       * \param  strattr_size	length of string
       * \param  x		destination x coordinate
       * \param  y		dito for y coordinate
       *
       * \return 0 for success, */
      long puts_attr([in, ref, size_is(strattr_size)] short* s,
	             [in] int strattr_size,
     		     [in] short x,
	   	     [in] short y);
      
      /** Make virtual framebuffer public to console.
       * This function makes it possible for a client to map a
       * virtual framebuffer into the console. If something of the
       * virtual framebuffer changes, the client sends an update
       * event (using direct_update). This mechanism was especially
       * designed for use with the XFree86 stub of the TUDOS console.
       * \ingroup idl_con_vc
       *
       * \param  data_ds	dataspace of virtual framebuffer
       *
       * \return 0 for success, */
      long direct_setfb([in] l4dm_dataspace_t data_ds);
      
      /** Update region using virtual framebuffer.
       * See direct_setfb for more explanations.
       * \ingroup idl_con_vc
       *
       * \param  rect		region to update
       *
       * \return 0 for success, */
      long direct_update([in] l4con_pslim_rect_t rect);
    };
};

