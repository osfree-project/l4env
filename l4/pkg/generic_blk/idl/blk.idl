/* -*- c -*- */ 
/* $Id$ */
/*****************************************************************************/
/**
 * \file   blk.idl
 * \brief  DROPS Block Device Driver RPC protocol
 *
 * \date   01/30/2001
 * \author Lars Reuther <reuther@os.inf.tu-dresden.de>
 *
 * \note Be careful with changes of the request list size, it also requires 
 *       adaptions in the client library, see client-lib/include/__config.h.
 */
/*****************************************************************************/

import <l4/generic_blk/types.h>

/*****************************************************************************/
/**
 * DROPS Block Device Driver Interface
 * \ingroup idl
 */
/*****************************************************************************/
library l4blk
{
  /***************************************************************************/
  /**
   * Driver Interface.
   * This is the initial interface of a driver to its clients, it is used
   * to create and destroy instances of the other interfaces of the driver.
   * \ingroup idl
   */
  /***************************************************************************/
  interface driver
    {
      /***********************************************************************/
      /**
       * \brief   Open new driver instance. 
       * \ingroup idl_driver
       * 
       * \retval  drv         Handle for new instance
       * \retval  cmd_id      Id of command service thread
       * \retval  notify_id   Id of notification thread
       * 	
       * \return  0 on success, error code if open failed.
       *
       * Create a new instance of the driver. The main job is to assign 
       * instances of the command and callback interface threads to the client. 
       * This can either be existent or newly created interface threads, 
       * dependent on the actual requirements of the driver.
       */
      /***********************************************************************/ 
      int open([out] l4blk_driver_id_t * drv, 
               [out] l4_threadid_t * cmd_id, 
               [out] l4_threadid_t * notify_id);

      /***********************************************************************/
      /**
       * \brief   Close driver instance.
       * \ingroup idl_driver
       * 
       * \param   drv         Driver handle
       *	
       * \return  0 on success, error code if close failed.
       *
       * Close instance of the driver.
       */
      /***********************************************************************/ 
      int close([in] l4blk_driver_id_t drv);
    };

  /***************************************************************************/
  /**
   * Command handling interface
   * \ingroup idl
   */
  /***************************************************************************/
  interface cmd
    {
      /***********************************************************************/
      /**
       * \brief   Create new real-time stream.
       * \ingroup idl_cmd
       *
       * \param   drv         Driver handle
       * \param   device      Device id
       * \param   bandwidth   Bandwidth of stream (bytes/s)
       * \param   period      Period length (milliseconds)
       * \param   blk_size    Blocksize (bytes)
       * \param   q           Quality parameter
       * \param   meta_int    Metadata request interval (number of regular 
       *                      requests per metadata request)
       * \retval  stream      Stream handle
       * 
       * \return  0 on success (created new stream, \a stream contains a valid
       *          stream handle), error code otherwise.
       *
       */
      /***********************************************************************/ 
      int create_stream([in] l4blk_driver_id_t drv, 
                        [in] unsigned long device,
                        [in] unsigned long bandwidth,
                        [in] unsigned long period,
                        [in] unsigned long blk_size, 
                        [in] float q,
                        [in] unsigned long meta_int, 
                        [out] l4blk_stream_t * stream);

      /***********************************************************************/
      /**
       * \brief   Close real-time stream.
       * \ingroup idl_cmd
       *
       * \param   drv         Driver handle
       * \param   stream      Stream handle.
       * 
       * \return  0 on succes (closed stream, released resources), error code
       *          otherwise.
       */
      /***********************************************************************/ 
      int close_stream([in] l4blk_driver_id_t drv, 
                       [in] l4blk_stream_t stream);

      /***********************************************************************/
      /**
       * \brief   Set stream start time
       * \ingroup idl_cmd
       * 
       * \param   drv         Driver handle
       * \param   stream      Stream handle.
       * \param   time        Time (deadline) of first request (milliseconds)
       * \param   request_no  Request number of first request
       *
       * \return  0 on success, error code otherwise.
       */
      /***********************************************************************/ 
      int start_stream([in] l4blk_driver_id_t drv, 
                       [in] l4blk_stream_t stream,
                       [in] unsigned long time, 
                       [in] unsigned long request_no);

      /***********************************************************************/
      /**
       * \brief   Send scatter-gather request to driver
       * \ingroup idl_cmd
       * 
       * \param   drv         Driver handle
       * \param   request     Request
       * \param   sg_list     Buffer list
       * \param   sg_size     Sizr of sg_list (bytes)
       * \param   sg_num      Number of buffers in buffer list
       * \param   sg_type     Type of scatter-gather list:
       *                      - #L4BLK_SG_PHYS
       *                      - #L4BLK_SG_DS
       *	
       * \return  0 on success (requests enqueued into driver's request list),
       *          error code otherwise.
       */
      /***********************************************************************/ 
      int put_request([in] l4blk_driver_id_t drv,
                      [in] l4blk_blk_request_t request,
                      [in, ref, size_is(sg_size), max_is(4096)] void * sg_list,
                      [in] int sg_size,
                      [in] int sg_num,
                      [in] int sg_type);

      /***********************************************************************/
      /**
       * \brief   Generic driver control function.
       * \ingroup idl_cmd
       * 
       * \param   drv         Driver handle
       * \param   command     Control command
       * \param   in_args     Input buffer
       * \param   in_size     Size of input buffer
       * \param   out_args    Output buffer
       * \param   out_size    Size of output buffer
       *
       * \return  0 on success, error code otherwise.
       */
      /***********************************************************************/ 
      int ctrl([in] l4blk_driver_id_t drv, 
               [in] l4_uint32_t command,
               [in, ref, size_is(in_size)] void * in_args,
               [in] int in_size,
               [out, ref, prealloc_client, size_is(out_size)] void ** out_args,
               [in, out] int * out_size);
    };

  /***************************************************************************/
  /**
   * Processed notification interface
   * \ingroup idl
   */
  /***************************************************************************/
  interface notify
    {
      /***********************************************************************/
      /**
       * \brief   Wait for processed notification
       * \ingroup idl_wait
       *
       * \param   drv         Driver handle
       * \retval  req_handle  Client request handle
       * \retval  status      Request status
       * \retval  error       Error code (if status == BLK_ERROR)
       * 
       * \return  0 on succes (\a req_handle and \a status are valid), error
       *          code otherwise.
       */
      /***********************************************************************/ 
      int wait([in] l4blk_driver_id_t drv, 
               [out] l4_uint32_t * req_handle,
               [out] l4_uint32_t * status, 
               [out] int * error);
    };
};
