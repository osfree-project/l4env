<!-- -*-jfw-sgml-*- -->
<!doctype manpage public "-//JFW//DTD Manpage//EN">

<manpage
sect=syscall
date="16.07.96"
>
l4_ipc_wait
<short>wait for message from any source
<sect> Synopsis

<verb>#include <l4/sys/ipc.h></verb>

<code/static inline int/ <nl>
<code/l4_ipc_wait(l4_threadid_t/ <var/*src/ <code/, void/
<var/*rcv_msg/ <code/, l4_umword_t/ <var/*rcv_dword0/ <code/, l4_umword_t/
<var/*rcv_dword1/ <code/,l4_timeout_t/ <var/timeout/ <code/,
l4_msgdope_t/ <var/*result/ 
<code/);/

<sect> Description

This operation includes no send phase. The invoker waits for a message
from any source (including a hardware interrupt).

<sect> Arguments

<desc

<dt/<var/*src// Thread id of the source.

<dt/<var/*rcv_msg//  Pointer to Receive Descriptor. It can contain the
following values: 

<desc

<dt/<code/0// Only messages up to two 32-bit words and are
accepted. The received message is returned in  <var/rcv_dword0/ and
<var/rcv_dword1/. 

<dt/&lt;mem>/  If Bit 1 of <var/*rcv_msg/ is 0 ipc includes receiving a
message respectively waiting to receive a message. <var/*rcv_msg/ must
point to a valid message. Note that the first two 32-bit words of the 
received message are returned in <var/rcv_dword0/ and <var/rcv_dword1/.

<dt/&lt;rmap>/ If Bit 1 of <var/*rcv_msg/ is 1 only send-fpage
messages or up to two 32-bit words (in <var/rcv_dword0/ and
<var/rcv_dword1/) are accepted. If a map message is received, the 30
most significant bits describe the receive fpage (instead of
<var/rcvfpage option/ in a memory message buffer). Thus fpages can
also be received without a message buffer in memory. 

</desc>

<dt/<var/*rcv_dword0//  First of two 32-bit words of received message,
undefined if no message was received. 

<dt/<var/*rcv_dword1//  Second of two 32-bit words of received message,
undefined if no message was received. 

<dt/<var/timeout// This 32-bit word specifies all 4 timouts, the
quadruple (snd, rcv, snd pf, rcv pf). For a detailed description see
the L4 Reference Manual.

<dt/<var/result// The message dope describing the result of the Ipc.

<sect>Return Values

The following return values are possible:

<desc

<dt/<code/0// No error occured. The optional send operation was
successful, and if a receive operation was also specified, a message
was also received correctly. 

<dt/<code/L4_IPC_ENOT_EXISTENT// Non-existing destination or source.

<dt/<code/L4_IPC_RETIMEOUT// Timeout during receive operation.

<dt/<code/L4_IPC_SETIMEOUT// Timeout during send operation.

<dt/<code/L4_IPC_RECANCELED// Receive operation cancelled by another thread.

<dt/<code/L4_IPC_SECANCELED// Send operation cancelled by another thread.

<dt/<code/L4_IPC_REMAPFAILED// Map failed due to a shortage of page
tables during receive operation.

<dt/<code/L4_IPC_SEMAPFAILED// Map failed due to a shortage of page
tables during send operation.

<dt/<code/L4_IPC_RESNDPFTO// Send pagefault timeout.

<dt/<code/L4_IPC_SERCVPFTO// Receive pagefault timeout.

<dt/<code/L4_IPC_REABORTED// Receive operation aborted by another
thread.

<dt/<code/L4_IPC_SEABORTED// Send operation aborted by another thread.

<dt/<code/L4_IPC_REMSGCUT// Received message cut. Potential reasons
are:

<desc

<dt/(a)/ The recipient's mword buffer is too small.
<dt/(b)/ The recipient does not accept enough strings.
<dt/(c)/ At least one of the recipient's string buffers is too small.

</desc>

<sect>See Also

<ref t=m id="l4_ipc"//, 
<ref t=m id="l4_ipc_receive"//, 
<ref t=m id="l4_ipc_reply_and_wait"//, 
<ref t=m id="l4_ipc_reply_deceiting_and_wait"//, 
<ref t=m id="l4_ipc_send"//, 
<ref t=m id="l4_ipc_send_deceiting"//,
<ref t=m id="l4_ipc_call"// 
