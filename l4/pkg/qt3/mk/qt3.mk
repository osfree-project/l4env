#
#
# BID stuff for Qt3 programs. This is some kind of a 'sub role'.
#
#


# general dependency on qt3.mk
.general.d: $(L4DIR)/pkg/qt3/mk/qt3.mk


# The tools provided by Trolltech: 'moc': Meta Object Compiler
#                                  'uic': User Interface Compiler
# You better have them installed on your machine ;)
UIC		= uic
MOC		= moc

# Qt needs all this. The current path '.' is required in the
# include path, DEFINES must be kept in sync with library
# configuration!
PRIVATE_INCDIR  += $(L4DIR)/include/qt3 .
CXXFLAGS	+= -fno-exceptions -fno-rtti
DEFINES		+= -DQWS -DQ_OS_DROPS -DQT_THREAD_SUPPORT

USE_DIETLIBC	= y
MALLOC_BACKEND	= -lc_be_simple_mem
WANT_THREADSAFE	= 1


# Qt I/O backend to be used (one of 'con', 'dope', 'sdl')
QT3_IO_BACKEND  	?= con
LIBS_IO_BACKEND_con	= -lcon -lconstream-server
LIBS_IO_BACKEND_dope	= -ll4dope -lvscreen
LIBS_IO_BACKEND_sdl	= -linput-ux

# Decide, whether to link against Qt library with debug info or not.
# The non-debug stripped library is the default, because it makes
# linking _a lot_ faster.
ifeq ($(DEBUG_LIBQT3),1)
	LIBQT3_EMBEDDED	= qt3_embedded_dbg
else
	LIBQT3_EMBEDDED	= qt3_embedded
endif


# Qt libraries and additional L4VFS/dietlibc libs
LIBS		+= -l$(LIBQT3_EMBEDDED)                                \
		  -lqt3_qws_client -lqt3_qws_server                    \
		  -lqt3_thread -lqt3_misc -lqt3_io_$(QT3_IO_BACKEND)   \
		  -ll4z                                                \
		  -lc_be_socket_io -lc_be_select -ll4vfs_net_io  \
		  -ll4vfs_select_listener-server -ll4vfs_select        \
		  -ll4vfs_extendable -ll4vfs_name_server -lrtc         \
		  -lcxx_base -lcxx_util -lcxx_io_kdebug -lcxx_io       \
		  -lcxx_log_io                                         \
		  $(LIBS_IO_BACKEND_$(strip $(QT3_IO_BACKEND)))        \
		  -lc_be_buddy_slab_mem -u mmap_anon -u munmap_anon

# handle *.ui XML files
SRC_UI_H	= $(SRC_UI:.ui=.h)
SRC_UI_CC	= $(SRC_UI:.ui=.cc)
SRC_CC		+= $(SRC_UI_CC)
SRC_MOC		+= $(SRC_UI_H)

# handle images to be embedded into source code
UIC_IMAGES_CC	= uic_image_collection.cc
ifneq ($(strip $(SRC_UI_IMG)),)
	SRC_CC += $(UIC_IMAGES_CC)
endif

# *.moc.cc file are generated from *.h/*.cc files
SRC_MOC_CC	= $(SRC_MOC:.h=.moc.cc)
SRC_CC		+= $(SRC_MOC_CC)


#
# automatic generation of *.moc.cc files and those generated by the
# 'uic' from *.ui XML files
#

vpath %.h ..
vpath %.ui ..

# image files which may be embedded into source code (extend the list
# as required)
vpath %.png ..
vpath %.jpg ..
vpath %.jpeg ..
vpath %.gif ..


all::

# We need $(SRC_CC) expanded NOW, so that we can ensure, that all
# headers generated from *.ui files are in place before any *.cc
# file is compiled (these headers might be included).
SRC_CC_EXPAND_NOW := $(SRC_CC)
$(SRC_CC_EXPAND_NOW:.cc=.o): $(SRC_UI_H)

# generate *.h from *.ui
.SECONDARY: $(SRC_UI_H)
$(SRC_UI_H): %.h: %.ui
	$(VERBOSE)$(call MAKEDEP,$(UIC)) $(UIC) -o $@ $<

# generate *.cc from *.ui
.SECONDARY: $(SRC_UI_CC)
$(SRC_UI_CC): %.cc: %.ui %.h
	$(VERBOSE)$(call MAKEDEP,$(UIC)) $(UIC) -impl $(@:.cc=.h) -o $@ $<

# generate image collection
.SECONDARY: $(UIC_IMAGES_CC)
$(UIC_IMAGES_CC): $(SRC_UI_IMG)
	$(VERBOSE)$(UIC) -o $@ -embed uic_images $(addprefix ../, $(SRC_UI_IMG)) 

# generate *.moc.cc from *.h
.SECONDARY: $(SRC_MOC_CC)
$(SRC_MOC_CC): %.moc.cc: %.h
	$(VERBOSE)$(call MAKEDEP,$(MOC)) $(MOC) -o $@ $<


DEPS += $(foreach file,$(SRC_MOC_CC), $(dir $(file)).$(notdir $(file)).d)
DEPS += $(foreach file,$(SRC_UIC_CC), $(dir $(file)).$(notdir $(file)).d)
