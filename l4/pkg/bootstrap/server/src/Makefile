
DO_ARCH		?= x86

PKGDIR		?= ../..
L4DIR		?= $(PKGDIR)/../..
SYSTEMS		:= x86-l4v2
ifeq ($(DO_ARCH), arm)
SYSTEMS		:= arm-l4x0
endif

PRIVATE_INCDIR	= $(PKGDIR)/server/src

TARGET		= bootstrap
MODE		= sigma0

L4LIBS		= -ll4sys

LINK_ADDR	= 0x00100000
MOD_ADDR        = 0x02000000

DEFAULT_RELOC_arm := 0x02000000

SRC_C_x86-l4v2	= startup.c exec.c region.c module.c \
		  base_critical.c \
		  init_l4_gmd.c init_ibm_nucleus.c init_hazelnut.c \
		  ARCH-x86/serial.c
SRC_S_x86-l4v2	= ARCH-x86/crt0.S
SRC_C_arm-l4x0	= startup.c exec.c region.c module.c base_critical.c
ARM_DRV_TYPE	?= sa1000
ifeq ($(ARCH),arm)
DRV_LIBS	= -larm_drv-$(ARM_DRV_TYPE)
endif
ifeq ($(ARCH),x86)
CRT0		=
endif
LDSCRIPT	= ARCH-$(ARCH)/bootstrap.ld

MODULE_PATH     = $(INSTALLDIR_LOCAL)
MODULE_LIST     = modules.list

XEN		 = 0
COMPRESS	 = 0
LOADER_MBI	 = 0
REALMODE_LOADING = 0

ifeq ($(ARCH),arm)
LOADER_MBI	 = 1
endif

ifneq ($(XEN_PATH),)
XEN		= 1
endif

ifeq ($(XEN),1)
LOADER_MBI	= 1
SRC_C		+= ARCH-x86/xen.c
LINK_ADDR	= 0xf0100000
MOD_ADDR	= 0xc2000000
CPPFLAGS	+= -DXEN -DSINGLE_SECTION
XEN_PATH	?= /your/path/to/xen
CPPFLAGS	+= -I$(XEN_PATH)/xen-2.0/xen/include \
		   -I$(XEN_PATH)/xen-2.0/extras/mini-os
endif

ifeq ($(LOADER_MBI),1)
SRC_C		+= loader_mbi.c
MOD_ADDR	 = 0x00150000
CPPFLAGS	+= -DLOADER_MBI
endif

ifeq ($(REALMODE_LOADING),1)
CPPFLAGS	+= -DREALMODE_LOADING -DSINGLE_SECTION
INSTALL_TARGET	+= bootstrap.load
endif

ifeq ($(COMPRESS),1)
SRC_C		+= uncompress.c gunzip.c
CPPFLAGS	+= -DCOMPRESS
export COMPRESS
endif

include $(L4DIR)/mk/prog.mk

ifneq ($(SYSTEM),)
 ifneq ($(ENTRY)$(E),)
  ifeq ($(ARCH),arm)
   CROSS_COMPILE := arm-linux-
  endif
  BUILD_DUMMY := $(shell SEARCHPATH=$(LOCAL_SEARCH_PATH):$(MODULE_PATH) \
                         CROSS_COMPILE=$(CROSS_COMPILE) \
			 ARCH=$(ARCH) \
                         ../build.pl ../$(MODULE_LIST) $(firstword $(E) $(ENTRY)) \
			   || echo X-build-failed-X)
  ifeq ($(BUILD_DUMMY),X-build-failed-X)
   $(error Processing of module list failed!)
  else
   BUILD_DUMMY := $(shell echo $(BUILD_DUMMY))
  endif

  # mod.make.inc is generated by build.pl
  include mod.make.inc
  OBJS_bootstrap   += $(MODULE_OBJECT_FILES)
  CPPFLAGS         += -DIMAGE_MODE
  BOOTSTRAP_LD_dep := mod.make.inc
  STARTUP_C_dep    := mod.make.inc
 endif
endif

CPPFLAGS	+= -DMODADDR=$(MOD_ADDR)

L4LIBS		= $(DRV_LIBS)

SUPCLIB_diet	= libc_support.c
LIBCLIB_diet	= -nostdlib $(GCCLDNOSTDLIB) -ldiet_c -ldietlibc_support \
		  -ldiet_be_l4_start_stop -ldiet_be_sigma0_mem -ldiet_c  \
		  -ll4util_light -ldiet_c $(GCCLIB) -ldiet_c
SUPCLIB_uc	= libc_support.c
LIBCLIB_uc	= -nostdlib $(GCCLDNOSTDLIB) -luc_c -luclibc_support     \
		  -luc_be_l4_start_stop -luc_be_sigma0_mem -luc_c        \
		  -ll4util_light -luc_c $(GCCLIB) -luc_c
SUPCLIB_oskit	= ARCH-x86/oskit_support.c
LIBCLIB_oskit	= -nostdlib -lkern -lmc -llmm $(GCCLIB)

LIBCLIBS	= $(LIBCLIB_$(LIBC_TYPE))
SRC_C		+= $(SUPCLIB_$(LIBC_TYPE))


ifneq ($(SYSTEM),)

all:: bootstrap.image

bootsect.o.img: ARCH-x86/bootsect.S Makefile
	$(CC) -traditional -nostdinc -nostdlib -c $<
	$(LD) -m elf_i386 -Ttext 0x0 -s --oformat binary bootsect.o -o $@

setup.o.img: ARCH-x86/setup.S Makefile
	$(CC) -traditional -nostdinc -nostdlib -c $<
	$(LD) -m elf_i386 -Ttext 0x0 -s --oformat binary -e begtext setup.o -o $@
	dd if=/dev/zero bs=1 count=$$((3072 - `wc -c < setup.o.img`)) >> setup.o.img

bootstrap.load.build: bootstrap bootsect.o.img setup.o.img
	objcopy -O binary -R .note -R .comment -S bootstrap bootstrap.bin
	cat bootsect.o.img setup.o.img bootstrap.bin > bootstrap.load

bootstrap.load: bootstrap.load.build

bootstrap.image: bootstrap
	@echo "  ... Generating $@"
	$(VERBOSE)$(OBJCOPY) -S $< $*.stripped
	$(VERBOSE)$(OBJCOPY) -O binary $*.stripped $@
endif

$(TARGET): $(LDSCRIPT) $(OBJS_$(TARGET))

vpath $(LDSCRIPT).in ..

startup.o: $(STARTUP_C_dep)

$(LDSCRIPT): $(LDSCRIPT).in Makefile $(BOOTSTRAP_LD_dep)
	$(VERBOSE)echo "  ... Generating $@"
	$(VERBOSE)mkdir -p $(dir $@)
	$(VERBOSE)cpp -P $(CPPFLAGS) -DLINKADDR=$(LINK_ADDR) $< $@;
