/*
 * \brief   Nitpicker server interface
 * \date    2004-08-25
 * \author  Norman Feske <nf2@inf.tu-dresden.de>
 */

/*
 * Copyright (C) 2002-2004  Norman Feske  <nf2@os.inf.tu-dresden.de>
 * Technische Universitaet Dresden, Operating Systems Research Group
 *
 * This file is part of the DOpE package, which is distributed under
 * the  terms  of the  GNU General Public Licence 2.  Please see the
 * COPYING file for details.
 */

import <l4/dm_generic/types.h>
import <dice/dice-corba-types.h>

interface nitpicker {

	/*** DONATE MEMORY ***
	 *
	 * Donate memory for the storage of client-specific data structures
	 * inside Nitpicker. When called a second time, Nitpicker discards
	 * the previous donation including all views and buffers. If a client
	 * has to increase max_views or max_buffers later on, the client has
	 * to recover the old state by itself.
	 *
	 * To calculate the needed size for the dataspace to donate, use:
	 * size = sizeof(client)
	 *      + sizeof(view)   * max_views
	 *      + sizeof(buffer) * max_buffers
	 *
	 * \return  0 on success, or
	 *         -1 if supplied memory block is too small to store the
	 *            requested number of views and buffers, or
	 *         -2 dataspace is invalid
	 */
	int donate_memory([in] l4dm_dataspace_t ds, [in] int max_views,
	                                            [in] int max_buffers);

	/*** REQUEST INFORMATION ABOUT PHYSICAL SCREEN ***/
	int get_screen_info([out] int *w, [out] int *h, [out] int *mode);


	/*** INJECT NEW BUFFER ***/
	int import_buffer([in] l4dm_dataspace_t ds, [in] int w, [in] int h);


	/*** REMOVE BUFFER ***/
	void remove_buffer([in] int buf_id);


	/*** REFRESH GRAPHICAL REPRESENTATION OF THE NEW BUFFER ***/
	void refresh([in] int buf_id, [in] int x, [in] int y, [in] int w, [in] int h);


	/*** CREATE A NEW VIEW AT A BUFFER ***
	 *
	 * \param buf_id    buffer that is displayed by the view
	 * \param token     private token to be associated with the view
	 * \param listener  receiver of events regarding the view
	 */
	int new_view([in] int buf_id, [in] CORBA_Object listener);


	/*** CLOSE VIEW ***/
	void destroy_view([in] int view_id);


	/*** DEFINE VIEWPORT ON THE BUFFER ***/
	int set_view_port([in] int view_id, [in] int buf_x, [in] int buf_y,
	                  [in] int x, [in] int y, [in] int w, [in] int h,
	                  [in] int do_redraw);

	/*** POSITION VIEW IN VIEW STACK ***
	 *
	 * \param neighbor  neighbor view id or
	 *                 -1  top or bottom of view stack
	 * \param behind    0  insert view in front or
	 *                  1  behind the specified neightbor
	 *
	 * To insert a view at the top of the view stack, specify
	 * neighbor = -1 and behind = 1. To insert a view at the
	 * bottom of the view stack, specify neighbor = -1 and
	 * behind = 0.
	 */
	int stack_view([in] int view_id, [in] int neighbor_id, [in] int behind,
	               [in] int do_redraw);

	/*** SET TITLE INFORMATION OF A VIEW ***/
	int set_view_title([in] int view_id, [in, string] char *title);

	/*** DEFINE VIEW THAT IS USED AS DESKTOP BACKGROUND ***/
	int set_background([in] int view_id);

	/*** CONFIGURE MOUSE BEHAVIOUR FOR A VIEW ***/
	int set_mousemode([in] int view_id, [in] int mode);

};

