/*
 * Copyright (C) 2006 Michael Roitzsch <mroi@os.inf.tu-dresden.de>
 * Technische Universitaet Dresden, Operating Systems Research Group
 */

static const int digit_width = 16;
static const int digit_height = 16;

static const uint8_t digit_shape[10][16][16] = {
#define _ 0x00
#define O 0x80
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,O,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,O,O,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,O,O,O,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,O,O,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,O,O,O,O,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,O,O,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,O,O,O,O,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,_,_,_,_,_,_,_,_,_ },
    {_,_,_,O,O,O,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,_,_,_,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,_,_,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,O,O,O,_,O,O,_,_,_,_ },
    {_,_,_,_,_,O,O,O,_,_,O,O,_,_,_,_ },
    {_,_,_,_,O,O,O,_,_,_,O,O,_,_,_,_ },
    {_,_,_,O,O,O,_,_,_,_,O,O,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,O,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,O,O,O,_,_,_ },
    {_,_,_,_,_,_,_,_,_,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,O,O,O,_,_,_,_,_ },
    {_,_,_,_,_,_,_,O,O,O,_,_,_,_,_,_ },
    {_,_,_,_,_,_,O,O,O,_,_,_,_,_,_,_ },
    {_,_,_,_,_,O,O,O,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,_,_,_,_,_,_,_,_,_ },
    {_,_,_,O,O,O,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  },
  {
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,_,_,_,_,_,_,_,_,O,O,_,_ },
    {_,_,O,O,O,_,_,_,_,_,_,O,O,O,_,_ },
    {_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_ },
    {_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_ },
    {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ }
  }
#undef _
#undef O
};

/* counts the number of calls in a static variable and prints the number on th frame
 * between the start_index and end_index macroblocks */
static inline int print_number(AVPicture *frame, int start_index, int end_index)
{
  static int number = 0;
  
  const int mb_y = start_index / proc.mb_width;
  const int mb_x = start_index % proc.mb_width;
  const int start_y = mb_y << mb_size_log;
  const int start_x = mb_x << mb_size_log;
  const int end_x = (end_index / proc.mb_width > mb_y) ?
    proc.mb_width << mb_size_log :
    (end_index % proc.mb_width) << mb_size_log;
  int x, y, decimal, digit_count, remain;
  
  for (decimal = 1; 10 * decimal <= number; decimal *= 10);
  remain = number;
  for (digit_count = 0; decimal; digit_count++, decimal /= 10) {
    const int digit = remain / decimal;
    remain %= decimal;
    if (digit_count * digit_width + start_x >= end_x) break;
    for (y = 0; y < digit_height; y++)
      for (x = 0; x < digit_width; x++)
	frame->data[0][digit_count * digit_width +
	  (start_x + x) + (start_y + y) * frame->linesize[0]] ^= digit_shape[digit][y][x];
  }
  
  return number++;
}
