/* $Id$*/
/*! \file generic_ts/idl/generic_ts.idl
 *
 * \date   06/04/2000
 * \author Frank Mehnert <fm3@os.inf.tu-dresden.de>
 *         Torsten Frenzel <frenzel@os.inf.tu-dresden.de>
 *
 * \brief Generic task server interface
 */

import <l4/sys/types.h>

/** \anchor ts l4 namespace */
library l4
{
  /** generic task server interface */
  [error_function_server(dice_server_error)]
  interface ts
    {
      /** Allocate a new task id. Returns -L4_ENOTASK if no task is available.
       * We have to split allocating and creating the task in two steps 
       * because creating a task means that the task starts immediatly. If
       * the task starts before the task's pager knows the task ID of the new
       * task, the pager gets confused and should deny the page fault handling
       * for that task. Therefore we allocate the task ID in the first step
       * and can tell the new task ID to the pager in the next step. Finally
       * we create the task. 
       * 
       * \param  taskno         if != 0, use the specific task number
       * \retval taskid		Id of new task assigned to calling client
       * \return 		0 on success (\a taskid contains a valid id),
       * 			error code otherwise:
       * 			- -#L4_ENOTASK  no unused task id available */
      long allocate([in] unsigned long taskno, [out] l4_taskid_t *taskid);

      /** Allocate a new task in the same way as allocate(). However, this
       * _really_ transfers ownership to the client by making it the
       * new task's chief.
       *
       * \param  taskno         if != 0, use the specific task number
       * \retval taskid		Id of new task assigned to calling client
       * \return 		0 on success (\a taskid contains a valid id),
       * 			error code otherwise:
       * 			- -#L4_ENOTASK  no unused task id available */
      long allocate2([in] unsigned long taskno, [out] l4_taskid_t *taskid);

      /** Create the task. The taskid must be owned by the client.
       * 
       * \param  taskid		Id of pre-allocated task belonging to client
       * \param  entry		Initial instruction pointer of first thread
       * \param  stack		Initial stack pointer of first thread
       * \param  mcp		Maximum allowed priority
       * \param  pager		Id of first thread's pager
       * \param  caphandler	Capfault handler
       * \param  kquota		In-kernel memory quota
       * \param  prio		Priority of first thread
       * \param  resname	Module name as reserved in RMGR.
       * \param  flags		Flags */
      long create([in,out] l4_taskid_t *taskid, [in] l4_addr_t entry,
                  [in] l4_addr_t stack,         [in] unsigned long mcp,
                  [in] l4_taskid_t pager,       [in] l4_taskid_t caphandler,
                  [in] l4_quota_desc_t kquota,  [in] long prio,
                  [in, string] char* resname,   [in] unsigned long flags);

      /**
       * Free previously allocated task id.
       *
       * \param  taskid		Id of the task to free.
       * \return 		0 on success
       *			-#L4_ENOTFOUND if invalid task */
      long free([in] l4_taskid_t taskid);

      /**
       * Free previously allocated task id and return chief rights.
       *
       * \param  taskid		Id of the task to free.
       * \return 		0 on success
       *			-#L4_ENOTFOUND if invalid task */
      long free2([in] l4_taskid_t taskid);

      /** Terminate task. 
       *
       * \param taskid		Task ID of task to kill 
       * \param options
       **/
      [allow_reply_only]
      long kill([in] l4_taskid_t taskid, [in] l4_uint8_t options);

      /** Terminate all tasks owned tasknr recursivly!
       *
       * \param taskid		Task ID of task to start from */
      long kill_recursive([in] l4_taskid_t taskid);

      /** Transfer ownership of a task.
       *
       * \param taskid		Task ID of task which ownership to transfer
       * \param owner		Task ID of the owner of the task. IF set to
       * 			L4_NIL_ID, the owner is not checked. */
      long owner([in] l4_taskid_t taskid,
		 [in] l4_taskid_t owner);

      /** Deliver the corresponding task id
       *
       * \param tasknr		Task number */
      long taskno_to_taskid([in] unsigned long tasknr, 
			    [out] l4_taskid_t *taskid);

      /** Terminate the caller */
      [allow_reply_only]
      long exit(void);

      /** Dump list of all allocated tasks */
      void dump();

      /** INTERNAL, used by events thread */
      void do_kill_reply([in] l4_threadid_t client);
    };
};
