/**
 * \file    roottask/idl/rmgr.idl
 * \brief   Roottask interface
 * \ingroup idl_roottask
 *
 * \date    09/15/2004
 * \author  Frank Mehnert <fm3@os.inf.tu-dresden.de>
 */

/* (c) 2006 Technische Universit√§t Dresden
 * This file is part of DROPS, which is distributed under the terms of the
 * GNU General Public License 2. Please see the COPYING file for details.
 */

#include <l4/sys/types.h>

/**
 * Roottask interface
 * \ingroup idl_roottask
 */
interface rmgr
{
  /**
   * \brief   helper function to check for roottask availability
   * \ingroup idl_roottask
   *
   * \param   value      test value
   * \param   not_value  negated input value
   */
  void init_ping([in] long value, [out] long *not_value);

  /**
   * \brief   Move a task into an allocated small space.
   * \ingroup idl_roottask
   *
   * \param   tid  ID of corresponding L4 task
   * \param   num  number of small spac
   *
   * \return  0 on success, 1 otherwise
   */
  long set_small_space([in] l4_threadid_t tid, [in] long num);

  /**
   * \brief   Set priority of a thread
   * \ingroup idl_roottask
   *
   * \param   tid   target thread ID
   * \param   prio  new thread priority
   *
   * \return  0 on success, 1 otherwise
   */
  long set_prio([in] l4_threadid_t tid, [in] long prio);

  /**
   * \brief   Query prio without rmgr involvement.
   * \ingroup idl_roottask
   *
   * \param   tid   target thread ID
   * \retval  prio  priority
   *
   * \return  0 on success, 1 otherwise
   */
  long get_prio([in] l4_threadid_t tid, [out] long *prio);

  /**
   * \brief   Request roottask to transfer right for a task to the caller.
   * \ingroup idl_roottask
   *
   * \param   num  task number
   *
   * \return  0 on success, 1 otherwise
   */
  long get_task([in] long num);

  /**
   * \brief   Pass right for a task back to roottask.
   * \ingroup idl_roottask
   *
   * \param   num  task number
   *
   * \return  0 on success, 1 otherwise
   */
  long free_task([in] long num);

  /**
   * \brief   Free all L4 tasks occupied for a specific task.
   * \ingroup idl_roottask
   *
   * \param   tid  taget task ID
   *
   * \return  0 on success, 1 otherwise
   */
  long free_task_all([in] l4_threadid_t tid);

  /**
   * \brief   Create a new task.
   * \ingroup idl_roottask
   *
   * \param   tid           the task ID of the new task
   * \param   mcp_or_chief  priority of new task
   * \param   esp           stack pointer for new task's stack
   * \param   eip           instruction pointer of initial function
   * \param   pager         ID of task's pager
   * \param   caphandler    ID of task's capability fault handler
   * \param   kquota        kernel memory quota
   * \param   sched_param   scheduling parameter
   * \retval  ntid          the acually allocated thread ID
   *
   * \return  0 on success, 1 otherwise.
   */
  long task_new([in] l4_taskid_t tid, [in] l4_umword_t mcp_or_chief,
                [in] l4_umword_t esp, [in] l4_umword_t eip,
                [in] l4_threadid_t pager, [in] l4_threadid_t caphandler,
                [in] l4_quota_desc_t kquota, [in] l4_umword_t sched_param,
                [out] l4_taskid_t *ntid);

  /**
   * \brief   Request riht to associate with IRQ to the caller.
   * \ingroup idl_rootttask
   *
   * \param   num  the IRQ number
   *
   * \return  0 on success, 1 otherwise
   */
  long get_irq([in] int num);

  /**
   * \brief   Pass right for IRQ back to roottask.
   * \ingroup idl_roottask
   *
   * \param   num  the IRQ number
   *
   * \return  0 on success, 1 otherwise
   */
  long free_irq([in] int num);

  /**
   * \brief   Free all IRQs occupied for a task.
   * \ingroup idl_roottask
   *
   * \param   tid  the task number
   *
   * \return  0 on success, 1 otherwise
   */
  long free_irq_all([in] l4_threadid_t tid);

  /**
   * \brief   Free the I/O ports defined by a flexpage (I/O memory page).
   * \ingroup idl_roottask
   *
   * \param    fp  the flexpage containing the I/O memory page
   *
   * \return   0 on success, 1 otherwise (not owner, page not I/O page)
   */
  long free_fpage([in] l4_umword_t fp);

  /**
   * \brief   Free the specified memory page.
   * \ingroup idl_roottask
   *
   * \param   address  an address for which the corresponding memory page \
   *                   should be freed
   *
   * \return  0 on success, 1 otherwise
   */
  long free_page([in] l4_addr_t address);

  /**
   * \brief   Dump the memory map of the roottask.
   * \ingroup idl_roottask
   *
   * \return  0 on success
   */
  long dump_mem();

  /**
   * \brief   Reserve memory at the roottask.
   * \ingroup idl_roottask
   *
   * \param   size   the size of memory to allocate
   * \param   align  alignment of the memory chunk
   * \param   flags  flags for the reserved memory region
   * \param   low    lower bound of the area where the memory should be \
   *                 allocated
   * \param   high   upper bound of the area where the memory should be \
   *                 allocated
   * \retval  addr   the address of the actually reserved memory chunk
   *
   * \return  0 on success, 1 otherwise.
   */
  long reserve_mem([in] l4_addr_t size, [in] l4_addr_t align, [in] int flags,
		   [in] l4_addr_t low,  [in] l4_addr_t high,
		   [out] l4_addr_t *addr);

  /**
   * \brief   Free all memory occupied by the target task.
   * \ingroup idl_roottask
   *
   * \param   tid  the ID of the task
   *
   * \return  0 on success, 1 otherwise.
   */
  long free_mem_all([in] l4_threadid_t tid);

  /**
   * \brief   Request the first physical page (roottask does not hand out \
   *          this page on pagefaults).
   * \ingroup idl_roottask
   *
   * \retval  page0  the flexpage containing the zero page
   *
   * \return  0 on success, 1 otherwise.
   */
  void get_page0([out] fpage *page0);

  /**
   * \brief   Request the task ID of the boot module named by modname.
   * \ingroup idl_roottask
   *
   * \param   modname  the name of the requested module
   * \retval  tid      the ID of the module
   *
   * \return  0 on success, 1 otherwise.
   */
  long get_task_id([in, string] char* modname, [out] l4_threadid_t *tid);

  /**
   * \brief   Specify the name of a boot module
   * \ingroup idl_roottask
   *
   * \param   modname  the name of the module to specify the ID for
   * \param   tid      the task ID for the module
   *
   * \return  0 on success, 1 otherwise
   */
  long set_task_id([in, string] char *modname, [in] l4_threadid_t tid);

  /**
   * \brief   Executes the privctrl system call
   * \ingroup idl_roottask
   *
   * \param   command  ignored
   * \param   param    ignored
   *
   * \return  0 on success.
   *
   * This is internal and implementation specific functionality. Do not use.
   */
  long privctrl([in] int command, [in] int param);
};
